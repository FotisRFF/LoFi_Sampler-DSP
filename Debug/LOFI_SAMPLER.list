
LOFI_SAMPLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c348  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e2c  0800c4d8  0800c4d8  0000d4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d304  0800d304  0000f150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d304  0800d304  0000e304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d30c  0800d30c  0000f150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d30c  0800d30c  0000e30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d310  0800d310  0000e310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  0800d314  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f150  2**0
                  CONTENTS
 10 .bss          00002624  20000150  20000150  0000f150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002774  20002774  0000f150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b639  00000000  00000000  0000f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045d6  00000000  00000000  0002a7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  0002ed90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012cc  00000000  00000000  00030608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025301  00000000  00000000  000318d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021939  00000000  00000000  00056bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4515  00000000  00000000  0007850e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ca23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bd8  00000000  00000000  0014ca68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00153640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4c0 	.word	0x0800c4c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800c4c0 	.word	0x0800c4c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Codec_Init>:

#include "I2C_Codec.h"

// Initialize the codec
HAL_StatusTypeDef Codec_Init(TLV_CODEC *codec, I2C_HandleTypeDef *i2cHandle )
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
    codec->i2cHandle = i2cHandle;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	601a      	str	r2, [r3, #0]

    //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
   //HAL_Delay(1000);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b2:	4839      	ldr	r0, [pc, #228]	@ (8000698 <Codec_Init+0xfc>)
 80005b4:	f002 fdc8 	bl	8003148 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005b8:	200a      	movs	r0, #10
 80005ba:	f001 fb6d 	bl	8001c98 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // release reset
 80005be:	2201      	movs	r2, #1
 80005c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c4:	4834      	ldr	r0, [pc, #208]	@ (8000698 <Codec_Init+0xfc>)
 80005c6:	f002 fdbf 	bl	8003148 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005ca:	200a      	movs	r0, #10
 80005cc:	f001 fb64 	bl	8001c98 <HAL_Delay>


    HAL_StatusTypeDef status;

    // Software Reset
    status = Codec_WriteRegister(codec, 0x01, 0x01); // komple grafw otan i timi einai checkarismeni
 80005d0:	2201      	movs	r2, #1
 80005d2:	2101      	movs	r1, #1
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f000 f861 	bl	800069c <Codec_WriteRegister>
 80005da:	4603      	mov	r3, r0
 80005dc:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80005de:	200a      	movs	r0, #10
 80005e0:	f001 fb5a 	bl	8001c98 <HAL_Delay>

    // Clock settings
    status = Codec_WriteRegister(codec, 0x03, 0x10); // dn jerw akoma
 80005e4:	2210      	movs	r2, #16
 80005e6:	2103      	movs	r1, #3
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f857 	bl	800069c <Codec_WriteRegister>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]

    // Audio routing
    status = Codec_WriteRegister(codec, 0x07, 0x08); //
 80005f2:	2208      	movs	r2, #8
 80005f4:	2107      	movs	r1, #7
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f850 	bl	800069c <Codec_WriteRegister>
 80005fc:	4603      	mov	r3, r0
 80005fe:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x0F, 0x00);
 8000600:	2200      	movs	r2, #0
 8000602:	210f      	movs	r1, #15
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 f849 	bl	800069c <Codec_WriteRegister>
 800060a:	4603      	mov	r3, r0
 800060c:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x10, 0x80);
 800060e:	2280      	movs	r2, #128	@ 0x80
 8000610:	2110      	movs	r1, #16
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f842 	bl	800069c <Codec_WriteRegister>
 8000618:	4603      	mov	r3, r0
 800061a:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x11, 0x0F);
 800061c:	220f      	movs	r2, #15
 800061e:	2111      	movs	r1, #17
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 f83b 	bl	800069c <Codec_WriteRegister>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x13, 0x7C);
 800062a:	227c      	movs	r2, #124	@ 0x7c
 800062c:	2113      	movs	r1, #19
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f000 f834 	bl	800069c <Codec_WriteRegister>
 8000634:	4603      	mov	r3, r0
 8000636:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x25, 0x80);
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	2125      	movs	r1, #37	@ 0x25
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 f82d 	bl	800069c <Codec_WriteRegister>
 8000642:	4603      	mov	r3, r0
 8000644:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x28, 0x80);
 8000646:	2280      	movs	r2, #128	@ 0x80
 8000648:	2128      	movs	r1, #40	@ 0x28
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f826 	bl	800069c <Codec_WriteRegister>
 8000650:	4603      	mov	r3, r0
 8000652:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x2B, 0x00);
 8000654:	2200      	movs	r2, #0
 8000656:	212b      	movs	r1, #43	@ 0x2b
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 f81f 	bl	800069c <Codec_WriteRegister>
 800065e:	4603      	mov	r3, r0
 8000660:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x52, 0x80);
 8000662:	2280      	movs	r2, #128	@ 0x80
 8000664:	2152      	movs	r1, #82	@ 0x52
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f818 	bl	800069c <Codec_WriteRegister>
 800066c:	4603      	mov	r3, r0
 800066e:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x56, 0x0B);
 8000670:	220b      	movs	r2, #11
 8000672:	2156      	movs	r1, #86	@ 0x56
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f811 	bl	800069c <Codec_WriteRegister>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]

    status = Codec_WriteRegister(codec, 0x65, 0x01);
 800067e:	2201      	movs	r2, #1
 8000680:	2165      	movs	r1, #101	@ 0x65
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f80a 	bl	800069c <Codec_WriteRegister>
 8000688:	4603      	mov	r3, r0
 800068a:	73fb      	strb	r3, [r7, #15]

    return status;
 800068c:	7bfb      	ldrb	r3, [r7, #15]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020000 	.word	0x40020000

0800069c <Codec_WriteRegister>:

// Write to codec register
HAL_StatusTypeDef Codec_WriteRegister(TLV_CODEC *codec, uint8_t reg, uint8_t value)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
 80006a8:	4613      	mov	r3, r2
 80006aa:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(codec->i2cHandle, CODEC_I2C_ADDRESS1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	2301      	movs	r3, #1
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	1cbb      	adds	r3, r7, #2
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2301      	movs	r3, #1
 80006c4:	2130      	movs	r1, #48	@ 0x30
 80006c6:	f002 feb7 	bl	8003438 <HAL_I2C_Mem_Write>
 80006ca:	4603      	mov	r3, r0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <DisplayPotBars>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DisplayPotBars(uint16_t *adcValues) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	@ 0x30
 80006d8:	af02      	add	r7, sp, #8
 80006da:	6078      	str	r0, [r7, #4]

	char *names[3] = { "Fc", "BITD", "PITCH" };
 80006dc:	4a36      	ldr	r2, [pc, #216]	@ (80007b8 <DisplayPotBars+0xe4>)
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    ssd1306_Fill(Black);  // Clear screen once
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 fd29 	bl	8001140 <ssd1306_Fill>

    for (int i = 0; i < 3; i++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006f2:	e058      	b.n	80007a6 <DisplayPotBars+0xd2>
        uint8_t percent = (adcValues[i] * 100) / 4095;
 80006f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	4413      	add	r3, r2
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	fb02 f303 	mul.w	r3, r2, r3
 8000706:	4a2d      	ldr	r2, [pc, #180]	@ (80007bc <DisplayPotBars+0xe8>)
 8000708:	fb82 1203 	smull	r1, r2, r2, r3
 800070c:	441a      	add	r2, r3
 800070e:	12d2      	asrs	r2, r2, #11
 8000710:	17db      	asrs	r3, r3, #31
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
       // uint8_t barWidth = (percent * 70) / 100;  // Bar max width 70 px

        uint8_t x = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        uint8_t y = i * 20;  // 20 px vertical spacing
 800071e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	0092      	lsls	r2, r2, #2
 8000726:	4413      	add	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        // Draw bar outline
        ssd1306_DrawRectangle(x, y, 70, 18, White);
 800072e:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8000732:	f897 0022 	ldrb.w	r0, [r7, #34]	@ 0x22
 8000736:	2301      	movs	r3, #1
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2312      	movs	r3, #18
 800073c:	2246      	movs	r2, #70	@ 0x46
 800073e:	f000 fecf 	bl	80014e0 <ssd1306_DrawRectangle>
            ssd1306_FillRectangle(x + 1, y + 1, barWidth - 2, 16, White);
        }*/

        // Draw percentage text centered inside the bar
        char percentStr[6];
        sprintf(percentStr, "%3d%%", percent);
 8000742:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	491d      	ldr	r1, [pc, #116]	@ (80007c0 <DisplayPotBars+0xec>)
 800074c:	4618      	mov	r0, r3
 800074e:	f00b fa17 	bl	800bb80 <siprintf>

        // 4 chars * ~11 px = 44 px width approx
        uint8_t textX = x + (70 - 44) / 2;
 8000752:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000756:	330d      	adds	r3, #13
 8000758:	f887 3020 	strb.w	r3, [r7, #32]
        ssd1306_SetCursor(textX, y);
 800075c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8000760:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fe36 	bl	80013d8 <ssd1306_SetCursor>
        ssd1306_WriteString(percentStr, Font_11x18, Black);  // Inverted color inside bar
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <DisplayPotBars+0xf0>)
 800076e:	f107 000c 	add.w	r0, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	9200      	str	r2, [sp, #0]
 8000776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000778:	f000 fe08 	bl	800138c <ssd1306_WriteString>

        // Draw pot name on the right, starting at x=75, so 70 + 5 px margin
        ssd1306_SetCursor(75, y);
 800077c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000780:	4619      	mov	r1, r3
 8000782:	204b      	movs	r0, #75	@ 0x4b
 8000784:	f000 fe28 	bl	80013d8 <ssd1306_SetCursor>
        ssd1306_WriteString(names[i], Font_11x18, White);
 8000788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	3328      	adds	r3, #40	@ 0x28
 800078e:	443b      	add	r3, r7
 8000790:	f853 0c14 	ldr.w	r0, [r3, #-20]
 8000794:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <DisplayPotBars+0xf0>)
 8000796:	2201      	movs	r2, #1
 8000798:	9200      	str	r2, [sp, #0]
 800079a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800079c:	f000 fdf6 	bl	800138c <ssd1306_WriteString>
    for (int i = 0; i < 3; i++) {
 80007a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a2:	3301      	adds	r3, #1
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80007a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	dda3      	ble.n	80006f4 <DisplayPotBars+0x20>



    }

    ssd1306_UpdateScreen();
 80007ac:	f000 fce0 	bl	8001170 <ssd1306_UpdateScreen>
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	@ 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	0800c4f4 	.word	0x0800c4f4
 80007bc:	80080081 	.word	0x80080081
 80007c0:	0800c4d8 	.word	0x0800c4d8
 80007c4:	0800d2a4 	.word	0x0800d2a4

080007c8 <HAL_I2SEx_TxRxHalfCpltCallback>:
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	inBufPtr  =  &adcData[0];
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 80007d2:	4a08      	ldr	r2, [pc, #32]	@ (80007f4 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 80007d4:	601a      	str	r2, [r3, #0]
	outBufPtr =  &dacData[0];
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 80007d8:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 80007da:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000620 	.word	0x20000620
 80007f4:	20000418 	.word	0x20000418
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000518 	.word	0x20000518
 8000800:	20000624 	.word	0x20000624

08000804 <HAL_I2SEx_TxRxCpltCallback>:
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	inBufPtr  =  &adcData[BUFFER_SIZE/2];
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <HAL_I2SEx_TxRxCpltCallback+0x28>)
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8000810:	601a      	str	r2, [r3, #0]
	outBufPtr =  &dacData[BUFFER_SIZE/2];
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8000814:	4a08      	ldr	r2, [pc, #32]	@ (8000838 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000816:	601a      	str	r2, [r3, #0]


	dataReadyFlag = 1;
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <HAL_I2SEx_TxRxCpltCallback+0x38>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000620 	.word	0x20000620
 8000830:	20000498 	.word	0x20000498
 8000834:	20000000 	.word	0x20000000
 8000838:	20000598 	.word	0x20000598
 800083c:	20000624 	.word	0x20000624

08000840 <ProcessData>:

void ProcessData(){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

    static float leftIn ,leftOut;
    static float rightIn ,rightOut;


    for(uint8_t n=0; n<(BUFFER_SIZE/2)-1 ;n+=2){
 8000846:	2300      	movs	r3, #0
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	e07e      	b.n	800094a <ProcessData+0x10a>


    	leftIn = INT16_TO_FLOAT *inBufPtr[n];
 800084c:	4b48      	ldr	r3, [pc, #288]	@ (8000970 <ProcessData+0x130>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	b21b      	sxth	r3, r3
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000862:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000974 <ProcessData+0x134>
 8000866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800086a:	4b43      	ldr	r3, [pc, #268]	@ (8000978 <ProcessData+0x138>)
 800086c:	edc3 7a00 	vstr	s15, [r3]
    	if(leftIn > 1.0f){
 8000870:	4b41      	ldr	r3, [pc, #260]	@ (8000978 <ProcessData+0x138>)
 8000872:	edd3 7a00 	vldr	s15, [r3]
 8000876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800087a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800087e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000882:	dd09      	ble.n	8000898 <ProcessData+0x58>
    		leftIn -=2.0f;
 8000884:	4b3c      	ldr	r3, [pc, #240]	@ (8000978 <ProcessData+0x138>)
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800088e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000892:	4b39      	ldr	r3, [pc, #228]	@ (8000978 <ProcessData+0x138>)
 8000894:	edc3 7a00 	vstr	s15, [r3]
    	}

    	leftOut=leftIn;
 8000898:	4b37      	ldr	r3, [pc, #220]	@ (8000978 <ProcessData+0x138>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a37      	ldr	r2, [pc, #220]	@ (800097c <ProcessData+0x13c>)
 800089e:	6013      	str	r3, [r2, #0]


    	outBufPtr[n] = (uint16_t) (FLOAT_TO_INT16* leftOut);
 80008a0:	4b36      	ldr	r3, [pc, #216]	@ (800097c <ProcessData+0x13c>)
 80008a2:	edd3 7a00 	vldr	s15, [r3]
 80008a6:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000980 <ProcessData+0x140>
 80008aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008b2:	ee17 3a90 	vmov	r3, s15
 80008b6:	b299      	uxth	r1, r3
 80008b8:	4b32      	ldr	r3, [pc, #200]	@ (8000984 <ProcessData+0x144>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	4413      	add	r3, r2
 80008c2:	b20a      	sxth	r2, r1
 80008c4:	801a      	strh	r2, [r3, #0]

    	rightIn = INT16_TO_FLOAT *inBufPtr[n+1];
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <ProcessData+0x130>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3301      	adds	r3, #1
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4413      	add	r3, r2
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008de:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000974 <ProcessData+0x134>
 80008e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008e6:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <ProcessData+0x148>)
 80008e8:	edc3 7a00 	vstr	s15, [r3]
    	if(rightIn > 1.0f){
 80008ec:	4b26      	ldr	r3, [pc, #152]	@ (8000988 <ProcessData+0x148>)
 80008ee:	edd3 7a00 	vldr	s15, [r3]
 80008f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80008f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fe:	dd09      	ble.n	8000914 <ProcessData+0xd4>
    	     rightIn -= 2.0f;
 8000900:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <ProcessData+0x148>)
 8000902:	edd3 7a00 	vldr	s15, [r3]
 8000906:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800090a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <ProcessData+0x148>)
 8000910:	edc3 7a00 	vstr	s15, [r3]
    	}
    	//edw ginetai to proccseing the ka8e kanali
    	rightOut=rightIn;
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <ProcessData+0x148>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1c      	ldr	r2, [pc, #112]	@ (800098c <ProcessData+0x14c>)
 800091a:	6013      	str	r3, [r2, #0]


    	outBufPtr[n+1] = (uint16_t) (FLOAT_TO_INT16 *rightOut);
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <ProcessData+0x14c>)
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000980 <ProcessData+0x140>
 8000926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800092a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800092e:	ee17 3a90 	vmov	r3, s15
 8000932:	b299      	uxth	r1, r3
 8000934:	4b13      	ldr	r3, [pc, #76]	@ (8000984 <ProcessData+0x144>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	3301      	adds	r3, #1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	b20a      	sxth	r2, r1
 8000942:	801a      	strh	r2, [r3, #0]
    for(uint8_t n=0; n<(BUFFER_SIZE/2)-1 ;n+=2){
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	3302      	adds	r3, #2
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b3e      	cmp	r3, #62	@ 0x3e
 800094e:	f67f af7d 	bls.w	800084c <ProcessData+0xc>


    }
    dataReadyFlag = 0;
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <ProcessData+0x150>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800095c:	480d      	ldr	r0, [pc, #52]	@ (8000994 <ProcessData+0x154>)
 800095e:	f002 fc0c 	bl	800317a <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 8000962:	20fa      	movs	r0, #250	@ 0xfa
 8000964:	f001 f998 	bl	8001c98 <HAL_Delay>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000620 	.word	0x20000620
 8000974:	38000000 	.word	0x38000000
 8000978:	20000628 	.word	0x20000628
 800097c:	2000062c 	.word	0x2000062c
 8000980:	46fffe00 	.word	0x46fffe00
 8000984:	20000000 	.word	0x20000000
 8000988:	20000630 	.word	0x20000630
 800098c:	20000634 	.word	0x20000634
 8000990:	20000624 	.word	0x20000624
 8000994:	40020400 	.word	0x40020400

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099e:	f001 f909 	bl	8001bb4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a2:	f000 f85d 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a6:	f000 fa6d 	bl	8000e84 <MX_GPIO_Init>
  MX_DMA_Init();
 80009aa:	f000 fa2d 	bl	8000e08 <MX_DMA_Init>
  MX_ADC1_Init();
 80009ae:	f000 f8bf 	bl	8000b30 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009b2:	f000 f92b 	bl	8000c0c <MX_I2C1_Init>
  MX_I2C2_Init();
 80009b6:	f000 f957 	bl	8000c68 <MX_I2C2_Init>
  MX_I2S2_Init();
 80009ba:	f000 f983 	bl	8000cc4 <MX_I2S2_Init>
  MX_USB_DEVICE_Init();
 80009be:	f00a fbeb 	bl	800b198 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80009c2:	f000 f9ad 	bl	8000d20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  Codec_Init(&codec, &hi2c2);
 80009c6:	491c      	ldr	r1, [pc, #112]	@ (8000a38 <main+0xa0>)
 80009c8:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <main+0xa4>)
 80009ca:	f7ff fde7 	bl	800059c <Codec_Init>

  HAL_Delay(50);
 80009ce:	2032      	movs	r0, #50	@ 0x32
 80009d0:	f001 f962 	bl	8001c98 <HAL_Delay>

  ssd1306_Init();
 80009d4:	f000 fb4a 	bl	800106c <ssd1306_Init>

  //ssd1306_Fill(White);
  //ssd1306_UpdateScreen();


 HAL_StatusTypeDef status_Data = HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t *) dacData, (uint16_t *)adcData, BUFFER_SIZE);
 80009d8:	2380      	movs	r3, #128	@ 0x80
 80009da:	4a19      	ldr	r2, [pc, #100]	@ (8000a40 <main+0xa8>)
 80009dc:	4919      	ldr	r1, [pc, #100]	@ (8000a44 <main+0xac>)
 80009de:	481a      	ldr	r0, [pc, #104]	@ (8000a48 <main+0xb0>)
 80009e0:	f003 fe50 	bl	8004684 <HAL_I2SEx_TransmitReceive_DMA>
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]





 HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcControlData, 3); //pots dma streams xd
 80009e8:	2203      	movs	r2, #3
 80009ea:	4918      	ldr	r1, [pc, #96]	@ (8000a4c <main+0xb4>)
 80009ec:	4818      	ldr	r0, [pc, #96]	@ (8000a50 <main+0xb8>)
 80009ee:	f001 f9bb 	bl	8001d68 <HAL_ADC_Start_DMA>
 HAL_TIM_Base_Start(&htim2);
 80009f2:	4818      	ldr	r0, [pc, #96]	@ (8000a54 <main+0xbc>)
 80009f4:	f006 fb1a 	bl	800702c <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//DEBUGING THE I2C REGISTER WRITE ON THE CODEC
 	uint8_t regdata;
	HAL_StatusTypeDef read = HAL_I2C_Mem_Read(&hi2c2, (0x18 << 1), 0x07, I2C_MEMADD_SIZE_8BIT, &regdata, 1, 100);
 80009f8:	2364      	movs	r3, #100	@ 0x64
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	2301      	movs	r3, #1
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	1d7b      	adds	r3, r7, #5
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2301      	movs	r3, #1
 8000a06:	2207      	movs	r2, #7
 8000a08:	2130      	movs	r1, #48	@ 0x30
 8000a0a:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <main+0xa0>)
 8000a0c:	f002 fe0e 	bl	800362c <HAL_I2C_Mem_Read>
 8000a10:	4603      	mov	r3, r0
 8000a12:	71bb      	strb	r3, [r7, #6]

	if(read == HAL_OK){
 8000a14:	79bb      	ldrb	r3, [r7, #6]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d104      	bne.n	8000a24 <main+0x8c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <main+0xc0>)
 8000a20:	f002 fb92 	bl	8003148 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */

	  //POTS TOP SCREEN FUNCTION

	  DisplayPotBars(adcControlData);
 8000a24:	4809      	ldr	r0, [pc, #36]	@ (8000a4c <main+0xb4>)
 8000a26:	f7ff fe55 	bl	80006d4 <DisplayPotBars>

	 //DMA STREAMS


	  if(dataReadyFlag){
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <main+0xc4>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f8      	beq.n	8000a24 <main+0x8c>

	  ProcessData();
 8000a32:	f7ff ff05 	bl	8000840 <ProcessData>
	  DisplayPotBars(adcControlData);
 8000a36:	e7f5      	b.n	8000a24 <main+0x8c>
 8000a38:	20000268 	.word	0x20000268
 8000a3c:	2000040c 	.word	0x2000040c
 8000a40:	20000418 	.word	0x20000418
 8000a44:	20000518 	.word	0x20000518
 8000a48:	200002bc 	.word	0x200002bc
 8000a4c:	20000618 	.word	0x20000618
 8000a50:	2000016c 	.word	0x2000016c
 8000a54:	200003c4 	.word	0x200003c4
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	20000624 	.word	0x20000624

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b094      	sub	sp, #80	@ 0x50
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	2230      	movs	r2, #48	@ 0x30
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00b f8a8 	bl	800bbc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <SystemClock_Config+0xc8>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	4a26      	ldr	r2, [pc, #152]	@ (8000b28 <SystemClock_Config+0xc8>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <SystemClock_Config+0xc8>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <SystemClock_Config+0xcc>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a20      	ldr	r2, [pc, #128]	@ (8000b2c <SystemClock_Config+0xcc>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aae:	6013      	str	r3, [r2, #0]
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <SystemClock_Config+0xcc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000abc:	2301      	movs	r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ad4:	2348      	movs	r3, #72	@ 0x48
 8000ad6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000adc:	2303      	movs	r3, #3
 8000ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 0320 	add.w	r3, r7, #32
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f005 fc8f 	bl	8006408 <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000af0:	f000 fa7c 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	230f      	movs	r3, #15
 8000af6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	2302      	movs	r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f005 fef1 	bl	80068f8 <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b1c:	f000 fa66 	bl	8000fec <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3750      	adds	r7, #80	@ 0x50
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b42:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b44:	4a30      	ldr	r2, [pc, #192]	@ (8000c08 <MX_ADC1_Init+0xd8>)
 8000b46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b48:	4b2e      	ldr	r3, [pc, #184]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b50:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b56:	4b2b      	ldr	r3, [pc, #172]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b5c:	4b29      	ldr	r3, [pc, #164]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b62:	4b28      	ldr	r3, [pc, #160]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000b72:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b74:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000b78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b7a:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b80:	4b20      	ldr	r3, [pc, #128]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b82:	2203      	movs	r2, #3
 8000b84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b86:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b94:	481b      	ldr	r0, [pc, #108]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000b96:	f001 f8a3 	bl	8001ce0 <HAL_ADC_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000ba0:	f000 fa24 	bl	8000fec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000bac:	2306      	movs	r3, #6
 8000bae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4813      	ldr	r0, [pc, #76]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000bb6:	f001 fa09 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000bc0:	f000 fa14 	bl	8000fec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000bd2:	f001 f9fb 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000bdc:	f000 fa06 	bl	8000fec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000be0:	2307      	movs	r3, #7
 8000be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000be4:	2303      	movs	r3, #3
 8000be6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_ADC1_Init+0xd4>)
 8000bee:	f001 f9ed 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000bf8:	f000 f9f8 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000016c 	.word	0x2000016c
 8000c08:	40012000 	.word	0x40012000

08000c0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c10:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c12:	4a13      	ldr	r2, [pc, #76]	@ (8000c60 <MX_I2C1_Init+0x54>)
 8000c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c16:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c18:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <MX_I2C1_Init+0x58>)
 8000c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c48:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <MX_I2C1_Init+0x50>)
 8000c4a:	f002 fab1 	bl	80031b0 <HAL_I2C_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c54:	f000 f9ca 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000214 	.word	0x20000214
 8000c60:	40005400 	.word	0x40005400
 8000c64:	000186a0 	.word	0x000186a0

08000c68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000c6e:	4a13      	ldr	r2, [pc, #76]	@ (8000cbc <MX_I2C2_Init+0x54>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <MX_I2C2_Init+0x58>)
 8000c76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000c86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c98:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <MX_I2C2_Init+0x50>)
 8000ca6:	f002 fa83 	bl	80031b0 <HAL_I2C_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000cb0:	f000 f99c 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000268 	.word	0x20000268
 8000cbc:	40005800 	.word	0x40005800
 8000cc0:	000186a0 	.word	0x000186a0

08000cc4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000cca:	4a14      	ldr	r2, [pc, #80]	@ (8000d1c <MX_I2S2_Init+0x58>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000cce:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cd4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000cec:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000cf0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <MX_I2S2_Init+0x54>)
 8000d06:	f003 fa77 	bl	80041f8 <HAL_I2S_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000d10:	f000 f96c 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200002bc 	.word	0x200002bc
 8000d1c:	40003800 	.word	0x40003800

08000d20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	@ 0x38
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	f107 0320 	add.w	r3, r7, #32
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d50:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000d52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 33600-1;
 8000d58:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000d5a:	f248 323f 	movw	r2, #33599	@ 0x833f
 8000d5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000d66:	4b27      	ldr	r3, [pc, #156]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000d68:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000d6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6e:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d7a:	4822      	ldr	r0, [pc, #136]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000d7c:	f006 f906 	bl	8006f8c <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d86:	f000 f931 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d94:	4619      	mov	r1, r3
 8000d96:	481b      	ldr	r0, [pc, #108]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000d98:	f006 facc 	bl	8007334 <HAL_TIM_ConfigClockSource>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000da2:	f000 f923 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000da6:	4817      	ldr	r0, [pc, #92]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000da8:	f006 f9a8 	bl	80070fc <HAL_TIM_PWM_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000db2:	f000 f91b 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000db6:	2320      	movs	r3, #32
 8000db8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480f      	ldr	r0, [pc, #60]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000dc6:	f006 fe6d 	bl	8007aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dd0:	f000 f90c 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd4:	2360      	movs	r3, #96	@ 0x60
 8000dd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	@ (8000e04 <MX_TIM2_Init+0xe4>)
 8000dec:	f006 f9e0 	bl	80071b0 <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000df6:	f000 f8f9 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3738      	adds	r7, #56	@ 0x38
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200003c4 	.word	0x200003c4

08000e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b1b      	ldr	r3, [pc, #108]	@ (8000e80 <MX_DMA_Init+0x78>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a1a      	ldr	r2, [pc, #104]	@ (8000e80 <MX_DMA_Init+0x78>)
 8000e18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_DMA_Init+0x78>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_DMA_Init+0x78>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a13      	ldr	r2, [pc, #76]	@ (8000e80 <MX_DMA_Init+0x78>)
 8000e34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_DMA_Init+0x78>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200e      	movs	r0, #14
 8000e4c:	f001 fc39 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e50:	200e      	movs	r0, #14
 8000e52:	f001 fc52 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f001 fc31 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e60:	200f      	movs	r0, #15
 8000e62:	f001 fc4a 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2038      	movs	r0, #56	@ 0x38
 8000e6c:	f001 fc29 	bl	80026c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e70:	2038      	movs	r0, #56	@ 0x38
 8000e72:	f001 fc42 	bl	80026fa <HAL_NVIC_EnableIRQ>

}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a4e      	ldr	r2, [pc, #312]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b48      	ldr	r3, [pc, #288]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a47      	ldr	r2, [pc, #284]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b45      	ldr	r3, [pc, #276]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b41      	ldr	r3, [pc, #260]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a40      	ldr	r2, [pc, #256]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a39      	ldr	r2, [pc, #228]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <MX_GPIO_Init+0x158>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f10:	4833      	ldr	r0, [pc, #204]	@ (8000fe0 <MX_GPIO_Init+0x15c>)
 8000f12:	f002 f919 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STOP_LED_Pin|PLAY_LED_Pin|Codec_reset_pin_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f248 0128 	movw	r1, #32808	@ 0x8028
 8000f1c:	4831      	ldr	r0, [pc, #196]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000f1e:	f002 f913 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8000f28:	482f      	ldr	r0, [pc, #188]	@ (8000fe8 <MX_GPIO_Init+0x164>)
 8000f2a:	f002 f90d 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4826      	ldr	r0, [pc, #152]	@ (8000fe0 <MX_GPIO_Init+0x15c>)
 8000f48:	f001 ff62 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_LED_Pin PLAY_LED_Pin Codec_reset_pin_Pin */
  GPIO_InitStruct.Pin = STOP_LED_Pin|PLAY_LED_Pin|Codec_reset_pin_Pin;
 8000f4c:	f248 0328 	movw	r3, #32808	@ 0x8028
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	481f      	ldr	r0, [pc, #124]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000f66:	f001 ff53 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : STOP_BUT_Pin */
  GPIO_InitStruct.Pin = STOP_BUT_Pin;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STOP_BUT_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4818      	ldr	r0, [pc, #96]	@ (8000fe0 <MX_GPIO_Init+0x15c>)
 8000f7e:	f001 ff47 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8;
 8000f82:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4813      	ldr	r0, [pc, #76]	@ (8000fe8 <MX_GPIO_Init+0x164>)
 8000f9c:	f001 ff38 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_A_Pin */
  GPIO_InitStruct.Pin = SD_DET_A_Pin;
 8000fa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_A_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <MX_GPIO_Init+0x160>)
 8000fb6:	f001 ff2b 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOOP_BUT_Pin PB5 */
  GPIO_InitStruct.Pin = LOOP_BUT_Pin|GPIO_PIN_5;
 8000fba:	2330      	movs	r3, #48	@ 0x30
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <MX_GPIO_Init+0x164>)
 8000fce:	f001 ff1f 	bl	8002e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	@ 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	40020400 	.word	0x40020400

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <Error_Handler+0x8>

08000ff8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af04      	add	r7, sp, #16
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	2301      	movs	r3, #1
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2301      	movs	r3, #1
 8001022:	2200      	movs	r2, #0
 8001024:	2178      	movs	r1, #120	@ 0x78
 8001026:	4803      	ldr	r0, [pc, #12]	@ (8001034 <ssd1306_WriteCommand+0x2c>)
 8001028:	f002 fa06 	bl	8003438 <HAL_I2C_Mem_Write>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000214 	.word	0x20000214

08001038 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af04      	add	r7, sp, #16
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	f04f 32ff 	mov.w	r2, #4294967295
 800104a:	9202      	str	r2, [sp, #8]
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2240      	movs	r2, #64	@ 0x40
 8001056:	2178      	movs	r1, #120	@ 0x78
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <ssd1306_WriteData+0x30>)
 800105a:	f002 f9ed 	bl	8003438 <HAL_I2C_Mem_Write>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000214 	.word	0x20000214

0800106c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001070:	f7ff ffc2 	bl	8000ff8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001074:	2064      	movs	r0, #100	@ 0x64
 8001076:	f000 fe0f 	bl	8001c98 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800107a:	2000      	movs	r0, #0
 800107c:	f000 fa7a 	bl	8001574 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001080:	2020      	movs	r0, #32
 8001082:	f7ff ffc1 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff ffbe 	bl	8001008 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800108c:	20b0      	movs	r0, #176	@ 0xb0
 800108e:	f7ff ffbb 	bl	8001008 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001092:	20c8      	movs	r0, #200	@ 0xc8
 8001094:	f7ff ffb8 	bl	8001008 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ffb5 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800109e:	2010      	movs	r0, #16
 80010a0:	f7ff ffb2 	bl	8001008 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80010a4:	2040      	movs	r0, #64	@ 0x40
 80010a6:	f7ff ffaf 	bl	8001008 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80010aa:	20ff      	movs	r0, #255	@ 0xff
 80010ac:	f000 fa4f 	bl	800154e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80010b0:	20a1      	movs	r0, #161	@ 0xa1
 80010b2:	f7ff ffa9 	bl	8001008 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80010b6:	20a6      	movs	r0, #166	@ 0xa6
 80010b8:	f7ff ffa6 	bl	8001008 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80010bc:	20a8      	movs	r0, #168	@ 0xa8
 80010be:	f7ff ffa3 	bl	8001008 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80010c2:	203f      	movs	r0, #63	@ 0x3f
 80010c4:	f7ff ffa0 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010c8:	20a4      	movs	r0, #164	@ 0xa4
 80010ca:	f7ff ff9d 	bl	8001008 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80010ce:	20d3      	movs	r0, #211	@ 0xd3
 80010d0:	f7ff ff9a 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff ff97 	bl	8001008 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80010da:	20d5      	movs	r0, #213	@ 0xd5
 80010dc:	f7ff ff94 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80010e0:	20f0      	movs	r0, #240	@ 0xf0
 80010e2:	f7ff ff91 	bl	8001008 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80010e6:	20d9      	movs	r0, #217	@ 0xd9
 80010e8:	f7ff ff8e 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80010ec:	2022      	movs	r0, #34	@ 0x22
 80010ee:	f7ff ff8b 	bl	8001008 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80010f2:	20da      	movs	r0, #218	@ 0xda
 80010f4:	f7ff ff88 	bl	8001008 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80010f8:	2012      	movs	r0, #18
 80010fa:	f7ff ff85 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80010fe:	20db      	movs	r0, #219	@ 0xdb
 8001100:	f7ff ff82 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001104:	2020      	movs	r0, #32
 8001106:	f7ff ff7f 	bl	8001008 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800110a:	208d      	movs	r0, #141	@ 0x8d
 800110c:	f7ff ff7c 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001110:	2014      	movs	r0, #20
 8001112:	f7ff ff79 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001116:	2001      	movs	r0, #1
 8001118:	f000 fa2c 	bl	8001574 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f80f 	bl	8001140 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001122:	f000 f825 	bl	8001170 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001126:	4b05      	ldr	r3, [pc, #20]	@ (800113c <ssd1306_Init+0xd0>)
 8001128:	2200      	movs	r2, #0
 800112a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <ssd1306_Init+0xd0>)
 800112e:	2200      	movs	r2, #0
 8001130:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001132:	4b02      	ldr	r3, [pc, #8]	@ (800113c <ssd1306_Init+0xd0>)
 8001134:	2201      	movs	r2, #1
 8001136:	711a      	strb	r2, [r3, #4]
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000a38 	.word	0x20000a38

08001140 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <ssd1306_Fill+0x14>
 8001150:	2300      	movs	r3, #0
 8001152:	e000      	b.n	8001156 <ssd1306_Fill+0x16>
 8001154:	23ff      	movs	r3, #255	@ 0xff
 8001156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115a:	4619      	mov	r1, r3
 800115c:	4803      	ldr	r0, [pc, #12]	@ (800116c <ssd1306_Fill+0x2c>)
 800115e:	f00a fd31 	bl	800bbc4 <memset>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000638 	.word	0x20000638

08001170 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001176:	2300      	movs	r3, #0
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e016      	b.n	80011aa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	3b50      	subs	r3, #80	@ 0x50
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff40 	bl	8001008 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff ff3d 	bl	8001008 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800118e:	2010      	movs	r0, #16
 8001190:	f7ff ff3a 	bl	8001008 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	01db      	lsls	r3, r3, #7
 8001198:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <ssd1306_UpdateScreen+0x4c>)
 800119a:	4413      	add	r3, r2
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff4a 	bl	8001038 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	3301      	adds	r3, #1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	d9e5      	bls.n	800117c <ssd1306_UpdateScreen+0xc>
    }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000638 	.word	0x20000638

080011c0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
 80011ca:	460b      	mov	r3, r1
 80011cc:	71bb      	strb	r3, [r7, #6]
 80011ce:	4613      	mov	r3, r2
 80011d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db3d      	blt.n	8001256 <ssd1306_DrawPixel+0x96>
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80011de:	d83a      	bhi.n	8001256 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80011e0:	797b      	ldrb	r3, [r7, #5]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d11a      	bne.n	800121c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011e6:	79fa      	ldrb	r2, [r7, #7]
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	08db      	lsrs	r3, r3, #3
 80011ec:	b2d8      	uxtb	r0, r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	01db      	lsls	r3, r3, #7
 80011f2:	4413      	add	r3, r2
 80011f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001264 <ssd1306_DrawPixel+0xa4>)
 80011f6:	5cd3      	ldrb	r3, [r2, r3]
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	2101      	movs	r1, #1
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	b25b      	sxtb	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b259      	sxtb	r1, r3
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	4603      	mov	r3, r0
 8001210:	01db      	lsls	r3, r3, #7
 8001212:	4413      	add	r3, r2
 8001214:	b2c9      	uxtb	r1, r1
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <ssd1306_DrawPixel+0xa4>)
 8001218:	54d1      	strb	r1, [r2, r3]
 800121a:	e01d      	b.n	8001258 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	08db      	lsrs	r3, r3, #3
 8001222:	b2d8      	uxtb	r0, r3
 8001224:	4603      	mov	r3, r0
 8001226:	01db      	lsls	r3, r3, #7
 8001228:	4413      	add	r3, r2
 800122a:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <ssd1306_DrawPixel+0xa4>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	b25a      	sxtb	r2, r3
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	b25b      	sxtb	r3, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4013      	ands	r3, r2
 8001244:	b259      	sxtb	r1, r3
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	4603      	mov	r3, r0
 800124a:	01db      	lsls	r3, r3, #7
 800124c:	4413      	add	r3, r2
 800124e:	b2c9      	uxtb	r1, r1
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <ssd1306_DrawPixel+0xa4>)
 8001252:	54d1      	strb	r1, [r2, r3]
 8001254:	e000      	b.n	8001258 <ssd1306_DrawPixel+0x98>
        return;
 8001256:	bf00      	nop
    }
}
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000638 	.word	0x20000638

08001268 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b089      	sub	sp, #36	@ 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	4604      	mov	r4, r0
 8001270:	4638      	mov	r0, r7
 8001272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001276:	4623      	mov	r3, r4
 8001278:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b1f      	cmp	r3, #31
 800127e:	d902      	bls.n	8001286 <ssd1306_WriteChar+0x1e>
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b7e      	cmp	r3, #126	@ 0x7e
 8001284:	d901      	bls.n	800128a <ssd1306_WriteChar+0x22>
        return 0;
 8001286:	2300      	movs	r3, #0
 8001288:	e079      	b.n	800137e <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <ssd1306_WriteChar+0x34>
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3b20      	subs	r3, #32
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	e000      	b.n	800129e <ssd1306_WriteChar+0x36>
 800129c:	783b      	ldrb	r3, [r7, #0]
 800129e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <ssd1306_WriteChar+0x120>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	4413      	add	r3, r2
 80012aa:	2b80      	cmp	r3, #128	@ 0x80
 80012ac:	dc06      	bgt.n	80012bc <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80012ae:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <ssd1306_WriteChar+0x120>)
 80012b0:	885b      	ldrh	r3, [r3, #2]
 80012b2:	461a      	mov	r2, r3
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80012b8:	2b40      	cmp	r3, #64	@ 0x40
 80012ba:	dd01      	ble.n	80012c0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	e05e      	b.n	800137e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	e04d      	b.n	8001362 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	3b20      	subs	r3, #32
 80012cc:	7879      	ldrb	r1, [r7, #1]
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	4619      	mov	r1, r3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	440b      	add	r3, r1
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	e036      	b.n	8001354 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d013      	beq.n	800131e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80012f6:	4b24      	ldr	r3, [pc, #144]	@ (8001388 <ssd1306_WriteChar+0x120>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4413      	add	r3, r2
 8001302:	b2d8      	uxtb	r0, r3
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <ssd1306_WriteChar+0x120>)
 8001306:	885b      	ldrh	r3, [r3, #2]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	b2db      	uxtb	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff ff52 	bl	80011c0 <ssd1306_DrawPixel>
 800131c:	e017      	b.n	800134e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <ssd1306_WriteChar+0x120>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4413      	add	r3, r2
 800132a:	b2d8      	uxtb	r0, r3
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <ssd1306_WriteChar+0x120>)
 800132e:	885b      	ldrh	r3, [r3, #2]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4413      	add	r3, r2
 8001338:	b2d9      	uxtb	r1, r3
 800133a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800133e:	2b00      	cmp	r3, #0
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	f7ff ff39 	bl	80011c0 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	3301      	adds	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	429a      	cmp	r2, r3
 800135a:	d3c4      	bcc.n	80012e6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	3301      	adds	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	787b      	ldrb	r3, [r7, #1]
 8001364:	461a      	mov	r2, r3
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4293      	cmp	r3, r2
 800136a:	d3ac      	bcc.n	80012c6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <ssd1306_WriteChar+0x120>)
 800136e:	881a      	ldrh	r2, [r3, #0]
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4413      	add	r3, r2
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <ssd1306_WriteChar+0x120>)
 800137a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	@ 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	bf00      	nop
 8001388:	20000a38 	.word	0x20000a38

0800138c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	4638      	mov	r0, r7
 8001396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800139a:	e013      	b.n	80013c4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	7818      	ldrb	r0, [r3, #0]
 80013a0:	7e3b      	ldrb	r3, [r7, #24]
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	463b      	mov	r3, r7
 80013a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a8:	f7ff ff5e 	bl	8001268 <ssd1306_WriteChar>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d002      	beq.n	80013be <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	e008      	b.n	80013d0 <ssd1306_WriteString+0x44>
        }
        str++;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e7      	bne.n	800139c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	781b      	ldrb	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <ssd1306_SetCursor+0x2c>)
 80013ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80013f0:	79bb      	ldrb	r3, [r7, #6]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <ssd1306_SetCursor+0x2c>)
 80013f6:	805a      	strh	r2, [r3, #2]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	20000a38 	.word	0x20000a38

08001408 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b089      	sub	sp, #36	@ 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	4604      	mov	r4, r0
 8001410:	4608      	mov	r0, r1
 8001412:	4611      	mov	r1, r2
 8001414:	461a      	mov	r2, r3
 8001416:	4623      	mov	r3, r4
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	4603      	mov	r3, r0
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	460b      	mov	r3, r1
 8001420:	717b      	strb	r3, [r7, #5]
 8001422:	4613      	mov	r3, r2
 8001424:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001426:	797a      	ldrb	r2, [r7, #5]
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	bfb8      	it	lt
 8001430:	425b      	neglt	r3, r3
 8001432:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001434:	793a      	ldrb	r2, [r7, #4]
 8001436:	79bb      	ldrb	r3, [r7, #6]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	bfb8      	it	lt
 800143e:	425b      	neglt	r3, r3
 8001440:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	429a      	cmp	r2, r3
 8001448:	d201      	bcs.n	800144e <ssd1306_Line+0x46>
 800144a:	2301      	movs	r3, #1
 800144c:	e001      	b.n	8001452 <ssd1306_Line+0x4a>
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001454:	79ba      	ldrb	r2, [r7, #6]
 8001456:	793b      	ldrb	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d201      	bcs.n	8001460 <ssd1306_Line+0x58>
 800145c:	2301      	movs	r3, #1
 800145e:	e001      	b.n	8001464 <ssd1306_Line+0x5c>
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800146e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001472:	7939      	ldrb	r1, [r7, #4]
 8001474:	797b      	ldrb	r3, [r7, #5]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fea2 	bl	80011c0 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800147c:	e024      	b.n	80014c8 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800147e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001482:	79b9      	ldrb	r1, [r7, #6]
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe9a 	bl	80011c0 <ssd1306_DrawPixel>
        error2 = error * 2;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	425b      	negs	r3, r3
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	429a      	cmp	r2, r3
 800149a:	dd08      	ble.n	80014ae <ssd1306_Line+0xa6>
            error -= deltaY;
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4413      	add	r3, r2
 80014ac:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	da08      	bge.n	80014c8 <ssd1306_Line+0xc0>
            error += deltaX;
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	4413      	add	r3, r2
 80014bc:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	4413      	add	r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d1d6      	bne.n	800147e <ssd1306_Line+0x76>
 80014d0:	79ba      	ldrb	r2, [r7, #6]
 80014d2:	793b      	ldrb	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1d2      	bne.n	800147e <ssd1306_Line+0x76>
        }
    }
    return;
 80014d8:	bf00      	nop
}
 80014da:	3724      	adds	r7, #36	@ 0x24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd90      	pop	{r4, r7, pc}

080014e0 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	4604      	mov	r4, r0
 80014e8:	4608      	mov	r0, r1
 80014ea:	4611      	mov	r1, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4623      	mov	r3, r4
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	4603      	mov	r3, r0
 80014f4:	71bb      	strb	r3, [r7, #6]
 80014f6:	460b      	mov	r3, r1
 80014f8:	717b      	strb	r3, [r7, #5]
 80014fa:	4613      	mov	r3, r2
 80014fc:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80014fe:	79bc      	ldrb	r4, [r7, #6]
 8001500:	797a      	ldrb	r2, [r7, #5]
 8001502:	79b9      	ldrb	r1, [r7, #6]
 8001504:	79f8      	ldrb	r0, [r7, #7]
 8001506:	7e3b      	ldrb	r3, [r7, #24]
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4623      	mov	r3, r4
 800150c:	f7ff ff7c 	bl	8001408 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8001510:	793c      	ldrb	r4, [r7, #4]
 8001512:	797a      	ldrb	r2, [r7, #5]
 8001514:	79b9      	ldrb	r1, [r7, #6]
 8001516:	7978      	ldrb	r0, [r7, #5]
 8001518:	7e3b      	ldrb	r3, [r7, #24]
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	4623      	mov	r3, r4
 800151e:	f7ff ff73 	bl	8001408 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001522:	793c      	ldrb	r4, [r7, #4]
 8001524:	79fa      	ldrb	r2, [r7, #7]
 8001526:	7939      	ldrb	r1, [r7, #4]
 8001528:	7978      	ldrb	r0, [r7, #5]
 800152a:	7e3b      	ldrb	r3, [r7, #24]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	4623      	mov	r3, r4
 8001530:	f7ff ff6a 	bl	8001408 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001534:	79bc      	ldrb	r4, [r7, #6]
 8001536:	79fa      	ldrb	r2, [r7, #7]
 8001538:	7939      	ldrb	r1, [r7, #4]
 800153a:	79f8      	ldrb	r0, [r7, #7]
 800153c:	7e3b      	ldrb	r3, [r7, #24]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4623      	mov	r3, r4
 8001542:	f7ff ff61 	bl	8001408 <ssd1306_Line>

    return;
 8001546:	bf00      	nop
}
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}

0800154e <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001558:	2381      	movs	r3, #129	@ 0x81
 800155a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fd52 	bl	8001008 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fd4e 	bl	8001008 <ssd1306_WriteCommand>
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d005      	beq.n	8001590 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001584:	23af      	movs	r3, #175	@ 0xaf
 8001586:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <ssd1306_SetDisplayOn+0x38>)
 800158a:	2201      	movs	r2, #1
 800158c:	715a      	strb	r2, [r3, #5]
 800158e:	e004      	b.n	800159a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001590:	23ae      	movs	r3, #174	@ 0xae
 8001592:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001594:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <ssd1306_SetDisplayOn+0x38>)
 8001596:	2200      	movs	r2, #0
 8001598:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fd33 	bl	8001008 <ssd1306_WriteCommand>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000a38 	.word	0x20000a38

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	4a0f      	ldr	r2, [pc, #60]	@ (80015fc <HAL_MspInit+0x4c>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <HAL_MspInit+0x4c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2f      	ldr	r2, [pc, #188]	@ (80016dc <HAL_ADC_MspInit+0xdc>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d157      	bne.n	80016d2 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b2e      	ldr	r3, [pc, #184]	@ (80016e0 <HAL_ADC_MspInit+0xe0>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a2d      	ldr	r2, [pc, #180]	@ (80016e0 <HAL_ADC_MspInit+0xe0>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b2b      	ldr	r3, [pc, #172]	@ (80016e0 <HAL_ADC_MspInit+0xe0>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b27      	ldr	r3, [pc, #156]	@ (80016e0 <HAL_ADC_MspInit+0xe0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a26      	ldr	r2, [pc, #152]	@ (80016e0 <HAL_ADC_MspInit+0xe0>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <HAL_ADC_MspInit+0xe0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 800165a:	2383      	movs	r3, #131	@ 0x83
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165e:	2303      	movs	r3, #3
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	481d      	ldr	r0, [pc, #116]	@ (80016e4 <HAL_ADC_MspInit+0xe4>)
 800166e:	f001 fbcf 	bl	8002e10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 8001674:	4a1d      	ldr	r2, [pc, #116]	@ (80016ec <HAL_ADC_MspInit+0xec>)
 8001676:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001678:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800167e:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001684:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 800168c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001690:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 8001694:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001698:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 800169c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 80016a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016b6:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 80016b8:	f001 f83a 	bl	8002730 <HAL_DMA_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80016c2:	f7ff fc93 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 80016ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80016cc:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <HAL_ADC_MspInit+0xe8>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	@ 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40012000 	.word	0x40012000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	200001b4 	.word	0x200001b4
 80016ec:	40026410 	.word	0x40026410

080016f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	@ 0x30
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a32      	ldr	r2, [pc, #200]	@ (80017d8 <HAL_I2C_MspInit+0xe8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d12c      	bne.n	800176c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a30      	ldr	r2, [pc, #192]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b2e      	ldr	r3, [pc, #184]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800172e:	23c0      	movs	r3, #192	@ 0xc0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001732:	2312      	movs	r3, #18
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800173e:	2304      	movs	r3, #4
 8001740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4825      	ldr	r0, [pc, #148]	@ (80017e0 <HAL_I2C_MspInit+0xf0>)
 800174a:	f001 fb61 	bl	8002e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 8001758:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800175c:	6413      	str	r3, [r2, #64]	@ 0x40
 800175e:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800176a:	e031      	b.n	80017d0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <HAL_I2C_MspInit+0xf4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12c      	bne.n	80017d0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a17      	ldr	r2, [pc, #92]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001792:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001798:	2312      	movs	r3, #18
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017a4:	2304      	movs	r3, #4
 80017a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <HAL_I2C_MspInit+0xf0>)
 80017b0:	f001 fb2e 	bl	8002e10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 80017be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c4:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_I2C_MspInit+0xec>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3730      	adds	r7, #48	@ 0x30
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40005800 	.word	0x40005800

080017e8 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	@ 0x38
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6b      	ldr	r2, [pc, #428]	@ (80019c0 <HAL_I2S_MspInit+0x1d8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	f040 80cf 	bne.w	80019b8 <HAL_I2S_MspInit+0x1d0>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800181a:	2301      	movs	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800181e:	2332      	movs	r3, #50	@ 0x32
 8001820:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001826:	f107 0314 	add.w	r3, r7, #20
 800182a:	4618      	mov	r0, r3
 800182c:	f005 fa6e 	bl	8006d0c <HAL_RCCEx_PeriphCLKConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001836:	f7ff fbd9 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b61      	ldr	r3, [pc, #388]	@ (80019c4 <HAL_I2S_MspInit+0x1dc>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	4a60      	ldr	r2, [pc, #384]	@ (80019c4 <HAL_I2S_MspInit+0x1dc>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001848:	6413      	str	r3, [r2, #64]	@ 0x40
 800184a:	4b5e      	ldr	r3, [pc, #376]	@ (80019c4 <HAL_I2S_MspInit+0x1dc>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b5a      	ldr	r3, [pc, #360]	@ (80019c4 <HAL_I2S_MspInit+0x1dc>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	4a59      	ldr	r2, [pc, #356]	@ (80019c4 <HAL_I2S_MspInit+0x1dc>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	@ 0x30
 8001866:	4b57      	ldr	r3, [pc, #348]	@ (80019c4 <HAL_I2S_MspInit+0x1dc>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4b53      	ldr	r3, [pc, #332]	@ (80019c4 <HAL_I2S_MspInit+0x1dc>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a52      	ldr	r2, [pc, #328]	@ (80019c4 <HAL_I2S_MspInit+0x1dc>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b50      	ldr	r3, [pc, #320]	@ (80019c4 <HAL_I2S_MspInit+0x1dc>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800188e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018a0:	2305      	movs	r3, #5
 80018a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a8:	4619      	mov	r1, r3
 80018aa:	4847      	ldr	r0, [pc, #284]	@ (80019c8 <HAL_I2S_MspInit+0x1e0>)
 80018ac:	f001 fab0 	bl	8002e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80018c2:	2306      	movs	r3, #6
 80018c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	483e      	ldr	r0, [pc, #248]	@ (80019c8 <HAL_I2S_MspInit+0x1e0>)
 80018ce:	f001 fa9f 	bl	8002e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018d2:	2340      	movs	r3, #64	@ 0x40
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e2:	2305      	movs	r3, #5
 80018e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	4837      	ldr	r0, [pc, #220]	@ (80019cc <HAL_I2S_MspInit+0x1e4>)
 80018ee:	f001 fa8f 	bl	8002e10 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80018f2:	4b37      	ldr	r3, [pc, #220]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 80018f4:	4a37      	ldr	r2, [pc, #220]	@ (80019d4 <HAL_I2S_MspInit+0x1ec>)
 80018f6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80018f8:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018fe:	4b34      	ldr	r3, [pc, #208]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 8001900:	2240      	movs	r2, #64	@ 0x40
 8001902:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001904:	4b32      	ldr	r3, [pc, #200]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800190a:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 800190c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001910:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001912:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 8001914:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001918:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800191a:	4b2d      	ldr	r3, [pc, #180]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 800191c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001920:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001922:	4b2b      	ldr	r3, [pc, #172]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 8001924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001928:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 800192c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001930:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001932:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001938:	4825      	ldr	r0, [pc, #148]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 800193a:	f000 fef9 	bl	8002730 <HAL_DMA_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2S_MspInit+0x160>
    {
      Error_Handler();
 8001944:	f7ff fb52 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a21      	ldr	r2, [pc, #132]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 800194c:	639a      	str	r2, [r3, #56]	@ 0x38
 800194e:	4a20      	ldr	r2, [pc, #128]	@ (80019d0 <HAL_I2S_MspInit+0x1e8>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001954:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 8001956:	4a21      	ldr	r2, [pc, #132]	@ (80019dc <HAL_I2S_MspInit+0x1f4>)
 8001958:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800195a:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 800195c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001960:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001962:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001968:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 8001970:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001974:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001976:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 8001978:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800197c:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 8001980:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001984:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001986:	4b14      	ldr	r3, [pc, #80]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 8001988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198c:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800198e:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 8001990:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001994:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800199c:	480e      	ldr	r0, [pc, #56]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 800199e:	f000 fec7 	bl	8002730 <HAL_DMA_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 80019a8:	f7ff fb20 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 80019b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019b2:	4a09      	ldr	r2, [pc, #36]	@ (80019d8 <HAL_I2S_MspInit+0x1f0>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80019b8:	bf00      	nop
 80019ba:	3738      	adds	r7, #56	@ 0x38
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40003800 	.word	0x40003800
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	20000304 	.word	0x20000304
 80019d4:	40026070 	.word	0x40026070
 80019d8:	20000364 	.word	0x20000364
 80019dc:	40026058 	.word	0x40026058

080019e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f0:	d10d      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_TIM_Base_MspInit+0x3c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	4a08      	ldr	r2, [pc, #32]	@ (8001a1c <HAL_TIM_Base_MspInit+0x3c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_TIM_Base_MspInit+0x3c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <NMI_Handler+0x4>

08001a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a76:	f000 f8ef 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <DMA1_Stream3_IRQHandler+0x10>)
 8001a86:	f000 ff59 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000364 	.word	0x20000364

08001a94 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a98:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <DMA1_Stream4_IRQHandler+0x10>)
 8001a9a:	f000 ff4f 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000304 	.word	0x20000304

08001aa8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <DMA2_Stream0_IRQHandler+0x10>)
 8001aae:	f000 ff45 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200001b4 	.word	0x200001b4

08001abc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <OTG_FS_IRQHandler+0x10>)
 8001ac2:	f003 fb93 	bl	80051ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20001f28 	.word	0x20001f28

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f00a f868 	bl	800bbd4 <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20020000 	.word	0x20020000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	20000a40 	.word	0x20000a40
 8001b38:	20002778 	.word	0x20002778

08001b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b64:	f7ff ffea 	bl	8001b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b68:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6a:	490d      	ldr	r1, [pc, #52]	@ (8001ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b80:	4c0a      	ldr	r4, [pc, #40]	@ (8001bac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f00a f827 	bl	800bbe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b92:	f7fe ff01 	bl	8000998 <main>
  bx  lr    
 8001b96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001ba4:	0800d314 	.word	0x0800d314
  ldr r2, =_sbss
 8001ba8:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001bac:	20002774 	.word	0x20002774

08001bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <HAL_Init+0x40>)
 8001bbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <HAL_Init+0x40>)
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	@ (8001bf4 <HAL_Init+0x40>)
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 fd65 	bl	80026ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be2:	200f      	movs	r0, #15
 8001be4:	f000 f808 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be8:	f7ff fce2 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_InitTick+0x54>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_InitTick+0x58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fd7d 	bl	8002716 <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f000 fd45 	bl	80026c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	@ (8001c54 <HAL_InitTick+0x5c>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	2000000c 	.word	0x2000000c
 8001c54:	20000008 	.word	0x20000008

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2000000c 	.word	0x2000000c
 8001c7c:	20000a44 	.word	0x20000a44

08001c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000a44 	.word	0x20000a44

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000000c 	.word	0x2000000c

08001ce0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e033      	b.n	8001d5e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fc7e 	bl	8001600 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d118      	bne.n	8001d50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d26:	f023 0302 	bic.w	r3, r3, #2
 8001d2a:	f043 0202 	orr.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fa6c 	bl	8002210 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f023 0303 	bic.w	r3, r3, #3
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d4e:	e001      	b.n	8001d54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Start_DMA+0x22>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e0eb      	b.n	8001f62 <HAL_ADC_Start_DMA+0x1fa>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d018      	beq.n	8001dd2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001db0:	4b6e      	ldr	r3, [pc, #440]	@ (8001f6c <HAL_ADC_Start_DMA+0x204>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6e      	ldr	r2, [pc, #440]	@ (8001f70 <HAL_ADC_Start_DMA+0x208>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0c9a      	lsrs	r2, r3, #18
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001dc4:	e002      	b.n	8001dcc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f9      	bne.n	8001dc6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001de0:	d107      	bne.n	8001df2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001df0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	f040 80a3 	bne.w	8001f48 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e2c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e40:	d106      	bne.n	8001e50 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f023 0206 	bic.w	r2, r3, #6
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e4e:	e002      	b.n	8001e56 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e5e:	4b45      	ldr	r3, [pc, #276]	@ (8001f74 <HAL_ADC_Start_DMA+0x20c>)
 8001e60:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e66:	4a44      	ldr	r2, [pc, #272]	@ (8001f78 <HAL_ADC_Start_DMA+0x210>)
 8001e68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6e:	4a43      	ldr	r2, [pc, #268]	@ (8001f7c <HAL_ADC_Start_DMA+0x214>)
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e76:	4a42      	ldr	r2, [pc, #264]	@ (8001f80 <HAL_ADC_Start_DMA+0x218>)
 8001e78:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001e92:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ea2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	334c      	adds	r3, #76	@ 0x4c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f000 fcea 	bl	800288c <HAL_DMA_Start_IT>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d12a      	bne.n	8001f1e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8001f84 <HAL_ADC_Start_DMA+0x21c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d015      	beq.n	8001efe <HAL_ADC_Start_DMA+0x196>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8001f88 <HAL_ADC_Start_DMA+0x220>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x180>
 8001edc:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <HAL_ADC_Start_DMA+0x20c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a27      	ldr	r2, [pc, #156]	@ (8001f8c <HAL_ADC_Start_DMA+0x224>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d136      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f8>
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <HAL_ADC_Start_DMA+0x20c>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d130      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d129      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	e020      	b.n	8001f60 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a18      	ldr	r2, [pc, #96]	@ (8001f84 <HAL_ADC_Start_DMA+0x21c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d11b      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f8>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d114      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	e00b      	b.n	8001f60 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f043 0210 	orr.w	r2, r3, #16
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	40012300 	.word	0x40012300
 8001f78:	08002409 	.word	0x08002409
 8001f7c:	080024c3 	.word	0x080024c3
 8001f80:	080024df 	.word	0x080024df
 8001f84:	40012000 	.word	0x40012000
 8001f88:	40012100 	.word	0x40012100
 8001f8c:	40012200 	.word	0x40012200

08001f90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1c>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e105      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x228>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	d925      	bls.n	8002044 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	3b1e      	subs	r3, #30
 800200e:	2207      	movs	r2, #7
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43da      	mvns	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	400a      	ands	r2, r1
 800201c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68d9      	ldr	r1, [r3, #12]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	4603      	mov	r3, r0
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4403      	add	r3, r0
 8002036:	3b1e      	subs	r3, #30
 8002038:	409a      	lsls	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	e022      	b.n	800208a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6919      	ldr	r1, [r3, #16]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	2207      	movs	r2, #7
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	400a      	ands	r2, r1
 8002066:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	4603      	mov	r3, r0
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4403      	add	r3, r0
 8002080:	409a      	lsls	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b06      	cmp	r3, #6
 8002090:	d824      	bhi.n	80020dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b05      	subs	r3, #5
 80020a4:	221f      	movs	r2, #31
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	3b05      	subs	r3, #5
 80020ce:	fa00 f203 	lsl.w	r2, r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80020da:	e04c      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d824      	bhi.n	800212e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b23      	subs	r3, #35	@ 0x23
 80020f6:	221f      	movs	r2, #31
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43da      	mvns	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	400a      	ands	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	3b23      	subs	r3, #35	@ 0x23
 8002120:	fa00 f203 	lsl.w	r2, r0, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
 800212c:	e023      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b41      	subs	r3, #65	@ 0x41
 8002140:	221f      	movs	r2, #31
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	400a      	ands	r2, r1
 800214e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3b41      	subs	r3, #65	@ 0x41
 800216a:	fa00 f203 	lsl.w	r2, r0, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_ADC_ConfigChannel+0x234>)
 8002178:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <HAL_ADC_ConfigChannel+0x238>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d109      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1cc>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b12      	cmp	r3, #18
 800218a:	d105      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <HAL_ADC_ConfigChannel+0x238>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d123      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x21e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d003      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x1e6>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b11      	cmp	r3, #17
 80021b0:	d11b      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d111      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_ADC_ConfigChannel+0x23c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a10      	ldr	r2, [pc, #64]	@ (800220c <HAL_ADC_ConfigChannel+0x240>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	0c9a      	lsrs	r2, r3, #18
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021dc:	e002      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f9      	bne.n	80021de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40012300 	.word	0x40012300
 8002204:	40012000 	.word	0x40012000
 8002208:	20000004 	.word	0x20000004
 800220c:	431bde83 	.word	0x431bde83

08002210 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002218:	4b79      	ldr	r3, [pc, #484]	@ (8002400 <ADC_Init+0x1f0>)
 800221a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	021a      	lsls	r2, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800228a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6899      	ldr	r1, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	4a58      	ldr	r2, [pc, #352]	@ (8002404 <ADC_Init+0x1f4>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d022      	beq.n	80022ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	e00f      	b.n	800230e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800230c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0202 	bic.w	r2, r2, #2
 800231c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6899      	ldr	r1, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7e1b      	ldrb	r3, [r3, #24]
 8002328:	005a      	lsls	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01b      	beq.n	8002374 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800234a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800235a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	3b01      	subs	r3, #1
 8002368:	035a      	lsls	r2, r3, #13
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	e007      	b.n	8002384 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002382:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002392:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	3b01      	subs	r3, #1
 80023a0:	051a      	lsls	r2, r3, #20
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023c6:	025a      	lsls	r2, r3, #9
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	029a      	lsls	r2, r3, #10
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	40012300 	.word	0x40012300
 8002404:	0f000001 	.word	0x0f000001

08002408 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002414:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800241e:	2b00      	cmp	r3, #0
 8002420:	d13c      	bne.n	800249c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d12b      	bne.n	8002494 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002440:	2b00      	cmp	r3, #0
 8002442:	d127      	bne.n	8002494 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800245c:	2b00      	cmp	r3, #0
 800245e:	d119      	bne.n	8002494 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0220 	bic.w	r2, r2, #32
 800246e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f7ff fd7b 	bl	8001f90 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800249a:	e00e      	b.n	80024ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff fd85 	bl	8001fb8 <HAL_ADC_ErrorCallback>
}
 80024ae:	e004      	b.n	80024ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff fd67 	bl	8001fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2240      	movs	r2, #64	@ 0x40
 80024f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	f043 0204 	orr.w	r2, r3, #4
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7ff fd5a 	bl	8001fb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db0b      	blt.n	800259a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4907      	ldr	r1, [pc, #28]	@ (80025a8 <__NVIC_EnableIRQ+0x38>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2001      	movs	r0, #1
 8002592:	fa00 f202 	lsl.w	r2, r0, r2
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e100 	.word	0xe000e100

080025ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	6039      	str	r1, [r7, #0]
 80025b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	db0a      	blt.n	80025d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	490c      	ldr	r1, [pc, #48]	@ (80025f8 <__NVIC_SetPriority+0x4c>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	440b      	add	r3, r1
 80025d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d4:	e00a      	b.n	80025ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	4908      	ldr	r1, [pc, #32]	@ (80025fc <__NVIC_SetPriority+0x50>)
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	3b04      	subs	r3, #4
 80025e4:	0112      	lsls	r2, r2, #4
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	440b      	add	r3, r1
 80025ea:	761a      	strb	r2, [r3, #24]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000e100 	.word	0xe000e100
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	@ 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f1c3 0307 	rsb	r3, r3, #7
 800261a:	2b04      	cmp	r3, #4
 800261c:	bf28      	it	cs
 800261e:	2304      	movcs	r3, #4
 8002620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3304      	adds	r3, #4
 8002626:	2b06      	cmp	r3, #6
 8002628:	d902      	bls.n	8002630 <NVIC_EncodePriority+0x30>
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3b03      	subs	r3, #3
 800262e:	e000      	b.n	8002632 <NVIC_EncodePriority+0x32>
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002634:	f04f 32ff 	mov.w	r2, #4294967295
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	401a      	ands	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002648:	f04f 31ff 	mov.w	r1, #4294967295
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43d9      	mvns	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	4313      	orrs	r3, r2
         );
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	@ 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002678:	d301      	bcc.n	800267e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267a:	2301      	movs	r3, #1
 800267c:	e00f      	b.n	800269e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267e:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <SysTick_Config+0x40>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002686:	210f      	movs	r1, #15
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	f7ff ff8e 	bl	80025ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <SysTick_Config+0x40>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002696:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <SysTick_Config+0x40>)
 8002698:	2207      	movs	r2, #7
 800269a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	e000e010 	.word	0xe000e010

080026ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff29 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d4:	f7ff ff3e 	bl	8002554 <__NVIC_GetPriorityGrouping>
 80026d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ff8e 	bl	8002600 <NVIC_EncodePriority>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff5d 	bl	80025ac <__NVIC_SetPriority>
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff31 	bl	8002570 <__NVIC_EnableIRQ>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ffa2 	bl	8002668 <SysTick_Config>
 8002724:	4603      	mov	r3, r0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff faa0 	bl	8001c80 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e099      	b.n	8002880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276c:	e00f      	b.n	800278e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276e:	f7ff fa87 	bl	8001c80 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b05      	cmp	r3, #5
 800277a:	d908      	bls.n	800278e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2203      	movs	r2, #3
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e078      	b.n	8002880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e8      	bne.n	800276e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4b38      	ldr	r3, [pc, #224]	@ (8002888 <HAL_DMA_Init+0x158>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d107      	bne.n	80027f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	4313      	orrs	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f023 0307 	bic.w	r3, r3, #7
 800280e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	2b04      	cmp	r3, #4
 8002820:	d117      	bne.n	8002852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	4313      	orrs	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00e      	beq.n	8002852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 fa6f 	bl	8002d18 <DMA_CheckFifoParam>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2240      	movs	r2, #64	@ 0x40
 8002844:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800284e:	2301      	movs	r3, #1
 8002850:	e016      	b.n	8002880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fa26 	bl	8002cac <DMA_CalcBaseAndBitshift>
 8002860:	4603      	mov	r3, r0
 8002862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	223f      	movs	r2, #63	@ 0x3f
 800286a:	409a      	lsls	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	f010803f 	.word	0xf010803f

0800288c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_DMA_Start_IT+0x26>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e040      	b.n	8002934 <HAL_DMA_Start_IT+0xa8>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d12f      	bne.n	8002926 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f9b8 	bl	8002c50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e4:	223f      	movs	r2, #63	@ 0x3f
 80028e6:	409a      	lsls	r2, r3
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0216 	orr.w	r2, r2, #22
 80028fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0208 	orr.w	r2, r2, #8
 8002912:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e005      	b.n	8002932 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002948:	4b8e      	ldr	r3, [pc, #568]	@ (8002b84 <HAL_DMA_IRQHandler+0x248>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a8e      	ldr	r2, [pc, #568]	@ (8002b88 <HAL_DMA_IRQHandler+0x24c>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a9b      	lsrs	r3, r3, #10
 8002954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002966:	2208      	movs	r2, #8
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0204 	bic.w	r2, r2, #4
 800298e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002994:	2208      	movs	r2, #8
 8002996:	409a      	lsls	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	2201      	movs	r2, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e2:	2204      	movs	r2, #4
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	2204      	movs	r2, #4
 8002a02:	409a      	lsls	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0c:	f043 0204 	orr.w	r2, r3, #4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a18:	2210      	movs	r2, #16
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d043      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d03c      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a36:	2210      	movs	r2, #16
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d024      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
 8002a6a:	e01f      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01b      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
 8002a7c:	e016      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0208 	bic.w	r2, r2, #8
 8002a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 808f 	beq.w	8002bdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8087 	beq.w	8002bdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d136      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0216 	bic.w	r2, r2, #22
 8002af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x1da>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0208 	bic.w	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2a:	223f      	movs	r2, #63	@ 0x3f
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d07e      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
        }
        return;
 8002b52:	e079      	b.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01d      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10d      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d031      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
 8002b80:	e02c      	b.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
 8002b82:	bf00      	nop
 8002b84:	20000004 	.word	0x20000004
 8002b88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d023      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
 8002b9c:	e01e      	b.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10f      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0210 	bic.w	r2, r2, #16
 8002bba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d032      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d022      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2205      	movs	r2, #5
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d307      	bcc.n	8002c24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f2      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x2cc>
 8002c22:	e000      	b.n	8002c26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
 8002c46:	e000      	b.n	8002c4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c48:	bf00      	nop
    }
  }
}
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b40      	cmp	r3, #64	@ 0x40
 8002c7c:	d108      	bne.n	8002c90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c8e:	e007      	b.n	8002ca0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	3b10      	subs	r3, #16
 8002cbc:	4a14      	ldr	r2, [pc, #80]	@ (8002d10 <DMA_CalcBaseAndBitshift+0x64>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cc6:	4a13      	ldr	r2, [pc, #76]	@ (8002d14 <DMA_CalcBaseAndBitshift+0x68>)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4413      	add	r3, r2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d909      	bls.n	8002cee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ce2:	f023 0303 	bic.w	r3, r3, #3
 8002ce6:	1d1a      	adds	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cec:	e007      	b.n	8002cfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	aaaaaaab 	.word	0xaaaaaaab
 8002d14:	0800d2c8 	.word	0x0800d2c8

08002d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d11f      	bne.n	8002d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d856      	bhi.n	8002de6 <DMA_CheckFifoParam+0xce>
 8002d38:	a201      	add	r2, pc, #4	@ (adr r2, 8002d40 <DMA_CheckFifoParam+0x28>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d63 	.word	0x08002d63
 8002d48:	08002d51 	.word	0x08002d51
 8002d4c:	08002de7 	.word	0x08002de7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d046      	beq.n	8002dea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d60:	e043      	b.n	8002dea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d6a:	d140      	bne.n	8002dee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d70:	e03d      	b.n	8002dee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d7a:	d121      	bne.n	8002dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d837      	bhi.n	8002df2 <DMA_CheckFifoParam+0xda>
 8002d82:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <DMA_CheckFifoParam+0x70>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002d9f 	.word	0x08002d9f
 8002d90:	08002d99 	.word	0x08002d99
 8002d94:	08002db1 	.word	0x08002db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9c:	e030      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d025      	beq.n	8002df6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dae:	e022      	b.n	8002df6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002db8:	d11f      	bne.n	8002dfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dbe:	e01c      	b.n	8002dfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d903      	bls.n	8002dce <DMA_CheckFifoParam+0xb6>
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d003      	beq.n	8002dd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dcc:	e018      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd2:	e015      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
      break;
 8002de4:	e00b      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      break;
 8002de6:	bf00      	nop
 8002de8:	e00a      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002dea:	bf00      	nop
 8002dec:	e008      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002dee:	bf00      	nop
 8002df0:	e006      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002df2:	bf00      	nop
 8002df4:	e004      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002df6:	bf00      	nop
 8002df8:	e002      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002dfa:	bf00      	nop
 8002dfc:	e000      	b.n	8002e00 <DMA_CheckFifoParam+0xe8>
      break;
 8002dfe:	bf00      	nop
    }
  } 
  
  return status; 
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	@ 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	e16b      	b.n	8003104 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	f040 815a 	bne.w	80030fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d005      	beq.n	8002e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d130      	bne.n	8002ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e98:	2201      	movs	r2, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 0201 	and.w	r2, r3, #1
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d017      	beq.n	8002f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d123      	bne.n	8002f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	220f      	movs	r2, #15
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0203 	and.w	r2, r3, #3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80b4 	beq.w	80030fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b60      	ldr	r3, [pc, #384]	@ (800311c <HAL_GPIO_Init+0x30c>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	4a5f      	ldr	r2, [pc, #380]	@ (800311c <HAL_GPIO_Init+0x30c>)
 8002fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800311c <HAL_GPIO_Init+0x30c>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003120 <HAL_GPIO_Init+0x310>)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	220f      	movs	r2, #15
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a52      	ldr	r2, [pc, #328]	@ (8003124 <HAL_GPIO_Init+0x314>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02b      	beq.n	8003036 <HAL_GPIO_Init+0x226>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a51      	ldr	r2, [pc, #324]	@ (8003128 <HAL_GPIO_Init+0x318>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d025      	beq.n	8003032 <HAL_GPIO_Init+0x222>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a50      	ldr	r2, [pc, #320]	@ (800312c <HAL_GPIO_Init+0x31c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01f      	beq.n	800302e <HAL_GPIO_Init+0x21e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a4f      	ldr	r2, [pc, #316]	@ (8003130 <HAL_GPIO_Init+0x320>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d019      	beq.n	800302a <HAL_GPIO_Init+0x21a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4e      	ldr	r2, [pc, #312]	@ (8003134 <HAL_GPIO_Init+0x324>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_GPIO_Init+0x216>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4d      	ldr	r2, [pc, #308]	@ (8003138 <HAL_GPIO_Init+0x328>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00d      	beq.n	8003022 <HAL_GPIO_Init+0x212>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4c      	ldr	r2, [pc, #304]	@ (800313c <HAL_GPIO_Init+0x32c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <HAL_GPIO_Init+0x20e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4b      	ldr	r2, [pc, #300]	@ (8003140 <HAL_GPIO_Init+0x330>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d101      	bne.n	800301a <HAL_GPIO_Init+0x20a>
 8003016:	2307      	movs	r3, #7
 8003018:	e00e      	b.n	8003038 <HAL_GPIO_Init+0x228>
 800301a:	2308      	movs	r3, #8
 800301c:	e00c      	b.n	8003038 <HAL_GPIO_Init+0x228>
 800301e:	2306      	movs	r3, #6
 8003020:	e00a      	b.n	8003038 <HAL_GPIO_Init+0x228>
 8003022:	2305      	movs	r3, #5
 8003024:	e008      	b.n	8003038 <HAL_GPIO_Init+0x228>
 8003026:	2304      	movs	r3, #4
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x228>
 800302a:	2303      	movs	r3, #3
 800302c:	e004      	b.n	8003038 <HAL_GPIO_Init+0x228>
 800302e:	2302      	movs	r3, #2
 8003030:	e002      	b.n	8003038 <HAL_GPIO_Init+0x228>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x228>
 8003036:	2300      	movs	r3, #0
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f002 0203 	and.w	r2, r2, #3
 800303e:	0092      	lsls	r2, r2, #2
 8003040:	4093      	lsls	r3, r2
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003048:	4935      	ldr	r1, [pc, #212]	@ (8003120 <HAL_GPIO_Init+0x310>)
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	3302      	adds	r3, #2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003056:	4b3b      	ldr	r3, [pc, #236]	@ (8003144 <HAL_GPIO_Init+0x334>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800307a:	4a32      	ldr	r2, [pc, #200]	@ (8003144 <HAL_GPIO_Init+0x334>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003080:	4b30      	ldr	r3, [pc, #192]	@ (8003144 <HAL_GPIO_Init+0x334>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a4:	4a27      	ldr	r2, [pc, #156]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030aa:	4b26      	ldr	r3, [pc, #152]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f8:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <HAL_GPIO_Init+0x334>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	f67f ae90 	bls.w	8002e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3724      	adds	r7, #36	@ 0x24
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	40013800 	.word	0x40013800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40020800 	.word	0x40020800
 8003130:	40020c00 	.word	0x40020c00
 8003134:	40021000 	.word	0x40021000
 8003138:	40021400 	.word	0x40021400
 800313c:	40021800 	.word	0x40021800
 8003140:	40021c00 	.word	0x40021c00
 8003144:	40013c00 	.word	0x40013c00

08003148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
 8003154:	4613      	mov	r3, r2
 8003156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003164:	e003      	b.n	800316e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	619a      	str	r2, [r3, #24]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800318c:	887a      	ldrh	r2, [r7, #2]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4013      	ands	r3, r2
 8003192:	041a      	lsls	r2, r3, #16
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	43d9      	mvns	r1, r3
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	400b      	ands	r3, r1
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	619a      	str	r2, [r3, #24]
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e12b      	b.n	800341a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fe fa8a 	bl	80016f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	@ 0x24
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003214:	f003 fd66 	bl	8006ce4 <HAL_RCC_GetPCLK1Freq>
 8003218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4a81      	ldr	r2, [pc, #516]	@ (8003424 <HAL_I2C_Init+0x274>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d807      	bhi.n	8003234 <HAL_I2C_Init+0x84>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a80      	ldr	r2, [pc, #512]	@ (8003428 <HAL_I2C_Init+0x278>)
 8003228:	4293      	cmp	r3, r2
 800322a:	bf94      	ite	ls
 800322c:	2301      	movls	r3, #1
 800322e:	2300      	movhi	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e006      	b.n	8003242 <HAL_I2C_Init+0x92>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a7d      	ldr	r2, [pc, #500]	@ (800342c <HAL_I2C_Init+0x27c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	bf94      	ite	ls
 800323c:	2301      	movls	r3, #1
 800323e:	2300      	movhi	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0e7      	b.n	800341a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a78      	ldr	r2, [pc, #480]	@ (8003430 <HAL_I2C_Init+0x280>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0c9b      	lsrs	r3, r3, #18
 8003254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a6a      	ldr	r2, [pc, #424]	@ (8003424 <HAL_I2C_Init+0x274>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d802      	bhi.n	8003284 <HAL_I2C_Init+0xd4>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	3301      	adds	r3, #1
 8003282:	e009      	b.n	8003298 <HAL_I2C_Init+0xe8>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	4a69      	ldr	r2, [pc, #420]	@ (8003434 <HAL_I2C_Init+0x284>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	3301      	adds	r3, #1
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	430b      	orrs	r3, r1
 800329e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	495c      	ldr	r1, [pc, #368]	@ (8003424 <HAL_I2C_Init+0x274>)
 80032b4:	428b      	cmp	r3, r1
 80032b6:	d819      	bhi.n	80032ec <HAL_I2C_Init+0x13c>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e59      	subs	r1, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c6:	1c59      	adds	r1, r3, #1
 80032c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032cc:	400b      	ands	r3, r1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_I2C_Init+0x138>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1e59      	subs	r1, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e6:	e051      	b.n	800338c <HAL_I2C_Init+0x1dc>
 80032e8:	2304      	movs	r3, #4
 80032ea:	e04f      	b.n	800338c <HAL_I2C_Init+0x1dc>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d111      	bne.n	8003318 <HAL_I2C_Init+0x168>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e58      	subs	r0, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	440b      	add	r3, r1
 8003302:	fbb0 f3f3 	udiv	r3, r0, r3
 8003306:	3301      	adds	r3, #1
 8003308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e012      	b.n	800333e <HAL_I2C_Init+0x18e>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1e58      	subs	r0, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	0099      	lsls	r1, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Init+0x196>
 8003342:	2301      	movs	r3, #1
 8003344:	e022      	b.n	800338c <HAL_I2C_Init+0x1dc>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10e      	bne.n	800336c <HAL_I2C_Init+0x1bc>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1e58      	subs	r0, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	440b      	add	r3, r1
 800335c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800336a:	e00f      	b.n	800338c <HAL_I2C_Init+0x1dc>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e58      	subs	r0, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	0099      	lsls	r1, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	6809      	ldr	r1, [r1, #0]
 8003390:	4313      	orrs	r3, r2
 8003392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6911      	ldr	r1, [r2, #16]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68d2      	ldr	r2, [r2, #12]
 80033c6:	4311      	orrs	r1, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	000186a0 	.word	0x000186a0
 8003428:	001e847f 	.word	0x001e847f
 800342c:	003d08ff 	.word	0x003d08ff
 8003430:	431bde83 	.word	0x431bde83
 8003434:	10624dd3 	.word	0x10624dd3

08003438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	4608      	mov	r0, r1
 8003442:	4611      	mov	r1, r2
 8003444:	461a      	mov	r2, r3
 8003446:	4603      	mov	r3, r0
 8003448:	817b      	strh	r3, [r7, #10]
 800344a:	460b      	mov	r3, r1
 800344c:	813b      	strh	r3, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003452:	f7fe fc15 	bl	8001c80 <HAL_GetTick>
 8003456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b20      	cmp	r3, #32
 8003462:	f040 80d9 	bne.w	8003618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2319      	movs	r3, #25
 800346c:	2201      	movs	r2, #1
 800346e:	496d      	ldr	r1, [pc, #436]	@ (8003624 <HAL_I2C_Mem_Write+0x1ec>)
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fc8b 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
 800347e:	e0cc      	b.n	800361a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_I2C_Mem_Write+0x56>
 800348a:	2302      	movs	r3, #2
 800348c:	e0c5      	b.n	800361a <HAL_I2C_Mem_Write+0x1e2>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d007      	beq.n	80034b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2221      	movs	r2, #33	@ 0x21
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2240      	movs	r2, #64	@ 0x40
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80034e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003628 <HAL_I2C_Mem_Write+0x1f0>)
 80034f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034f6:	88f8      	ldrh	r0, [r7, #6]
 80034f8:	893a      	ldrh	r2, [r7, #8]
 80034fa:	8979      	ldrh	r1, [r7, #10]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4603      	mov	r3, r0
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fac2 	bl	8003a90 <I2C_RequestMemoryWrite>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d052      	beq.n	80035b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e081      	b.n	800361a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fd50 	bl	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00d      	beq.n	8003542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	2b04      	cmp	r3, #4
 800352c:	d107      	bne.n	800353e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06b      	b.n	800361a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d11b      	bne.n	80035b8 <HAL_I2C_Mem_Write+0x180>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003584:	2b00      	cmp	r3, #0
 8003586:	d017      	beq.n	80035b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	781a      	ldrb	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1aa      	bne.n	8003516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fd43 	bl	8004050 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d107      	bne.n	80035e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e016      	b.n	800361a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e000      	b.n	800361a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	00100002 	.word	0x00100002
 8003628:	ffff0000 	.word	0xffff0000

0800362c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08c      	sub	sp, #48	@ 0x30
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003646:	f7fe fb1b 	bl	8001c80 <HAL_GetTick>
 800364a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b20      	cmp	r3, #32
 8003656:	f040 8214 	bne.w	8003a82 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	2319      	movs	r3, #25
 8003660:	2201      	movs	r2, #1
 8003662:	497b      	ldr	r1, [pc, #492]	@ (8003850 <HAL_I2C_Mem_Read+0x224>)
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fb91 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
 8003672:	e207      	b.n	8003a84 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_I2C_Mem_Read+0x56>
 800367e:	2302      	movs	r3, #2
 8003680:	e200      	b.n	8003a84 <HAL_I2C_Mem_Read+0x458>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d007      	beq.n	80036a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2222      	movs	r2, #34	@ 0x22
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2240      	movs	r2, #64	@ 0x40
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80036d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003854 <HAL_I2C_Mem_Read+0x228>)
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ea:	88f8      	ldrh	r0, [r7, #6]
 80036ec:	893a      	ldrh	r2, [r7, #8]
 80036ee:	8979      	ldrh	r1, [r7, #10]
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	4603      	mov	r3, r0
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa5e 	bl	8003bbc <I2C_RequestMemoryRead>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e1bc      	b.n	8003a84 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d113      	bne.n	800373a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003712:	2300      	movs	r3, #0
 8003714:	623b      	str	r3, [r7, #32]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	623b      	str	r3, [r7, #32]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	623b      	str	r3, [r7, #32]
 8003726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e190      	b.n	8003a5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373e:	2b01      	cmp	r3, #1
 8003740:	d11b      	bne.n	800377a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e170      	b.n	8003a5c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377e:	2b02      	cmp	r3, #2
 8003780:	d11b      	bne.n	80037ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	e150      	b.n	8003a5c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	617b      	str	r3, [r7, #20]
 80037ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037d0:	e144      	b.n	8003a5c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	f200 80f1 	bhi.w	80039be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d123      	bne.n	800382c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 fc79 	bl	80040e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e145      	b.n	8003a84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800382a:	e117      	b.n	8003a5c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	2b02      	cmp	r3, #2
 8003832:	d14e      	bne.n	80038d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383a:	2200      	movs	r2, #0
 800383c:	4906      	ldr	r1, [pc, #24]	@ (8003858 <HAL_I2C_Mem_Read+0x22c>)
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 faa4 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e11a      	b.n	8003a84 <HAL_I2C_Mem_Read+0x458>
 800384e:	bf00      	nop
 8003850:	00100002 	.word	0x00100002
 8003854:	ffff0000 	.word	0xffff0000
 8003858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038d0:	e0c4      	b.n	8003a5c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	2200      	movs	r2, #0
 80038da:	496c      	ldr	r1, [pc, #432]	@ (8003a8c <HAL_I2C_Mem_Read+0x460>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fa55 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0cb      	b.n	8003a84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003934:	2200      	movs	r2, #0
 8003936:	4955      	ldr	r1, [pc, #340]	@ (8003a8c <HAL_I2C_Mem_Read+0x460>)
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fa27 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e09d      	b.n	8003a84 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039bc:	e04e      	b.n	8003a5c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fb8c 	bl	80040e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e058      	b.n	8003a84 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d124      	bne.n	8003a5c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d107      	bne.n	8003a2a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a28:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f aeb6 	bne.w	80037d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003a82:	2302      	movs	r3, #2
  }
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3728      	adds	r7, #40	@ 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	00010004 	.word	0x00010004

08003a90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	817b      	strh	r3, [r7, #10]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	813b      	strh	r3, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f960 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ae0:	d103      	bne.n	8003aea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e05f      	b.n	8003bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aee:	897b      	ldrh	r3, [r7, #10]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003afc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	6a3a      	ldr	r2, [r7, #32]
 8003b02:	492d      	ldr	r1, [pc, #180]	@ (8003bb8 <I2C_RequestMemoryWrite+0x128>)
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 f9bb 	bl	8003e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e04c      	b.n	8003bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2c:	6a39      	ldr	r1, [r7, #32]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fa46 	bl	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d107      	bne.n	8003b52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e02b      	b.n	8003bae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b5c:	893b      	ldrh	r3, [r7, #8]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	611a      	str	r2, [r3, #16]
 8003b66:	e021      	b.n	8003bac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b68:	893b      	ldrh	r3, [r7, #8]
 8003b6a:	0a1b      	lsrs	r3, r3, #8
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b78:	6a39      	ldr	r1, [r7, #32]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fa20 	bl	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d107      	bne.n	8003b9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e005      	b.n	8003bae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba2:	893b      	ldrh	r3, [r7, #8]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	00010002 	.word	0x00010002

08003bbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	461a      	mov	r2, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	817b      	strh	r3, [r7, #10]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	813b      	strh	r3, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003be4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f8c2 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00d      	beq.n	8003c2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c1c:	d103      	bne.n	8003c26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0aa      	b.n	8003d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c2a:	897b      	ldrh	r3, [r7, #10]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	6a3a      	ldr	r2, [r7, #32]
 8003c3e:	4952      	ldr	r1, [pc, #328]	@ (8003d88 <I2C_RequestMemoryRead+0x1cc>)
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f91d 	bl	8003e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e097      	b.n	8003d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c68:	6a39      	ldr	r1, [r7, #32]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f9a8 	bl	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d107      	bne.n	8003c8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e076      	b.n	8003d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c98:	893b      	ldrh	r3, [r7, #8]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	611a      	str	r2, [r3, #16]
 8003ca2:	e021      	b.n	8003ce8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ca4:	893b      	ldrh	r3, [r7, #8]
 8003ca6:	0a1b      	lsrs	r3, r3, #8
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb4:	6a39      	ldr	r1, [r7, #32]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f982 	bl	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00d      	beq.n	8003cde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d107      	bne.n	8003cda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e050      	b.n	8003d80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cde:	893b      	ldrh	r3, [r7, #8]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cea:	6a39      	ldr	r1, [r7, #32]
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f967 	bl	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d107      	bne.n	8003d10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e035      	b.n	8003d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f82b 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00d      	beq.n	8003d58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d4a:	d103      	bne.n	8003d54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e013      	b.n	8003d80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d58:	897b      	ldrh	r3, [r7, #10]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6a:	6a3a      	ldr	r2, [r7, #32]
 8003d6c:	4906      	ldr	r1, [pc, #24]	@ (8003d88 <I2C_RequestMemoryRead+0x1cc>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f886 	bl	8003e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	00010002 	.word	0x00010002

08003d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d9c:	e048      	b.n	8003e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d044      	beq.n	8003e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da6:	f7fd ff6b 	bl	8001c80 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d139      	bne.n	8003e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	0c1b      	lsrs	r3, r3, #16
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10d      	bne.n	8003de2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	e00c      	b.n	8003dfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	43da      	mvns	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4013      	ands	r3, r2
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d116      	bne.n	8003e30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e023      	b.n	8003e78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10d      	bne.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	43da      	mvns	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	e00c      	b.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	43da      	mvns	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4013      	ands	r3, r2
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d093      	beq.n	8003d9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e8e:	e071      	b.n	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9e:	d123      	bne.n	8003ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003eb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	f043 0204 	orr.w	r2, r3, #4
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e067      	b.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eee:	d041      	beq.n	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef0:	f7fd fec6 	bl	8001c80 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d302      	bcc.n	8003f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d136      	bne.n	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d10c      	bne.n	8003f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	43da      	mvns	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bf14      	ite	ne
 8003f22:	2301      	movne	r3, #1
 8003f24:	2300      	moveq	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	e00b      	b.n	8003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	43da      	mvns	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	f043 0220 	orr.w	r2, r3, #32
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e021      	b.n	8003fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d10c      	bne.n	8003f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	43da      	mvns	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf14      	ite	ne
 8003f90:	2301      	movne	r3, #1
 8003f92:	2300      	moveq	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e00b      	b.n	8003fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	43da      	mvns	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f47f af6d 	bne.w	8003e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fcc:	e034      	b.n	8004038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f8e3 	bl	800419a <I2C_IsAcknowledgeFailed>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e034      	b.n	8004048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d028      	beq.n	8004038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	f7fd fe4b 	bl	8001c80 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d11d      	bne.n	8004038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004006:	2b80      	cmp	r3, #128	@ 0x80
 8004008:	d016      	beq.n	8004038 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004024:	f043 0220 	orr.w	r2, r3, #32
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e007      	b.n	8004048 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b80      	cmp	r3, #128	@ 0x80
 8004044:	d1c3      	bne.n	8003fce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800405c:	e034      	b.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f89b 	bl	800419a <I2C_IsAcknowledgeFailed>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e034      	b.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d028      	beq.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004076:	f7fd fe03 	bl	8001c80 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	d302      	bcc.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d11d      	bne.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b04      	cmp	r3, #4
 8004098:	d016      	beq.n	80040c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e007      	b.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d1c3      	bne.n	800405e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040ec:	e049      	b.n	8004182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d119      	bne.n	8004130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0210 	mvn.w	r2, #16
 8004104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e030      	b.n	8004192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004130:	f7fd fda6 	bl	8001c80 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	429a      	cmp	r2, r3
 800413e:	d302      	bcc.n	8004146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d11d      	bne.n	8004182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004150:	2b40      	cmp	r3, #64	@ 0x40
 8004152:	d016      	beq.n	8004182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e007      	b.n	8004192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418c:	2b40      	cmp	r3, #64	@ 0x40
 800418e:	d1ae      	bne.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b0:	d11b      	bne.n	80041ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	f043 0204 	orr.w	r2, r3, #4
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e128      	b.n	800445c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a90      	ldr	r2, [pc, #576]	@ (8004464 <HAL_I2S_Init+0x26c>)
 8004222:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fd fadf 	bl	80017e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2202      	movs	r2, #2
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004240:	f023 030f 	bic.w	r3, r3, #15
 8004244:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2202      	movs	r2, #2
 800424c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d060      	beq.n	8004318 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800425e:	2310      	movs	r3, #16
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e001      	b.n	8004268 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004264:	2320      	movs	r3, #32
 8004266:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b20      	cmp	r3, #32
 800426e:	d802      	bhi.n	8004276 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004276:	2001      	movs	r0, #1
 8004278:	f002 fe2a 	bl	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq>
 800427c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004286:	d125      	bne.n	80042d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d010      	beq.n	80042b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	fbb2 f2f3 	udiv	r2, r2, r3
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	461a      	mov	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	3305      	adds	r3, #5
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e01f      	b.n	80042f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ce:	3305      	adds	r3, #5
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	e00e      	b.n	80042f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	3305      	adds	r3, #5
 80042f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004468 <HAL_I2S_Init+0x270>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	08db      	lsrs	r3, r3, #3
 80042fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	e003      	b.n	8004320 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004318:	2302      	movs	r3, #2
 800431a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d902      	bls.n	800432c <HAL_I2S_Init+0x134>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2bff      	cmp	r3, #255	@ 0xff
 800432a:	d907      	bls.n	800433c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	f043 0210 	orr.w	r2, r3, #16
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e08f      	b.n	800445c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	ea42 0103 	orr.w	r1, r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	430a      	orrs	r2, r1
 800434e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800435a:	f023 030f 	bic.w	r3, r3, #15
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6851      	ldr	r1, [r2, #4]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6892      	ldr	r2, [r2, #8]
 8004366:	4311      	orrs	r1, r2
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68d2      	ldr	r2, [r2, #12]
 800436c:	4311      	orrs	r1, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6992      	ldr	r2, [r2, #24]
 8004372:	430a      	orrs	r2, r1
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800437e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d161      	bne.n	800444c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a38      	ldr	r2, [pc, #224]	@ (800446c <HAL_I2S_Init+0x274>)
 800438c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a37      	ldr	r2, [pc, #220]	@ (8004470 <HAL_I2S_Init+0x278>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d101      	bne.n	800439c <HAL_I2S_Init+0x1a4>
 8004398:	4b36      	ldr	r3, [pc, #216]	@ (8004474 <HAL_I2S_Init+0x27c>)
 800439a:	e001      	b.n	80043a0 <HAL_I2S_Init+0x1a8>
 800439c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	4932      	ldr	r1, [pc, #200]	@ (8004470 <HAL_I2S_Init+0x278>)
 80043a8:	428a      	cmp	r2, r1
 80043aa:	d101      	bne.n	80043b0 <HAL_I2S_Init+0x1b8>
 80043ac:	4a31      	ldr	r2, [pc, #196]	@ (8004474 <HAL_I2S_Init+0x27c>)
 80043ae:	e001      	b.n	80043b4 <HAL_I2S_Init+0x1bc>
 80043b0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80043b4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80043b8:	f023 030f 	bic.w	r3, r3, #15
 80043bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004470 <HAL_I2S_Init+0x278>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <HAL_I2S_Init+0x1d4>
 80043c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004474 <HAL_I2S_Init+0x27c>)
 80043ca:	e001      	b.n	80043d0 <HAL_I2S_Init+0x1d8>
 80043cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d0:	2202      	movs	r2, #2
 80043d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a25      	ldr	r2, [pc, #148]	@ (8004470 <HAL_I2S_Init+0x278>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d101      	bne.n	80043e2 <HAL_I2S_Init+0x1ea>
 80043de:	4b25      	ldr	r3, [pc, #148]	@ (8004474 <HAL_I2S_Init+0x27c>)
 80043e0:	e001      	b.n	80043e6 <HAL_I2S_Init+0x1ee>
 80043e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043f2:	d003      	beq.n	80043fc <HAL_I2S_Init+0x204>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d103      	bne.n	8004404 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80043fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e001      	b.n	8004408 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004412:	4313      	orrs	r3, r2
 8004414:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800441c:	4313      	orrs	r3, r2
 800441e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004426:	4313      	orrs	r3, r2
 8004428:	b29a      	uxth	r2, r3
 800442a:	897b      	ldrh	r3, [r7, #10]
 800442c:	4313      	orrs	r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004434:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a0d      	ldr	r2, [pc, #52]	@ (8004470 <HAL_I2S_Init+0x278>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d101      	bne.n	8004444 <HAL_I2S_Init+0x24c>
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <HAL_I2S_Init+0x27c>)
 8004442:	e001      	b.n	8004448 <HAL_I2S_Init+0x250>
 8004444:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004448:	897a      	ldrh	r2, [r7, #10]
 800444a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3720      	adds	r7, #32
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	0800456f 	.word	0x0800456f
 8004468:	cccccccd 	.word	0xcccccccd
 800446c:	08004951 	.word	0x08004951
 8004470:	40003800 	.word	0x40003800
 8004474:	40003400 	.word	0x40003400

08004478 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	1c9a      	adds	r2, r3, #2
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10e      	bne.n	8004508 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044f8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff ffb8 	bl	8004478 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004522:	b292      	uxth	r2, r2
 8004524:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	1c9a      	adds	r2, r3, #2
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10e      	bne.n	8004566 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004556:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ff93 	bl	800448c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b04      	cmp	r3, #4
 8004588:	d13a      	bne.n	8004600 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b01      	cmp	r3, #1
 8004592:	d109      	bne.n	80045a8 <I2S_IRQHandler+0x3a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	d102      	bne.n	80045a8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff ffb4 	bl	8004510 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ae:	2b40      	cmp	r3, #64	@ 0x40
 80045b0:	d126      	bne.n	8004600 <I2S_IRQHandler+0x92>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0320 	and.w	r3, r3, #32
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d11f      	bne.n	8004600 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045d0:	2300      	movs	r3, #0
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	f043 0202 	orr.w	r2, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff ff50 	bl	80044a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b03      	cmp	r3, #3
 800460a:	d136      	bne.n	800467a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d109      	bne.n	800462a <I2S_IRQHandler+0xbc>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004620:	2b80      	cmp	r3, #128	@ 0x80
 8004622:	d102      	bne.n	800462a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ff45 	bl	80044b4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b08      	cmp	r3, #8
 8004632:	d122      	bne.n	800467a <I2S_IRQHandler+0x10c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b20      	cmp	r3, #32
 8004640:	d11b      	bne.n	800467a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004650:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466c:	f043 0204 	orr.w	r2, r3, #4
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff13 	bl	80044a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  if (hi2s->State != HAL_I2S_STATE_READY)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <HAL_I2SEx_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
 80046a8:	e144      	b.n	8004934 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_I2SEx_TransmitReceive_DMA+0x38>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_I2SEx_TransmitReceive_DMA+0x38>
 80046b6:	887b      	ldrh	r3, [r7, #2]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_I2SEx_TransmitReceive_DMA+0x3c>
  {
    return  HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e139      	b.n	8004934 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_I2SEx_TransmitReceive_DMA+0x4c>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e131      	b.n	8004934 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d002      	beq.n	80046fc <HAL_I2SEx_TransmitReceive_DMA+0x78>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d114      	bne.n	8004726 <HAL_I2SEx_TransmitReceive_DMA+0xa2>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80046fc:	887b      	ldrh	r3, [r7, #2]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004706:	887b      	ldrh	r3, [r7, #2]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8004710:	887b      	ldrh	r3, [r7, #2]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 800471a:	887b      	ldrh	r3, [r7, #2]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	865a      	strh	r2, [r3, #50]	@ 0x32
 8004724:	e00b      	b.n	800473e <HAL_I2SEx_TransmitReceive_DMA+0xba>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	887a      	ldrh	r2, [r7, #2]
 800472a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	887a      	ldrh	r2, [r7, #2]
 8004730:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	887a      	ldrh	r2, [r7, #2]
 8004736:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2205      	movs	r2, #5
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004750:	4a7a      	ldr	r2, [pc, #488]	@ (800493c <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004758:	4a79      	ldr	r2, [pc, #484]	@ (8004940 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>)
 800475a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	4a78      	ldr	r2, [pc, #480]	@ (8004944 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>)
 8004762:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004768:	2200      	movs	r2, #0
 800476a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	2200      	movs	r2, #0
 8004772:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004778:	4a72      	ldr	r2, [pc, #456]	@ (8004944 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>)
 800477a:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004786:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800478e:	d002      	beq.n	8004796 <HAL_I2SEx_TransmitReceive_DMA+0x112>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d148      	bne.n	8004828 <HAL_I2SEx_TransmitReceive_DMA+0x1a4>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	61bb      	str	r3, [r7, #24]
    status = HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a69      	ldr	r2, [pc, #420]	@ (8004948 <HAL_I2SEx_TransmitReceive_DMA+0x2c4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d101      	bne.n	80047ac <HAL_I2SEx_TransmitReceive_DMA+0x128>
 80047a8:	4b68      	ldr	r3, [pc, #416]	@ (800494c <HAL_I2SEx_TransmitReceive_DMA+0x2c8>)
 80047aa:	e001      	b.n	80047b0 <HAL_I2SEx_TransmitReceive_DMA+0x12c>
 80047ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047b0:	330c      	adds	r3, #12
 80047b2:	4619      	mov	r1, r3
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f7fe f865 	bl	800288c <HAL_DMA_Start_IT>
 80047c2:	4603      	mov	r3, r0
 80047c4:	77fb      	strb	r3, [r7, #31]

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004948 <HAL_I2SEx_TransmitReceive_DMA+0x2c4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d101      	bne.n	80047d4 <HAL_I2SEx_TransmitReceive_DMA+0x150>
 80047d0:	4b5e      	ldr	r3, [pc, #376]	@ (800494c <HAL_I2SEx_TransmitReceive_DMA+0x2c8>)
 80047d2:	e001      	b.n	80047d8 <HAL_I2SEx_TransmitReceive_DMA+0x154>
 80047d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	495a      	ldr	r1, [pc, #360]	@ (8004948 <HAL_I2SEx_TransmitReceive_DMA+0x2c4>)
 80047e0:	428b      	cmp	r3, r1
 80047e2:	d101      	bne.n	80047e8 <HAL_I2SEx_TransmitReceive_DMA+0x164>
 80047e4:	4b59      	ldr	r3, [pc, #356]	@ (800494c <HAL_I2SEx_TransmitReceive_DMA+0x2c8>)
 80047e6:	e001      	b.n	80047ec <HAL_I2SEx_TransmitReceive_DMA+0x168>
 80047e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	61bb      	str	r3, [r7, #24]
    status = HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	461a      	mov	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480c:	b29b      	uxth	r3, r3
 800480e:	f7fe f83d 	bl	800288c <HAL_DMA_Start_IT>
 8004812:	4603      	mov	r3, r0
 8004814:	77fb      	strb	r3, [r7, #31]

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0202 	orr.w	r2, r2, #2
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	e05a      	b.n	80048de <HAL_I2SEx_TransmitReceive_DMA+0x25a>
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004836:	d10a      	bne.n	800484e <HAL_I2SEx_TransmitReceive_DMA+0x1ca>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800484e:	f107 0308 	add.w	r3, r7, #8
 8004852:	61bb      	str	r3, [r7, #24]
    status = HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a39      	ldr	r2, [pc, #228]	@ (8004948 <HAL_I2SEx_TransmitReceive_DMA+0x2c4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <HAL_I2SEx_TransmitReceive_DMA+0x1e6>
 8004866:	4b39      	ldr	r3, [pc, #228]	@ (800494c <HAL_I2SEx_TransmitReceive_DMA+0x2c8>)
 8004868:	e001      	b.n	800486e <HAL_I2SEx_TransmitReceive_DMA+0x1ea>
 800486a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800486e:	330c      	adds	r3, #12
 8004870:	461a      	mov	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004876:	b29b      	uxth	r3, r3
 8004878:	f7fe f808 	bl	800288c <HAL_DMA_Start_IT>
 800487c:	4603      	mov	r3, r0
 800487e:	77fb      	strb	r3, [r7, #31]

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a30      	ldr	r2, [pc, #192]	@ (8004948 <HAL_I2SEx_TransmitReceive_DMA+0x2c4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <HAL_I2SEx_TransmitReceive_DMA+0x20a>
 800488a:	4b30      	ldr	r3, [pc, #192]	@ (800494c <HAL_I2SEx_TransmitReceive_DMA+0x2c8>)
 800488c:	e001      	b.n	8004892 <HAL_I2SEx_TransmitReceive_DMA+0x20e>
 800488e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	492b      	ldr	r1, [pc, #172]	@ (8004948 <HAL_I2SEx_TransmitReceive_DMA+0x2c4>)
 800489a:	428b      	cmp	r3, r1
 800489c:	d101      	bne.n	80048a2 <HAL_I2SEx_TransmitReceive_DMA+0x21e>
 800489e:	4b2b      	ldr	r3, [pc, #172]	@ (800494c <HAL_I2SEx_TransmitReceive_DMA+0x2c8>)
 80048a0:	e001      	b.n	80048a6 <HAL_I2SEx_TransmitReceive_DMA+0x222>
 80048a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048a6:	f042 0202 	orr.w	r2, r2, #2
 80048aa:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80048ac:	1d3b      	adds	r3, r7, #4
 80048ae:	61bb      	str	r3, [r7, #24]
    status = HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	4619      	mov	r1, r3
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	f7fd ffe1 	bl	800288c <HAL_DMA_Start_IT>
 80048ca:	4603      	mov	r3, r0
 80048cc:	77fb      	strb	r3, [r7, #31]

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f4:	d01d      	beq.n	8004932 <HAL_I2SEx_TransmitReceive_DMA+0x2ae>
  {
    /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
    __HAL_I2SEXT_ENABLE(hi2s);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a13      	ldr	r2, [pc, #76]	@ (8004948 <HAL_I2SEx_TransmitReceive_DMA+0x2c4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_I2SEx_TransmitReceive_DMA+0x280>
 8004900:	4b12      	ldr	r3, [pc, #72]	@ (800494c <HAL_I2SEx_TransmitReceive_DMA+0x2c8>)
 8004902:	e001      	b.n	8004908 <HAL_I2SEx_TransmitReceive_DMA+0x284>
 8004904:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	490e      	ldr	r1, [pc, #56]	@ (8004948 <HAL_I2SEx_TransmitReceive_DMA+0x2c4>)
 8004910:	428b      	cmp	r3, r1
 8004912:	d101      	bne.n	8004918 <HAL_I2SEx_TransmitReceive_DMA+0x294>
 8004914:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <HAL_I2SEx_TransmitReceive_DMA+0x2c8>)
 8004916:	e001      	b.n	800491c <HAL_I2SEx_TransmitReceive_DMA+0x298>
 8004918:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800491c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004920:	61da      	str	r2, [r3, #28]
    /* Enable I2S peripheral before the I2Sext */
    __HAL_I2S_ENABLE(hi2s);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004930:	61da      	str	r2, [r3, #28]
  }

  return status;
 8004932:	7ffb      	ldrb	r3, [r7, #31]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	08004bf9 	.word	0x08004bf9
 8004940:	08004c15 	.word	0x08004c15
 8004944:	08004ced 	.word	0x08004ced
 8004948:	40003800 	.word	0x40003800
 800494c:	40003400 	.word	0x40003400

08004950 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a92      	ldr	r2, [pc, #584]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800496a:	4b92      	ldr	r3, [pc, #584]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800496c:	e001      	b.n	8004972 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800496e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a8b      	ldr	r2, [pc, #556]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d101      	bne.n	800498c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004988:	4b8a      	ldr	r3, [pc, #552]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800498a:	e001      	b.n	8004990 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800498c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800499c:	d004      	beq.n	80049a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 8099 	bne.w	8004ada <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d107      	bne.n	80049c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f9d5 	bl	8004d6c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d107      	bne.n	80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fa78 	bl	8004ecc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e2:	2b40      	cmp	r3, #64	@ 0x40
 80049e4:	d13a      	bne.n	8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d035      	beq.n	8004a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a6e      	ldr	r2, [pc, #440]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d101      	bne.n	80049fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80049fa:	4b6e      	ldr	r3, [pc, #440]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049fc:	e001      	b.n	8004a02 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80049fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4969      	ldr	r1, [pc, #420]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a0a:	428b      	cmp	r3, r1
 8004a0c:	d101      	bne.n	8004a12 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a0e:	4b69      	ldr	r3, [pc, #420]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a10:	e001      	b.n	8004a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a1a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4e:	f043 0202 	orr.w	r2, r3, #2
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff fd22 	bl	80044a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	f040 80c3 	bne.w	8004bee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80bd 	beq.w	8004bee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a49      	ldr	r2, [pc, #292]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a8e:	4b49      	ldr	r3, [pc, #292]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a90:	e001      	b.n	8004a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4944      	ldr	r1, [pc, #272]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a9e:	428b      	cmp	r3, r1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004aa2:	4b44      	ldr	r3, [pc, #272]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa4:	e001      	b.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004aa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004aaa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004aae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	f043 0204 	orr.w	r2, r3, #4
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff fce4 	bl	80044a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ad8:	e089      	b.n	8004bee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d107      	bne.n	8004af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f96e 	bl	8004dd0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d107      	bne.n	8004b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f9ad 	bl	8004e68 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	d12f      	bne.n	8004b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d02a      	beq.n	8004b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b30:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d101      	bne.n	8004b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b3e:	e001      	b.n	8004b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4919      	ldr	r1, [pc, #100]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	d101      	bne.n	8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004b50:	4b18      	ldr	r3, [pc, #96]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b52:	e001      	b.n	8004b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004b54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff fc94 	bl	80044a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d136      	bne.n	8004bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d031      	beq.n	8004bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a07      	ldr	r2, [pc, #28]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b96:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b98:	e001      	b.n	8004b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4902      	ldr	r1, [pc, #8]	@ (8004bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ba6:	428b      	cmp	r3, r1
 8004ba8:	d106      	bne.n	8004bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004baa:	4b02      	ldr	r3, [pc, #8]	@ (8004bb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004bac:	e006      	b.n	8004bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004bae:	bf00      	nop
 8004bb0:	40003800 	.word	0x40003800
 8004bb4:	40003400 	.word	0x40003400
 8004bb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bbc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bc0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004bd0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bde:	f043 0204 	orr.w	r2, r3, #4
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fc5a 	bl	80044a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bec:	e000      	b.n	8004bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bee:	bf00      	nop
}
 8004bf0:	bf00      	nop
 8004bf2:	3720      	adds	r7, #32
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f7fb fdde 	bl	80007c8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c20:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d155      	bne.n	8004cd6 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c38:	d006      	beq.n	8004c48 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d11e      	bne.n	8004c86 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a25      	ldr	r2, [pc, #148]	@ (8004ce4 <I2SEx_TxRxDMACplt+0xd0>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d101      	bne.n	8004c56 <I2SEx_TxRxDMACplt+0x42>
 8004c52:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <I2SEx_TxRxDMACplt+0xd4>)
 8004c54:	e001      	b.n	8004c5a <I2SEx_TxRxDMACplt+0x46>
 8004c56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4920      	ldr	r1, [pc, #128]	@ (8004ce4 <I2SEx_TxRxDMACplt+0xd0>)
 8004c62:	428b      	cmp	r3, r1
 8004c64:	d101      	bne.n	8004c6a <I2SEx_TxRxDMACplt+0x56>
 8004c66:	4b20      	ldr	r3, [pc, #128]	@ (8004ce8 <I2SEx_TxRxDMACplt+0xd4>)
 8004c68:	e001      	b.n	8004c6e <I2SEx_TxRxDMACplt+0x5a>
 8004c6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0202 	bic.w	r2, r2, #2
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	e01d      	b.n	8004cc2 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0201 	bic.w	r2, r2, #1
 8004c94:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ce4 <I2SEx_TxRxDMACplt+0xd0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d101      	bne.n	8004ca4 <I2SEx_TxRxDMACplt+0x90>
 8004ca0:	4b11      	ldr	r3, [pc, #68]	@ (8004ce8 <I2SEx_TxRxDMACplt+0xd4>)
 8004ca2:	e001      	b.n	8004ca8 <I2SEx_TxRxDMACplt+0x94>
 8004ca4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	490d      	ldr	r1, [pc, #52]	@ (8004ce4 <I2SEx_TxRxDMACplt+0xd0>)
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	d101      	bne.n	8004cb8 <I2SEx_TxRxDMACplt+0xa4>
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce8 <I2SEx_TxRxDMACplt+0xd4>)
 8004cb6:	e001      	b.n	8004cbc <I2SEx_TxRxDMACplt+0xa8>
 8004cb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cbc:	f022 0202 	bic.w	r2, r2, #2
 8004cc0:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7fb fd94 	bl	8000804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40003800 	.word	0x40003800
 8004ce8:	40003400 	.word	0x40003400

08004cec <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0203 	bic.w	r2, r2, #3
 8004d08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	@ (8004d64 <I2SEx_TxRxDMAError+0x78>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <I2SEx_TxRxDMAError+0x2c>
 8004d14:	4b14      	ldr	r3, [pc, #80]	@ (8004d68 <I2SEx_TxRxDMAError+0x7c>)
 8004d16:	e001      	b.n	8004d1c <I2SEx_TxRxDMAError+0x30>
 8004d18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4910      	ldr	r1, [pc, #64]	@ (8004d64 <I2SEx_TxRxDMAError+0x78>)
 8004d24:	428b      	cmp	r3, r1
 8004d26:	d101      	bne.n	8004d2c <I2SEx_TxRxDMAError+0x40>
 8004d28:	4b0f      	ldr	r3, [pc, #60]	@ (8004d68 <I2SEx_TxRxDMAError+0x7c>)
 8004d2a:	e001      	b.n	8004d30 <I2SEx_TxRxDMAError+0x44>
 8004d2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d30:	f022 0203 	bic.w	r2, r2, #3
 8004d34:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4e:	f043 0208 	orr.w	r2, r3, #8
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff fba2 	bl	80044a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40003800 	.word	0x40003800
 8004d68:	40003400 	.word	0x40003400

08004d6c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	1c99      	adds	r1, r3, #2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004d7e:	881a      	ldrh	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d113      	bne.n	8004dc6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004dac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fb fd1f 	bl	8000804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	1c99      	adds	r1, r3, #2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6251      	str	r1, [r2, #36]	@ 0x24
 8004de2:	8819      	ldrh	r1, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e60 <I2SEx_TxISR_I2SExt+0x90>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d101      	bne.n	8004df2 <I2SEx_TxISR_I2SExt+0x22>
 8004dee:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <I2SEx_TxISR_I2SExt+0x94>)
 8004df0:	e001      	b.n	8004df6 <I2SEx_TxISR_I2SExt+0x26>
 8004df2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004df6:	460a      	mov	r2, r1
 8004df8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d121      	bne.n	8004e56 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a12      	ldr	r2, [pc, #72]	@ (8004e60 <I2SEx_TxISR_I2SExt+0x90>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <I2SEx_TxISR_I2SExt+0x50>
 8004e1c:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <I2SEx_TxISR_I2SExt+0x94>)
 8004e1e:	e001      	b.n	8004e24 <I2SEx_TxISR_I2SExt+0x54>
 8004e20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	490d      	ldr	r1, [pc, #52]	@ (8004e60 <I2SEx_TxISR_I2SExt+0x90>)
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	d101      	bne.n	8004e34 <I2SEx_TxISR_I2SExt+0x64>
 8004e30:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <I2SEx_TxISR_I2SExt+0x94>)
 8004e32:	e001      	b.n	8004e38 <I2SEx_TxISR_I2SExt+0x68>
 8004e34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7fb fcd7 	bl	8000804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40003800 	.word	0x40003800
 8004e64:	40003400 	.word	0x40003400

08004e68 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68d8      	ldr	r0, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	1c99      	adds	r1, r3, #2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004e80:	b282      	uxth	r2, r0
 8004e82:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d113      	bne.n	8004ec4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004eaa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fb fca0 	bl	8000804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a20      	ldr	r2, [pc, #128]	@ (8004f5c <I2SEx_RxISR_I2SExt+0x90>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <I2SEx_RxISR_I2SExt+0x16>
 8004ede:	4b20      	ldr	r3, [pc, #128]	@ (8004f60 <I2SEx_RxISR_I2SExt+0x94>)
 8004ee0:	e001      	b.n	8004ee6 <I2SEx_RxISR_I2SExt+0x1a>
 8004ee2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ee6:	68d8      	ldr	r0, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	1c99      	adds	r1, r3, #2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004ef2:	b282      	uxth	r2, r0
 8004ef4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d121      	bne.n	8004f52 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a12      	ldr	r2, [pc, #72]	@ (8004f5c <I2SEx_RxISR_I2SExt+0x90>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <I2SEx_RxISR_I2SExt+0x50>
 8004f18:	4b11      	ldr	r3, [pc, #68]	@ (8004f60 <I2SEx_RxISR_I2SExt+0x94>)
 8004f1a:	e001      	b.n	8004f20 <I2SEx_RxISR_I2SExt+0x54>
 8004f1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	490d      	ldr	r1, [pc, #52]	@ (8004f5c <I2SEx_RxISR_I2SExt+0x90>)
 8004f28:	428b      	cmp	r3, r1
 8004f2a:	d101      	bne.n	8004f30 <I2SEx_RxISR_I2SExt+0x64>
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <I2SEx_RxISR_I2SExt+0x94>)
 8004f2e:	e001      	b.n	8004f34 <I2SEx_RxISR_I2SExt+0x68>
 8004f30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f38:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fb fc59 	bl	8000804 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40003800 	.word	0x40003800
 8004f60:	40003400 	.word	0x40003400

08004f64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e101      	b.n	800517a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d106      	bne.n	8004f96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f006 fae1 	bl	800b558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2203      	movs	r2, #3
 8004f9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fa4:	d102      	bne.n	8004fac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f002 ff0a 	bl	8007dca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	7c1a      	ldrb	r2, [r3, #16]
 8004fbe:	f88d 2000 	strb.w	r2, [sp]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fc6:	f002 fde9 	bl	8007b9c <USB_CoreInit>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0ce      	b.n	800517a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f002 ff02 	bl	8007dec <USB_SetCurrentMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e0bf      	b.n	800517a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
 8004ffe:	e04a      	b.n	8005096 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005000:	7bfa      	ldrb	r2, [r7, #15]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3315      	adds	r3, #21
 8005010:	2201      	movs	r2, #1
 8005012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	3314      	adds	r3, #20
 8005024:	7bfa      	ldrb	r2, [r7, #15]
 8005026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005028:	7bfa      	ldrb	r2, [r7, #15]
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	b298      	uxth	r0, r3
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	332e      	adds	r3, #46	@ 0x2e
 800503c:	4602      	mov	r2, r0
 800503e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	3318      	adds	r3, #24
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	331c      	adds	r3, #28
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	3320      	adds	r3, #32
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	3324      	adds	r3, #36	@ 0x24
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	3301      	adds	r3, #1
 8005094:	73fb      	strb	r3, [r7, #15]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	791b      	ldrb	r3, [r3, #4]
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	429a      	cmp	r2, r3
 800509e:	d3af      	bcc.n	8005000 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a0:	2300      	movs	r3, #0
 80050a2:	73fb      	strb	r3, [r7, #15]
 80050a4:	e044      	b.n	8005130 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050a6:	7bfa      	ldrb	r2, [r7, #15]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050bc:	7bfa      	ldrb	r2, [r7, #15]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80050ce:	7bfa      	ldrb	r2, [r7, #15]
 80050d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050e8:	7bfa      	ldrb	r2, [r7, #15]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050fe:	7bfa      	ldrb	r2, [r7, #15]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005114:	7bfa      	ldrb	r2, [r7, #15]
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	3301      	adds	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	791b      	ldrb	r3, [r3, #4]
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	429a      	cmp	r2, r3
 8005138:	d3b5      	bcc.n	80050a6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7c1a      	ldrb	r2, [r3, #16]
 8005142:	f88d 2000 	strb.w	r2, [sp]
 8005146:	3304      	adds	r3, #4
 8005148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800514a:	f002 fe9b 	bl	8007e84 <USB_DevInit>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e00c      	b.n	800517a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f003 fee5 	bl	8008f42 <USB_DevDisconnect>

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_PCD_Start+0x1c>
 800519a:	2302      	movs	r3, #2
 800519c:	e022      	b.n	80051e4 <HAL_PCD_Start+0x62>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d105      	bne.n	80051c6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f002 fdec 	bl	8007da8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f003 fe93 	bl	8008f00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b08d      	sub	sp, #52	@ 0x34
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f003 ff51 	bl	80090aa <USB_GetMode>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	f040 848c 	bne.w	8005b28 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f003 feb5 	bl	8008f84 <USB_ReadInterrupts>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8482 	beq.w	8005b26 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f003 fea2 	bl	8008f84 <USB_ReadInterrupts>
 8005240:	4603      	mov	r3, r0
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d107      	bne.n	800525a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f002 0202 	and.w	r2, r2, #2
 8005258:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f003 fe90 	bl	8008f84 <USB_ReadInterrupts>
 8005264:	4603      	mov	r3, r0
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b10      	cmp	r3, #16
 800526c:	d161      	bne.n	8005332 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699a      	ldr	r2, [r3, #24]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0210 	bic.w	r2, r2, #16
 800527c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f003 020f 	and.w	r2, r3, #15
 800528a:	4613      	mov	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4413      	add	r3, r2
 800529a:	3304      	adds	r3, #4
 800529c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80052a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052a8:	d124      	bne.n	80052f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d035      	beq.n	8005322 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	6a38      	ldr	r0, [r7, #32]
 80052ca:	f003 fcc7 	bl	8008c5c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052da:	441a      	add	r2, r3
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ec:	441a      	add	r2, r3
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	615a      	str	r2, [r3, #20]
 80052f2:	e016      	b.n	8005322 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80052fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80052fe:	d110      	bne.n	8005322 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005306:	2208      	movs	r2, #8
 8005308:	4619      	mov	r1, r3
 800530a:	6a38      	ldr	r0, [r7, #32]
 800530c:	f003 fca6 	bl	8008c5c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	091b      	lsrs	r3, r3, #4
 8005318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800531c:	441a      	add	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699a      	ldr	r2, [r3, #24]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0210 	orr.w	r2, r2, #16
 8005330:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f003 fe24 	bl	8008f84 <USB_ReadInterrupts>
 800533c:	4603      	mov	r3, r0
 800533e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005342:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005346:	f040 80a7 	bne.w	8005498 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f003 fe29 	bl	8008faa <USB_ReadDevAllOutEpInterrupt>
 8005358:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800535a:	e099      	b.n	8005490 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 808e 	beq.w	8005484 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f003 fe4d 	bl	8009012 <USB_ReadDevOutEPInterrupt>
 8005378:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00c      	beq.n	800539e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005390:	461a      	mov	r2, r3
 8005392:	2301      	movs	r3, #1
 8005394:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005396:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fea3 	bl	80060e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00c      	beq.n	80053c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80053a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b4:	461a      	mov	r2, r3
 80053b6:	2308      	movs	r3, #8
 80053b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80053ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 ff79 	bl	80062b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d8:	461a      	mov	r2, r3
 80053da:	2310      	movs	r3, #16
 80053dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d030      	beq.n	800544a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f0:	2b80      	cmp	r3, #128	@ 0x80
 80053f2:	d109      	bne.n	8005408 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005402:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005406:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4413      	add	r3, r2
 800541a:	3304      	adds	r3, #4
 800541c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	78db      	ldrb	r3, [r3, #3]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d108      	bne.n	8005438 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2200      	movs	r2, #0
 800542a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	b2db      	uxtb	r3, r3
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f006 f996 	bl	800b764 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005444:	461a      	mov	r2, r3
 8005446:	2302      	movs	r3, #2
 8005448:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005460:	461a      	mov	r2, r3
 8005462:	2320      	movs	r3, #32
 8005464:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d009      	beq.n	8005484 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547c:	461a      	mov	r2, r3
 800547e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005482:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	3301      	adds	r3, #1
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005492:	2b00      	cmp	r3, #0
 8005494:	f47f af62 	bne.w	800535c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f003 fd71 	bl	8008f84 <USB_ReadInterrupts>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054ac:	f040 80db 	bne.w	8005666 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f003 fd92 	bl	8008fde <USB_ReadDevAllInEpInterrupt>
 80054ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80054c0:	e0cd      	b.n	800565e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80c2 	beq.w	8005652 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f003 fdb8 	bl	800904e <USB_ReadDevInEPInterrupt>
 80054de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d057      	beq.n	800559a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	2201      	movs	r2, #1
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	43db      	mvns	r3, r3
 8005504:	69f9      	ldr	r1, [r7, #28]
 8005506:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800550a:	4013      	ands	r3, r2
 800550c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800551a:	461a      	mov	r2, r3
 800551c:	2301      	movs	r3, #1
 800551e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	799b      	ldrb	r3, [r3, #6]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d132      	bne.n	800558e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	3320      	adds	r3, #32
 8005538:	6819      	ldr	r1, [r3, #0]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553e:	4613      	mov	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4403      	add	r3, r0
 8005548:	331c      	adds	r3, #28
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4419      	add	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005552:	4613      	mov	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4403      	add	r3, r0
 800555c:	3320      	adds	r3, #32
 800555e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	2b00      	cmp	r3, #0
 8005564:	d113      	bne.n	800558e <HAL_PCD_IRQHandler+0x3a2>
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3324      	adds	r3, #36	@ 0x24
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d108      	bne.n	800558e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005586:	461a      	mov	r2, r3
 8005588:	2101      	movs	r1, #1
 800558a:	f003 fdbf 	bl	800910c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	b2db      	uxtb	r3, r3
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f006 f860 	bl	800b65a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b0:	461a      	mov	r2, r3
 80055b2:	2308      	movs	r3, #8
 80055b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80055c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055cc:	461a      	mov	r2, r3
 80055ce:	2310      	movs	r3, #16
 80055d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80055dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e8:	461a      	mov	r2, r3
 80055ea:	2340      	movs	r3, #64	@ 0x40
 80055ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d023      	beq.n	8005640 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80055f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055fa:	6a38      	ldr	r0, [r7, #32]
 80055fc:	f002 fda6 	bl	800814c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005602:	4613      	mov	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	3310      	adds	r3, #16
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	4413      	add	r3, r2
 8005610:	3304      	adds	r3, #4
 8005612:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	78db      	ldrb	r3, [r3, #3]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d108      	bne.n	800562e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2200      	movs	r2, #0
 8005620:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	b2db      	uxtb	r3, r3
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f006 f8ad 	bl	800b788 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800562e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563a:	461a      	mov	r2, r3
 800563c:	2302      	movs	r3, #2
 800563e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800564a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fcbd 	bl	8005fcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	3301      	adds	r3, #1
 8005656:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	f47f af2e 	bne.w	80054c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f003 fc8a 	bl	8008f84 <USB_ReadInterrupts>
 8005670:	4603      	mov	r3, r0
 8005672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800567a:	d122      	bne.n	80056c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800568a:	f023 0301 	bic.w	r3, r3, #1
 800568e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005696:	2b01      	cmp	r3, #1
 8005698:	d108      	bne.n	80056ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056a2:	2100      	movs	r1, #0
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fea3 	bl	80063f0 <HAL_PCDEx_LPM_Callback>
 80056aa:	e002      	b.n	80056b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f006 f84b 	bl	800b748 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695a      	ldr	r2, [r3, #20]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80056c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f003 fc5c 	bl	8008f84 <USB_ReadInterrupts>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d6:	d112      	bne.n	80056fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d102      	bne.n	80056ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f006 f807 	bl	800b6fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80056fc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f003 fc3e 	bl	8008f84 <USB_ReadInterrupts>
 8005708:	4603      	mov	r3, r0
 800570a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005712:	f040 80b7 	bne.w	8005884 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005724:	f023 0301 	bic.w	r3, r3, #1
 8005728:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2110      	movs	r1, #16
 8005730:	4618      	mov	r0, r3
 8005732:	f002 fd0b 	bl	800814c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573a:	e046      	b.n	80057ca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800574e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005760:	0151      	lsls	r1, r2, #5
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	440a      	add	r2, r1
 8005766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800576a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800576e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577c:	461a      	mov	r2, r3
 800577e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005782:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	440a      	add	r2, r1
 800579a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800579e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b4:	0151      	lsls	r1, r2, #5
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	440a      	add	r2, r1
 80057ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c6:	3301      	adds	r3, #1
 80057c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	791b      	ldrb	r3, [r3, #4]
 80057ce:	461a      	mov	r2, r3
 80057d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d3b2      	bcc.n	800573c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057e4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80057e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7bdb      	ldrb	r3, [r3, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d016      	beq.n	8005820 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057fc:	69fa      	ldr	r2, [r7, #28]
 80057fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005802:	f043 030b 	orr.w	r3, r3, #11
 8005806:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005818:	f043 030b 	orr.w	r3, r3, #11
 800581c:	6453      	str	r3, [r2, #68]	@ 0x44
 800581e:	e015      	b.n	800584c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800582e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005832:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005836:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005846:	f043 030b 	orr.w	r3, r3, #11
 800584a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800585a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800585e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800586e:	461a      	mov	r2, r3
 8005870:	f003 fc4c 	bl	800910c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695a      	ldr	r2, [r3, #20]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	f003 fb7b 	bl	8008f84 <USB_ReadInterrupts>
 800588e:	4603      	mov	r3, r0
 8005890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005898:	d123      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f003 fc11 	bl	80090c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f002 fcc8 	bl	800823e <USB_GetDevSpeed>
 80058ae:	4603      	mov	r3, r0
 80058b0:	461a      	mov	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681c      	ldr	r4, [r3, #0]
 80058ba:	f001 fa07 	bl	8006ccc <HAL_RCC_GetHCLKFreq>
 80058be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058c4:	461a      	mov	r2, r3
 80058c6:	4620      	mov	r0, r4
 80058c8:	f002 f9cc 	bl	8007c64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f005 feec 	bl	800b6aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695a      	ldr	r2, [r3, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80058e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f003 fb4c 	bl	8008f84 <USB_ReadInterrupts>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d10a      	bne.n	800590c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f005 fec9 	bl	800b68e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f002 0208 	and.w	r2, r2, #8
 800590a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f003 fb37 	bl	8008f84 <USB_ReadInterrupts>
 8005916:	4603      	mov	r3, r0
 8005918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800591c:	2b80      	cmp	r3, #128	@ 0x80
 800591e:	d123      	bne.n	8005968 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800592c:	2301      	movs	r3, #1
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005930:	e014      	b.n	800595c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d105      	bne.n	8005956 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	b2db      	uxtb	r3, r3
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fb0a 	bl	8005f6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005958:	3301      	adds	r3, #1
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	791b      	ldrb	r3, [r3, #4]
 8005960:	461a      	mov	r2, r3
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	4293      	cmp	r3, r2
 8005966:	d3e4      	bcc.n	8005932 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f003 fb09 	bl	8008f84 <USB_ReadInterrupts>
 8005972:	4603      	mov	r3, r0
 8005974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800597c:	d13c      	bne.n	80059f8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800597e:	2301      	movs	r3, #1
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
 8005982:	e02b      	b.n	80059dc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005998:	4613      	mov	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	3318      	adds	r3, #24
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d115      	bne.n	80059d6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80059aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	da12      	bge.n	80059d6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b4:	4613      	mov	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	3317      	adds	r3, #23
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 faca 	bl	8005f6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	3301      	adds	r3, #1
 80059da:	627b      	str	r3, [r7, #36]	@ 0x24
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	791b      	ldrb	r3, [r3, #4]
 80059e0:	461a      	mov	r2, r3
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d3cd      	bcc.n	8005984 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80059f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f003 fac1 	bl	8008f84 <USB_ReadInterrupts>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a0c:	d156      	bne.n	8005abc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a0e:	2301      	movs	r3, #1
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a12:	e045      	b.n	8005aa0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a28:	4613      	mov	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	440b      	add	r3, r1
 8005a32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d12e      	bne.n	8005a9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	da2b      	bge.n	8005a9a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	0c1a      	lsrs	r2, r3, #16
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005a4c:	4053      	eors	r3, r2
 8005a4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d121      	bne.n	8005a9a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a96:	6053      	str	r3, [r2, #4]
            break;
 8005a98:	e008      	b.n	8005aac <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	791b      	ldrb	r3, [r3, #4]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d3b3      	bcc.n	8005a14 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f003 fa5f 	bl	8008f84 <USB_ReadInterrupts>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad0:	d10a      	bne.n	8005ae8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f005 fe6a 	bl	800b7ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f003 fa49 	bl	8008f84 <USB_ReadInterrupts>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b04      	cmp	r3, #4
 8005afa:	d115      	bne.n	8005b28 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f005 fe5a 	bl	800b7c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6859      	ldr	r1, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
 8005b24:	e000      	b.n	8005b28 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005b26:	bf00      	nop
    }
  }
}
 8005b28:	3734      	adds	r7, #52	@ 0x34
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd90      	pop	{r4, r7, pc}

08005b2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_PCD_SetAddress+0x1a>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e012      	b.n	8005b6e <HAL_PCD_SetAddress+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	78fa      	ldrb	r2, [r7, #3]
 8005b54:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	78fa      	ldrb	r2, [r7, #3]
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f003 f9a8 	bl	8008eb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	4608      	mov	r0, r1
 8005b80:	4611      	mov	r1, r2
 8005b82:	461a      	mov	r2, r3
 8005b84:	4603      	mov	r3, r0
 8005b86:	70fb      	strb	r3, [r7, #3]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	803b      	strh	r3, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da0f      	bge.n	8005bbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	f003 020f 	and.w	r2, r3, #15
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	3310      	adds	r3, #16
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	4413      	add	r3, r2
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	705a      	strb	r2, [r3, #1]
 8005bba:	e00f      	b.n	8005bdc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	f003 020f 	and.w	r2, r3, #15
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005be8:	883b      	ldrh	r3, [r7, #0]
 8005bea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	78ba      	ldrb	r2, [r7, #2]
 8005bf6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d004      	beq.n	8005c0a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c0a:	78bb      	ldrb	r3, [r7, #2]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d102      	bne.n	8005c16 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_PCD_EP_Open+0xae>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e00e      	b.n	8005c42 <HAL_PCD_EP_Open+0xcc>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f002 fb28 	bl	8008288 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005c40:	7afb      	ldrb	r3, [r7, #11]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	da0f      	bge.n	8005c7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	3310      	adds	r3, #16
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	3304      	adds	r3, #4
 8005c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	705a      	strb	r2, [r3, #1]
 8005c7c:	e00f      	b.n	8005c9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	f003 020f 	and.w	r2, r3, #15
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	4413      	add	r3, r2
 8005c94:	3304      	adds	r3, #4
 8005c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_PCD_EP_Close+0x6e>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e00e      	b.n	8005cd6 <HAL_PCD_EP_Close+0x8c>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68f9      	ldr	r1, [r7, #12]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f002 fb66 	bl	8008398 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b086      	sub	sp, #24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	460b      	mov	r3, r1
 8005cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cee:	7afb      	ldrb	r3, [r7, #11]
 8005cf0:	f003 020f 	and.w	r2, r3, #15
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	3304      	adds	r3, #4
 8005d06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2200      	movs	r2, #0
 8005d18:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d20:	7afb      	ldrb	r3, [r7, #11]
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	799b      	ldrb	r3, [r3, #6]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d102      	bne.n	8005d3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	799b      	ldrb	r3, [r3, #6]
 8005d42:	461a      	mov	r2, r3
 8005d44:	6979      	ldr	r1, [r7, #20]
 8005d46:	f002 fc03 	bl	8008550 <USB_EPStartXfer>

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	f003 020f 	and.w	r2, r3, #15
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005d76:	681b      	ldr	r3, [r3, #0]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	460b      	mov	r3, r1
 8005d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	3310      	adds	r3, #16
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	3304      	adds	r3, #4
 8005daa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dc4:	7afb      	ldrb	r3, [r7, #11]
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	799b      	ldrb	r3, [r3, #6]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d102      	bne.n	8005dde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	799b      	ldrb	r3, [r3, #6]
 8005de6:	461a      	mov	r2, r3
 8005de8:	6979      	ldr	r1, [r7, #20]
 8005dea:	f002 fbb1 	bl	8008550 <USB_EPStartXfer>

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	7912      	ldrb	r2, [r2, #4]
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e04f      	b.n	8005eb6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da0f      	bge.n	8005e3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	f003 020f 	and.w	r2, r3, #15
 8005e24:	4613      	mov	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	3310      	adds	r3, #16
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4413      	add	r3, r2
 8005e32:	3304      	adds	r3, #4
 8005e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	705a      	strb	r2, [r3, #1]
 8005e3c:	e00d      	b.n	8005e5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	4613      	mov	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	4413      	add	r3, r2
 8005e50:	3304      	adds	r3, #4
 8005e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_PCD_EP_SetStall+0x82>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e01d      	b.n	8005eb6 <HAL_PCD_EP_SetStall+0xbe>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f002 ff3f 	bl	8008d0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	7999      	ldrb	r1, [r3, #6]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f003 f930 	bl	800910c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	7912      	ldrb	r2, [r2, #4]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d901      	bls.n	8005edc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e042      	b.n	8005f62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	da0f      	bge.n	8005f04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	f003 020f 	and.w	r2, r3, #15
 8005eea:	4613      	mov	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	3310      	adds	r3, #16
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3304      	adds	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	705a      	strb	r2, [r3, #1]
 8005f02:	e00f      	b.n	8005f24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	4413      	add	r3, r2
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f2a:	78fb      	ldrb	r3, [r7, #3]
 8005f2c:	f003 030f 	and.w	r3, r3, #15
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_PCD_EP_ClrStall+0x86>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e00e      	b.n	8005f62 <HAL_PCD_EP_ClrStall+0xa4>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68f9      	ldr	r1, [r7, #12]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f002 ff48 	bl	8008de8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da0c      	bge.n	8005f98 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	f003 020f 	and.w	r2, r3, #15
 8005f84:	4613      	mov	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	3310      	adds	r3, #16
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4413      	add	r3, r2
 8005f92:	3304      	adds	r3, #4
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e00c      	b.n	8005fb2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f98:	78fb      	ldrb	r3, [r7, #3]
 8005f9a:	f003 020f 	and.w	r2, r3, #15
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	3304      	adds	r3, #4
 8005fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68f9      	ldr	r1, [r7, #12]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f002 fd67 	bl	8008a8c <USB_EPStopXfer>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	@ 0x28
 8005fd0:	af02      	add	r7, sp, #8
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	3310      	adds	r3, #16
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4413      	add	r3, r2
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d901      	bls.n	8006004 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e06b      	b.n	80060dc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	691a      	ldr	r2, [r3, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	429a      	cmp	r2, r3
 8006018:	d902      	bls.n	8006020 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	3303      	adds	r3, #3
 8006024:	089b      	lsrs	r3, r3, #2
 8006026:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006028:	e02a      	b.n	8006080 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	69fa      	ldr	r2, [r7, #28]
 800603c:	429a      	cmp	r2, r3
 800603e:	d902      	bls.n	8006046 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3303      	adds	r3, #3
 800604a:	089b      	lsrs	r3, r3, #2
 800604c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68d9      	ldr	r1, [r3, #12]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	b2da      	uxtb	r2, r3
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	4603      	mov	r3, r0
 8006062:	6978      	ldr	r0, [r7, #20]
 8006064:	f002 fdbc 	bl	8008be0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	441a      	add	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	441a      	add	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	429a      	cmp	r2, r3
 8006094:	d809      	bhi.n	80060aa <PCD_WriteEmptyTxFifo+0xde>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800609e:	429a      	cmp	r2, r3
 80060a0:	d203      	bcs.n	80060aa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1bf      	bne.n	800602a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d811      	bhi.n	80060da <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	2201      	movs	r2, #1
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	6939      	ldr	r1, [r7, #16]
 80060d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060d6:	4013      	ands	r3, r2
 80060d8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3720      	adds	r7, #32
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	333c      	adds	r3, #60	@ 0x3c
 80060fc:	3304      	adds	r3, #4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	799b      	ldrb	r3, [r3, #6]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d17b      	bne.n	8006212 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d015      	beq.n	8006150 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	4a61      	ldr	r2, [pc, #388]	@ (80062ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	f240 80b9 	bls.w	80062a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80b3 	beq.w	80062a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006146:	461a      	mov	r2, r3
 8006148:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800614c:	6093      	str	r3, [r2, #8]
 800614e:	e0a7      	b.n	80062a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006166:	461a      	mov	r2, r3
 8006168:	2320      	movs	r3, #32
 800616a:	6093      	str	r3, [r2, #8]
 800616c:	e098      	b.n	80062a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 8093 	bne.w	80062a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	4a4b      	ldr	r2, [pc, #300]	@ (80062ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d90f      	bls.n	80061a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00a      	beq.n	80061a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006198:	461a      	mov	r2, r3
 800619a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800619e:	6093      	str	r3, [r2, #8]
 80061a0:	e07e      	b.n	80062a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4413      	add	r3, r2
 80061b4:	3304      	adds	r3, #4
 80061b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	0159      	lsls	r1, r3, #5
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	440b      	add	r3, r1
 80061c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d114      	bne.n	8006204 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d109      	bne.n	80061f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6818      	ldr	r0, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061ec:	461a      	mov	r2, r3
 80061ee:	2101      	movs	r1, #1
 80061f0:	f002 ff8c 	bl	800910c <USB_EP0_OutStart>
 80061f4:	e006      	b.n	8006204 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	441a      	add	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f005 fa0a 	bl	800b624 <HAL_PCD_DataOutStageCallback>
 8006210:	e046      	b.n	80062a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	4a26      	ldr	r2, [pc, #152]	@ (80062b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d124      	bne.n	8006264 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00a      	beq.n	800623a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006230:	461a      	mov	r2, r3
 8006232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006236:	6093      	str	r3, [r2, #8]
 8006238:	e032      	b.n	80062a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f003 0320 	and.w	r3, r3, #32
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006250:	461a      	mov	r2, r3
 8006252:	2320      	movs	r3, #32
 8006254:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	4619      	mov	r1, r3
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f005 f9e1 	bl	800b624 <HAL_PCD_DataOutStageCallback>
 8006262:	e01d      	b.n	80062a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d114      	bne.n	8006294 <PCD_EP_OutXfrComplete_int+0x1b0>
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	4613      	mov	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d108      	bne.n	8006294 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800628c:	461a      	mov	r2, r3
 800628e:	2100      	movs	r1, #0
 8006290:	f002 ff3c 	bl	800910c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f005 f9c2 	bl	800b624 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	4f54300a 	.word	0x4f54300a
 80062b0:	4f54310a 	.word	0x4f54310a

080062b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	333c      	adds	r3, #60	@ 0x3c
 80062cc:	3304      	adds	r3, #4
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a15      	ldr	r2, [pc, #84]	@ (800633c <PCD_EP_OutSetupPacket_int+0x88>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d90e      	bls.n	8006308 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006300:	461a      	mov	r2, r3
 8006302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006306:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f005 f979 	bl	800b600 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a0a      	ldr	r2, [pc, #40]	@ (800633c <PCD_EP_OutSetupPacket_int+0x88>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d90c      	bls.n	8006330 <PCD_EP_OutSetupPacket_int+0x7c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	799b      	ldrb	r3, [r3, #6]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d108      	bne.n	8006330 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006328:	461a      	mov	r2, r3
 800632a:	2101      	movs	r1, #1
 800632c:	f002 feee 	bl	800910c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3718      	adds	r7, #24
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	4f54300a 	.word	0x4f54300a

08006340 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
 800634c:	4613      	mov	r3, r2
 800634e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d107      	bne.n	800636e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800635e:	883b      	ldrh	r3, [r7, #0]
 8006360:	0419      	lsls	r1, r3, #16
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	430a      	orrs	r2, r1
 800636a:	629a      	str	r2, [r3, #40]	@ 0x28
 800636c:	e028      	b.n	80063c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4413      	add	r3, r2
 800637a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]
 8006380:	e00d      	b.n	800639e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	3340      	adds	r3, #64	@ 0x40
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	4413      	add	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	3301      	adds	r3, #1
 800639c:	73fb      	strb	r3, [r7, #15]
 800639e:	7bfa      	ldrb	r2, [r7, #15]
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d3ec      	bcc.n	8006382 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063a8:	883b      	ldrh	r3, [r7, #0]
 80063aa:	0418      	lsls	r0, r3, #16
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6819      	ldr	r1, [r3, #0]
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	4302      	orrs	r2, r0
 80063b8:	3340      	adds	r3, #64	@ 0x40
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	460b      	mov	r3, r1
 80063d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	887a      	ldrh	r2, [r7, #2]
 80063e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e267      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d075      	beq.n	8006512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006426:	4b88      	ldr	r3, [pc, #544]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 030c 	and.w	r3, r3, #12
 800642e:	2b04      	cmp	r3, #4
 8006430:	d00c      	beq.n	800644c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006432:	4b85      	ldr	r3, [pc, #532]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800643a:	2b08      	cmp	r3, #8
 800643c:	d112      	bne.n	8006464 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800643e:	4b82      	ldr	r3, [pc, #520]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800644a:	d10b      	bne.n	8006464 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800644c:	4b7e      	ldr	r3, [pc, #504]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d05b      	beq.n	8006510 <HAL_RCC_OscConfig+0x108>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d157      	bne.n	8006510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e242      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800646c:	d106      	bne.n	800647c <HAL_RCC_OscConfig+0x74>
 800646e:	4b76      	ldr	r3, [pc, #472]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a75      	ldr	r2, [pc, #468]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e01d      	b.n	80064b8 <HAL_RCC_OscConfig+0xb0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x98>
 8006486:	4b70      	ldr	r3, [pc, #448]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a6f      	ldr	r2, [pc, #444]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800648c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4b6d      	ldr	r3, [pc, #436]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a6c      	ldr	r2, [pc, #432]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	e00b      	b.n	80064b8 <HAL_RCC_OscConfig+0xb0>
 80064a0:	4b69      	ldr	r3, [pc, #420]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a68      	ldr	r2, [pc, #416]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	4b66      	ldr	r3, [pc, #408]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a65      	ldr	r2, [pc, #404]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d013      	beq.n	80064e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c0:	f7fb fbde 	bl	8001c80 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c8:	f7fb fbda 	bl	8001c80 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b64      	cmp	r3, #100	@ 0x64
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e207      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064da:	4b5b      	ldr	r3, [pc, #364]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0xc0>
 80064e6:	e014      	b.n	8006512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e8:	f7fb fbca 	bl	8001c80 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064f0:	f7fb fbc6 	bl	8001c80 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	@ 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e1f3      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006502:	4b51      	ldr	r3, [pc, #324]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0xe8>
 800650e:	e000      	b.n	8006512 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d063      	beq.n	80065e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800651e:	4b4a      	ldr	r3, [pc, #296]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 030c 	and.w	r3, r3, #12
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800652a:	4b47      	ldr	r3, [pc, #284]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006532:	2b08      	cmp	r3, #8
 8006534:	d11c      	bne.n	8006570 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006536:	4b44      	ldr	r3, [pc, #272]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d116      	bne.n	8006570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006542:	4b41      	ldr	r3, [pc, #260]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <HAL_RCC_OscConfig+0x152>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d001      	beq.n	800655a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e1c7      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800655a:	4b3b      	ldr	r3, [pc, #236]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4937      	ldr	r1, [pc, #220]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800656a:	4313      	orrs	r3, r2
 800656c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800656e:	e03a      	b.n	80065e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d020      	beq.n	80065ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006578:	4b34      	ldr	r3, [pc, #208]	@ (800664c <HAL_RCC_OscConfig+0x244>)
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657e:	f7fb fb7f 	bl	8001c80 <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006586:	f7fb fb7b 	bl	8001c80 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e1a8      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006598:	4b2b      	ldr	r3, [pc, #172]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0f0      	beq.n	8006586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a4:	4b28      	ldr	r3, [pc, #160]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	4925      	ldr	r1, [pc, #148]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	600b      	str	r3, [r1, #0]
 80065b8:	e015      	b.n	80065e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ba:	4b24      	ldr	r3, [pc, #144]	@ (800664c <HAL_RCC_OscConfig+0x244>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fb fb5e 	bl	8001c80 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c8:	f7fb fb5a 	bl	8001c80 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e187      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065da:	4b1b      	ldr	r3, [pc, #108]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f0      	bne.n	80065c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d036      	beq.n	8006660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d016      	beq.n	8006628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065fa:	4b15      	ldr	r3, [pc, #84]	@ (8006650 <HAL_RCC_OscConfig+0x248>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006600:	f7fb fb3e 	bl	8001c80 <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006608:	f7fb fb3a 	bl	8001c80 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e167      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800661a:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800661c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0x200>
 8006626:	e01b      	b.n	8006660 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006628:	4b09      	ldr	r3, [pc, #36]	@ (8006650 <HAL_RCC_OscConfig+0x248>)
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800662e:	f7fb fb27 	bl	8001c80 <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006634:	e00e      	b.n	8006654 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006636:	f7fb fb23 	bl	8001c80 <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d907      	bls.n	8006654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e150      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
 8006648:	40023800 	.word	0x40023800
 800664c:	42470000 	.word	0x42470000
 8006650:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006654:	4b88      	ldr	r3, [pc, #544]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1ea      	bne.n	8006636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 8097 	beq.w	800679c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006672:	4b81      	ldr	r3, [pc, #516]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10f      	bne.n	800669e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800667e:	2300      	movs	r3, #0
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	4b7d      	ldr	r3, [pc, #500]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	4a7c      	ldr	r2, [pc, #496]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800668c:	6413      	str	r3, [r2, #64]	@ 0x40
 800668e:	4b7a      	ldr	r3, [pc, #488]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006696:	60bb      	str	r3, [r7, #8]
 8006698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800669e:	4b77      	ldr	r3, [pc, #476]	@ (800687c <HAL_RCC_OscConfig+0x474>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d118      	bne.n	80066dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066aa:	4b74      	ldr	r3, [pc, #464]	@ (800687c <HAL_RCC_OscConfig+0x474>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a73      	ldr	r2, [pc, #460]	@ (800687c <HAL_RCC_OscConfig+0x474>)
 80066b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066b6:	f7fb fae3 	bl	8001c80 <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066be:	f7fb fadf 	bl	8001c80 <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e10c      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d0:	4b6a      	ldr	r3, [pc, #424]	@ (800687c <HAL_RCC_OscConfig+0x474>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0f0      	beq.n	80066be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d106      	bne.n	80066f2 <HAL_RCC_OscConfig+0x2ea>
 80066e4:	4b64      	ldr	r3, [pc, #400]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80066e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e8:	4a63      	ldr	r2, [pc, #396]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80066ea:	f043 0301 	orr.w	r3, r3, #1
 80066ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80066f0:	e01c      	b.n	800672c <HAL_RCC_OscConfig+0x324>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d10c      	bne.n	8006714 <HAL_RCC_OscConfig+0x30c>
 80066fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80066fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006700:	f043 0304 	orr.w	r3, r3, #4
 8006704:	6713      	str	r3, [r2, #112]	@ 0x70
 8006706:	4b5c      	ldr	r3, [pc, #368]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670a:	4a5b      	ldr	r2, [pc, #364]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 800670c:	f043 0301 	orr.w	r3, r3, #1
 8006710:	6713      	str	r3, [r2, #112]	@ 0x70
 8006712:	e00b      	b.n	800672c <HAL_RCC_OscConfig+0x324>
 8006714:	4b58      	ldr	r3, [pc, #352]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006718:	4a57      	ldr	r2, [pc, #348]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 800671a:	f023 0301 	bic.w	r3, r3, #1
 800671e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006720:	4b55      	ldr	r3, [pc, #340]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006724:	4a54      	ldr	r2, [pc, #336]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006726:	f023 0304 	bic.w	r3, r3, #4
 800672a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d015      	beq.n	8006760 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fb faa4 	bl	8001c80 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673a:	e00a      	b.n	8006752 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f7fb faa0 	bl	8001c80 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0cb      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006752:	4b49      	ldr	r3, [pc, #292]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0ee      	beq.n	800673c <HAL_RCC_OscConfig+0x334>
 800675e:	e014      	b.n	800678a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006760:	f7fb fa8e 	bl	8001c80 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006766:	e00a      	b.n	800677e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006768:	f7fb fa8a 	bl	8001c80 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e0b5      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800677e:	4b3e      	ldr	r3, [pc, #248]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1ee      	bne.n	8006768 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d105      	bne.n	800679c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006790:	4b39      	ldr	r3, [pc, #228]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	4a38      	ldr	r2, [pc, #224]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800679a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80a1 	beq.w	80068e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067a6:	4b34      	ldr	r3, [pc, #208]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b08      	cmp	r3, #8
 80067b0:	d05c      	beq.n	800686c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d141      	bne.n	800683e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ba:	4b31      	ldr	r3, [pc, #196]	@ (8006880 <HAL_RCC_OscConfig+0x478>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fb fa5e 	bl	8001c80 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c8:	f7fb fa5a 	bl	8001c80 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e087      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067da:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69da      	ldr	r2, [r3, #28]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	019b      	lsls	r3, r3, #6
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	3b01      	subs	r3, #1
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	061b      	lsls	r3, r3, #24
 800680a:	491b      	ldr	r1, [pc, #108]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 800680c:	4313      	orrs	r3, r2
 800680e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006810:	4b1b      	ldr	r3, [pc, #108]	@ (8006880 <HAL_RCC_OscConfig+0x478>)
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006816:	f7fb fa33 	bl	8001c80 <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800681c:	e008      	b.n	8006830 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800681e:	f7fb fa2f 	bl	8001c80 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e05c      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006830:	4b11      	ldr	r3, [pc, #68]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0f0      	beq.n	800681e <HAL_RCC_OscConfig+0x416>
 800683c:	e054      	b.n	80068e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683e:	4b10      	ldr	r3, [pc, #64]	@ (8006880 <HAL_RCC_OscConfig+0x478>)
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006844:	f7fb fa1c 	bl	8001c80 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684c:	f7fb fa18 	bl	8001c80 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e045      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685e:	4b06      	ldr	r3, [pc, #24]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f0      	bne.n	800684c <HAL_RCC_OscConfig+0x444>
 800686a:	e03d      	b.n	80068e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d107      	bne.n	8006884 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e038      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
 8006878:	40023800 	.word	0x40023800
 800687c:	40007000 	.word	0x40007000
 8006880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006884:	4b1b      	ldr	r3, [pc, #108]	@ (80068f4 <HAL_RCC_OscConfig+0x4ec>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d028      	beq.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800689c:	429a      	cmp	r2, r3
 800689e:	d121      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d11a      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80068b4:	4013      	ands	r3, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068bc:	4293      	cmp	r3, r2
 80068be:	d111      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	3b01      	subs	r3, #1
 80068ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d107      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d001      	beq.n	80068e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40023800 	.word	0x40023800

080068f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0cc      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800690c:	4b68      	ldr	r3, [pc, #416]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d90c      	bls.n	8006934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691a:	4b65      	ldr	r3, [pc, #404]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006922:	4b63      	ldr	r3, [pc, #396]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d001      	beq.n	8006934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e0b8      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d020      	beq.n	8006982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800694c:	4b59      	ldr	r3, [pc, #356]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	4a58      	ldr	r2, [pc, #352]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006956:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0308 	and.w	r3, r3, #8
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006964:	4b53      	ldr	r3, [pc, #332]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4a52      	ldr	r2, [pc, #328]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800696e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006970:	4b50      	ldr	r3, [pc, #320]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	494d      	ldr	r1, [pc, #308]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	4313      	orrs	r3, r2
 8006980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d044      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d107      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006996:	4b47      	ldr	r3, [pc, #284]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d119      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e07f      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d003      	beq.n	80069b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d107      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b6:	4b3f      	ldr	r3, [pc, #252]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e06f      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e067      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069d6:	4b37      	ldr	r3, [pc, #220]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f023 0203 	bic.w	r2, r3, #3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	4934      	ldr	r1, [pc, #208]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069e8:	f7fb f94a 	bl	8001c80 <HAL_GetTick>
 80069ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ee:	e00a      	b.n	8006a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f0:	f7fb f946 	bl	8001c80 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e04f      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a06:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 020c 	and.w	r2, r3, #12
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d1eb      	bne.n	80069f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a18:	4b25      	ldr	r3, [pc, #148]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d20c      	bcs.n	8006a40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a26:	4b22      	ldr	r3, [pc, #136]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2e:	4b20      	ldr	r3, [pc, #128]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0307 	and.w	r3, r3, #7
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d001      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e032      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d008      	beq.n	8006a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a4c:	4b19      	ldr	r3, [pc, #100]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4916      	ldr	r1, [pc, #88]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0308 	and.w	r3, r3, #8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a6a:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	490e      	ldr	r1, [pc, #56]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a7e:	f000 f821 	bl	8006ac4 <HAL_RCC_GetSysClockFreq>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	490a      	ldr	r1, [pc, #40]	@ (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a90:	5ccb      	ldrb	r3, [r1, r3]
 8006a92:	fa22 f303 	lsr.w	r3, r2, r3
 8006a96:	4a09      	ldr	r2, [pc, #36]	@ (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fb f8aa 	bl	8001bf8 <HAL_InitTick>

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	40023c00 	.word	0x40023c00
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	0800d2b0 	.word	0x0800d2b0
 8006abc:	20000004 	.word	0x20000004
 8006ac0:	20000008 	.word	0x20000008

08006ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ac8:	b094      	sub	sp, #80	@ 0x50
 8006aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006adc:	4b79      	ldr	r3, [pc, #484]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 030c 	and.w	r3, r3, #12
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d00d      	beq.n	8006b04 <HAL_RCC_GetSysClockFreq+0x40>
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	f200 80e1 	bhi.w	8006cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_RCC_GetSysClockFreq+0x34>
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d003      	beq.n	8006afe <HAL_RCC_GetSysClockFreq+0x3a>
 8006af6:	e0db      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006af8:	4b73      	ldr	r3, [pc, #460]	@ (8006cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006afa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006afc:	e0db      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006afe:	4b72      	ldr	r3, [pc, #456]	@ (8006cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b02:	e0d8      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b04:	4b6f      	ldr	r3, [pc, #444]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d063      	beq.n	8006be2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	099b      	lsrs	r3, r3, #6
 8006b20:	2200      	movs	r2, #0
 8006b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b36:	4622      	mov	r2, r4
 8006b38:	462b      	mov	r3, r5
 8006b3a:	f04f 0000 	mov.w	r0, #0
 8006b3e:	f04f 0100 	mov.w	r1, #0
 8006b42:	0159      	lsls	r1, r3, #5
 8006b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b48:	0150      	lsls	r0, r2, #5
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4621      	mov	r1, r4
 8006b50:	1a51      	subs	r1, r2, r1
 8006b52:	6139      	str	r1, [r7, #16]
 8006b54:	4629      	mov	r1, r5
 8006b56:	eb63 0301 	sbc.w	r3, r3, r1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b68:	4659      	mov	r1, fp
 8006b6a:	018b      	lsls	r3, r1, #6
 8006b6c:	4651      	mov	r1, sl
 8006b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b72:	4651      	mov	r1, sl
 8006b74:	018a      	lsls	r2, r1, #6
 8006b76:	4651      	mov	r1, sl
 8006b78:	ebb2 0801 	subs.w	r8, r2, r1
 8006b7c:	4659      	mov	r1, fp
 8006b7e:	eb63 0901 	sbc.w	r9, r3, r1
 8006b82:	f04f 0200 	mov.w	r2, #0
 8006b86:	f04f 0300 	mov.w	r3, #0
 8006b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b96:	4690      	mov	r8, r2
 8006b98:	4699      	mov	r9, r3
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	eb18 0303 	adds.w	r3, r8, r3
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	462b      	mov	r3, r5
 8006ba4:	eb49 0303 	adc.w	r3, r9, r3
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	028b      	lsls	r3, r1, #10
 8006bba:	4621      	mov	r1, r4
 8006bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	028a      	lsls	r2, r1, #10
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bca:	2200      	movs	r2, #0
 8006bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bd4:	f7f9 fb4c 	bl	8000270 <__aeabi_uldivmod>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4613      	mov	r3, r2
 8006bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be0:	e058      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006be2:	4b38      	ldr	r3, [pc, #224]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	099b      	lsrs	r3, r3, #6
 8006be8:	2200      	movs	r2, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	4611      	mov	r1, r2
 8006bee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006bf2:	623b      	str	r3, [r7, #32]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	464b      	mov	r3, r9
 8006c00:	f04f 0000 	mov.w	r0, #0
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	0159      	lsls	r1, r3, #5
 8006c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c0e:	0150      	lsls	r0, r2, #5
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4641      	mov	r1, r8
 8006c16:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c34:	ebb2 040a 	subs.w	r4, r2, sl
 8006c38:	eb63 050b 	sbc.w	r5, r3, fp
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	00eb      	lsls	r3, r5, #3
 8006c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c4a:	00e2      	lsls	r2, r4, #3
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	461d      	mov	r5, r3
 8006c50:	4643      	mov	r3, r8
 8006c52:	18e3      	adds	r3, r4, r3
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	464b      	mov	r3, r9
 8006c58:	eb45 0303 	adc.w	r3, r5, r3
 8006c5c:	607b      	str	r3, [r7, #4]
 8006c5e:	f04f 0200 	mov.w	r2, #0
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	028b      	lsls	r3, r1, #10
 8006c6e:	4621      	mov	r1, r4
 8006c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c74:	4621      	mov	r1, r4
 8006c76:	028a      	lsls	r2, r1, #10
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c7e:	2200      	movs	r2, #0
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	61fa      	str	r2, [r7, #28]
 8006c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c88:	f7f9 faf2 	bl	8000270 <__aeabi_uldivmod>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4613      	mov	r3, r2
 8006c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006c94:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	0c1b      	lsrs	r3, r3, #16
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ca4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cae:	e002      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cb0:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3750      	adds	r7, #80	@ 0x50
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	00f42400 	.word	0x00f42400

08006ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cd0:	4b03      	ldr	r3, [pc, #12]	@ (8006ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20000004 	.word	0x20000004

08006ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ce8:	f7ff fff0 	bl	8006ccc <HAL_RCC_GetHCLKFreq>
 8006cec:	4602      	mov	r2, r0
 8006cee:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	0a9b      	lsrs	r3, r3, #10
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	4903      	ldr	r1, [pc, #12]	@ (8006d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cfa:	5ccb      	ldrb	r3, [r1, r3]
 8006cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	40023800 	.word	0x40023800
 8006d08:	0800d2c0 	.word	0x0800d2c0

08006d0c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d035      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d34:	4b62      	ldr	r3, [pc, #392]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d3a:	f7fa ffa1 	bl	8001c80 <HAL_GetTick>
 8006d3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d40:	e008      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d42:	f7fa ff9d 	bl	8001c80 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d901      	bls.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e0b0      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d54:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1f0      	bne.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	019a      	lsls	r2, r3, #6
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	071b      	lsls	r3, r3, #28
 8006d6c:	4955      	ldr	r1, [pc, #340]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d74:	4b52      	ldr	r3, [pc, #328]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d7a:	f7fa ff81 	bl	8001c80 <HAL_GetTick>
 8006d7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d80:	e008      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d82:	f7fa ff7d 	bl	8001c80 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e090      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d94:	4b4b      	ldr	r3, [pc, #300]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0f0      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8083 	beq.w	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	4b44      	ldr	r3, [pc, #272]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db6:	4a43      	ldr	r2, [pc, #268]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dbe:	4b41      	ldr	r3, [pc, #260]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006dca:	4b3f      	ldr	r3, [pc, #252]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a3e      	ldr	r2, [pc, #248]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd6:	f7fa ff53 	bl	8001c80 <HAL_GetTick>
 8006dda:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dde:	f7fa ff4f 	bl	8001c80 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e062      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006df0:	4b35      	ldr	r3, [pc, #212]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0f0      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dfc:	4b31      	ldr	r3, [pc, #196]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e04:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d02f      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d028      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e24:	4b29      	ldr	r3, [pc, #164]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e2a:	4b28      	ldr	r3, [pc, #160]	@ (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e30:	4a24      	ldr	r2, [pc, #144]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e36:	4b23      	ldr	r3, [pc, #140]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d114      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e42:	f7fa ff1d 	bl	8001c80 <HAL_GetTick>
 8006e46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e48:	e00a      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e4a:	f7fa ff19 	bl	8001c80 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e02a      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e60:	4b18      	ldr	r3, [pc, #96]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0ee      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e78:	d10d      	bne.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e7a:	4b12      	ldr	r3, [pc, #72]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e8e:	490d      	ldr	r1, [pc, #52]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	608b      	str	r3, [r1, #8]
 8006e94:	e005      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e96:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e9c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006ea0:	6093      	str	r3, [r2, #8]
 8006ea2:	4b08      	ldr	r3, [pc, #32]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ea4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eae:	4905      	ldr	r1, [pc, #20]	@ (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	42470068 	.word	0x42470068
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40007000 	.word	0x40007000
 8006ecc:	42470e40 	.word	0x42470e40

08006ed0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d13f      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006eee:	4b24      	ldr	r3, [pc, #144]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ef6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d006      	beq.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f04:	d12f      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f06:	4b1f      	ldr	r3, [pc, #124]	@ (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006f08:	617b      	str	r3, [r7, #20]
          break;
 8006f0a:	e02f      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f18:	d108      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f1a:	4b19      	ldr	r3, [pc, #100]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f22:	4a19      	ldr	r2, [pc, #100]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	e007      	b.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f2c:	4b14      	ldr	r3, [pc, #80]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f34:	4a14      	ldr	r2, [pc, #80]	@ (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f3c:	4b10      	ldr	r3, [pc, #64]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f42:	099b      	lsrs	r3, r3, #6
 8006f44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f50:	4b0b      	ldr	r3, [pc, #44]	@ (8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f56:	0f1b      	lsrs	r3, r3, #28
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f62:	617b      	str	r3, [r7, #20]
          break;
 8006f64:	e002      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]
          break;
 8006f6a:	bf00      	nop
        }
      }
      break;
 8006f6c:	e000      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006f6e:	bf00      	nop
    }
  }
  return frequency;
 8006f70:	697b      	ldr	r3, [r7, #20]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	40023800 	.word	0x40023800
 8006f84:	00bb8000 	.word	0x00bb8000
 8006f88:	00f42400 	.word	0x00f42400

08006f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e041      	b.n	8007022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fa fd14 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f000 fa7a 	bl	80074c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	d001      	beq.n	8007044 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e046      	b.n	80070d2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a23      	ldr	r2, [pc, #140]	@ (80070e0 <HAL_TIM_Base_Start+0xb4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d022      	beq.n	800709c <HAL_TIM_Base_Start+0x70>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705e:	d01d      	beq.n	800709c <HAL_TIM_Base_Start+0x70>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1f      	ldr	r2, [pc, #124]	@ (80070e4 <HAL_TIM_Base_Start+0xb8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d018      	beq.n	800709c <HAL_TIM_Base_Start+0x70>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1e      	ldr	r2, [pc, #120]	@ (80070e8 <HAL_TIM_Base_Start+0xbc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <HAL_TIM_Base_Start+0x70>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a1c      	ldr	r2, [pc, #112]	@ (80070ec <HAL_TIM_Base_Start+0xc0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00e      	beq.n	800709c <HAL_TIM_Base_Start+0x70>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a1b      	ldr	r2, [pc, #108]	@ (80070f0 <HAL_TIM_Base_Start+0xc4>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d009      	beq.n	800709c <HAL_TIM_Base_Start+0x70>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a19      	ldr	r2, [pc, #100]	@ (80070f4 <HAL_TIM_Base_Start+0xc8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_TIM_Base_Start+0x70>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a18      	ldr	r2, [pc, #96]	@ (80070f8 <HAL_TIM_Base_Start+0xcc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d111      	bne.n	80070c0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b06      	cmp	r3, #6
 80070ac:	d010      	beq.n	80070d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0201 	orr.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070be:	e007      	b.n	80070d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40010000 	.word	0x40010000
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40000800 	.word	0x40000800
 80070ec:	40000c00 	.word	0x40000c00
 80070f0:	40010400 	.word	0x40010400
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40001800 	.word	0x40001800

080070fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e041      	b.n	8007192 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d106      	bne.n	8007128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f839 	bl	800719a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3304      	adds	r3, #4
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f000 f9c2 	bl	80074c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
	...

080071b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d101      	bne.n	80071ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071ca:	2302      	movs	r3, #2
 80071cc:	e0ae      	b.n	800732c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2b0c      	cmp	r3, #12
 80071da:	f200 809f 	bhi.w	800731c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071de:	a201      	add	r2, pc, #4	@ (adr r2, 80071e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e4:	08007219 	.word	0x08007219
 80071e8:	0800731d 	.word	0x0800731d
 80071ec:	0800731d 	.word	0x0800731d
 80071f0:	0800731d 	.word	0x0800731d
 80071f4:	08007259 	.word	0x08007259
 80071f8:	0800731d 	.word	0x0800731d
 80071fc:	0800731d 	.word	0x0800731d
 8007200:	0800731d 	.word	0x0800731d
 8007204:	0800729b 	.word	0x0800729b
 8007208:	0800731d 	.word	0x0800731d
 800720c:	0800731d 	.word	0x0800731d
 8007210:	0800731d 	.word	0x0800731d
 8007214:	080072db 	.word	0x080072db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68b9      	ldr	r1, [r7, #8]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f9f6 	bl	8007610 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0208 	orr.w	r2, r2, #8
 8007232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 0204 	bic.w	r2, r2, #4
 8007242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6999      	ldr	r1, [r3, #24]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	691a      	ldr	r2, [r3, #16]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	619a      	str	r2, [r3, #24]
      break;
 8007256:	e064      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fa46 	bl	80076f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6999      	ldr	r1, [r3, #24]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	021a      	lsls	r2, r3, #8
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	619a      	str	r2, [r3, #24]
      break;
 8007298:	e043      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68b9      	ldr	r1, [r7, #8]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fa9b 	bl	80077dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0208 	orr.w	r2, r2, #8
 80072b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69da      	ldr	r2, [r3, #28]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0204 	bic.w	r2, r2, #4
 80072c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69d9      	ldr	r1, [r3, #28]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	691a      	ldr	r2, [r3, #16]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	61da      	str	r2, [r3, #28]
      break;
 80072d8:	e023      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 faef 	bl	80078c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69da      	ldr	r2, [r3, #28]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69d9      	ldr	r1, [r3, #28]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	021a      	lsls	r2, r3, #8
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	61da      	str	r2, [r3, #28]
      break;
 800731a:	e002      	b.n	8007322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	75fb      	strb	r3, [r7, #23]
      break;
 8007320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800732a:	7dfb      	ldrb	r3, [r7, #23]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d101      	bne.n	8007350 <HAL_TIM_ConfigClockSource+0x1c>
 800734c:	2302      	movs	r3, #2
 800734e:	e0b4      	b.n	80074ba <HAL_TIM_ConfigClockSource+0x186>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800736e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007388:	d03e      	beq.n	8007408 <HAL_TIM_ConfigClockSource+0xd4>
 800738a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800738e:	f200 8087 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007396:	f000 8086 	beq.w	80074a6 <HAL_TIM_ConfigClockSource+0x172>
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800739e:	d87f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b70      	cmp	r3, #112	@ 0x70
 80073a2:	d01a      	beq.n	80073da <HAL_TIM_ConfigClockSource+0xa6>
 80073a4:	2b70      	cmp	r3, #112	@ 0x70
 80073a6:	d87b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b60      	cmp	r3, #96	@ 0x60
 80073aa:	d050      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x11a>
 80073ac:	2b60      	cmp	r3, #96	@ 0x60
 80073ae:	d877      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b50      	cmp	r3, #80	@ 0x50
 80073b2:	d03c      	beq.n	800742e <HAL_TIM_ConfigClockSource+0xfa>
 80073b4:	2b50      	cmp	r3, #80	@ 0x50
 80073b6:	d873      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073b8:	2b40      	cmp	r3, #64	@ 0x40
 80073ba:	d058      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x13a>
 80073bc:	2b40      	cmp	r3, #64	@ 0x40
 80073be:	d86f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c0:	2b30      	cmp	r3, #48	@ 0x30
 80073c2:	d064      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073c4:	2b30      	cmp	r3, #48	@ 0x30
 80073c6:	d86b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d060      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d867      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d05c      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d05a      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x15a>
 80073d8:	e062      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073ea:	f000 fb3b 	bl	8007a64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	609a      	str	r2, [r3, #8]
      break;
 8007406:	e04f      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007418:	f000 fb24 	bl	8007a64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800742a:	609a      	str	r2, [r3, #8]
      break;
 800742c:	e03c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800743a:	461a      	mov	r2, r3
 800743c:	f000 fa98 	bl	8007970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2150      	movs	r1, #80	@ 0x50
 8007446:	4618      	mov	r0, r3
 8007448:	f000 faf1 	bl	8007a2e <TIM_ITRx_SetConfig>
      break;
 800744c:	e02c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800745a:	461a      	mov	r2, r3
 800745c:	f000 fab7 	bl	80079ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2160      	movs	r1, #96	@ 0x60
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fae1 	bl	8007a2e <TIM_ITRx_SetConfig>
      break;
 800746c:	e01c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800747a:	461a      	mov	r2, r3
 800747c:	f000 fa78 	bl	8007970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2140      	movs	r1, #64	@ 0x40
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fad1 	bl	8007a2e <TIM_ITRx_SetConfig>
      break;
 800748c:	e00c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f000 fac8 	bl	8007a2e <TIM_ITRx_SetConfig>
      break;
 800749e:	e003      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
      break;
 80074a4:	e000      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a43      	ldr	r2, [pc, #268]	@ (80075e4 <TIM_Base_SetConfig+0x120>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d013      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e2:	d00f      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a40      	ldr	r2, [pc, #256]	@ (80075e8 <TIM_Base_SetConfig+0x124>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d00b      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a3f      	ldr	r2, [pc, #252]	@ (80075ec <TIM_Base_SetConfig+0x128>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d007      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a3e      	ldr	r2, [pc, #248]	@ (80075f0 <TIM_Base_SetConfig+0x12c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d003      	beq.n	8007504 <TIM_Base_SetConfig+0x40>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a3d      	ldr	r2, [pc, #244]	@ (80075f4 <TIM_Base_SetConfig+0x130>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d108      	bne.n	8007516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800750a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a32      	ldr	r2, [pc, #200]	@ (80075e4 <TIM_Base_SetConfig+0x120>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d02b      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007524:	d027      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a2f      	ldr	r2, [pc, #188]	@ (80075e8 <TIM_Base_SetConfig+0x124>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d023      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a2e      	ldr	r2, [pc, #184]	@ (80075ec <TIM_Base_SetConfig+0x128>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d01f      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2d      	ldr	r2, [pc, #180]	@ (80075f0 <TIM_Base_SetConfig+0x12c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d01b      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a2c      	ldr	r2, [pc, #176]	@ (80075f4 <TIM_Base_SetConfig+0x130>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d017      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a2b      	ldr	r2, [pc, #172]	@ (80075f8 <TIM_Base_SetConfig+0x134>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d013      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a2a      	ldr	r2, [pc, #168]	@ (80075fc <TIM_Base_SetConfig+0x138>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d00f      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a29      	ldr	r2, [pc, #164]	@ (8007600 <TIM_Base_SetConfig+0x13c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00b      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a28      	ldr	r2, [pc, #160]	@ (8007604 <TIM_Base_SetConfig+0x140>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d007      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a27      	ldr	r2, [pc, #156]	@ (8007608 <TIM_Base_SetConfig+0x144>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a26      	ldr	r2, [pc, #152]	@ (800760c <TIM_Base_SetConfig+0x148>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d108      	bne.n	8007588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800757c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689a      	ldr	r2, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a0e      	ldr	r2, [pc, #56]	@ (80075e4 <TIM_Base_SetConfig+0x120>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d003      	beq.n	80075b6 <TIM_Base_SetConfig+0xf2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a10      	ldr	r2, [pc, #64]	@ (80075f4 <TIM_Base_SetConfig+0x130>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d103      	bne.n	80075be <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f043 0204 	orr.w	r2, r3, #4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	601a      	str	r2, [r3, #0]
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40010000 	.word	0x40010000
 80075e8:	40000400 	.word	0x40000400
 80075ec:	40000800 	.word	0x40000800
 80075f0:	40000c00 	.word	0x40000c00
 80075f4:	40010400 	.word	0x40010400
 80075f8:	40014000 	.word	0x40014000
 80075fc:	40014400 	.word	0x40014400
 8007600:	40014800 	.word	0x40014800
 8007604:	40001800 	.word	0x40001800
 8007608:	40001c00 	.word	0x40001c00
 800760c:	40002000 	.word	0x40002000

08007610 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	f023 0201 	bic.w	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800763e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0303 	bic.w	r3, r3, #3
 8007646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f023 0302 	bic.w	r3, r3, #2
 8007658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a20      	ldr	r2, [pc, #128]	@ (80076e8 <TIM_OC1_SetConfig+0xd8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d003      	beq.n	8007674 <TIM_OC1_SetConfig+0x64>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4a1f      	ldr	r2, [pc, #124]	@ (80076ec <TIM_OC1_SetConfig+0xdc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d10c      	bne.n	800768e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f023 0308 	bic.w	r3, r3, #8
 800767a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4313      	orrs	r3, r2
 8007684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f023 0304 	bic.w	r3, r3, #4
 800768c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a15      	ldr	r2, [pc, #84]	@ (80076e8 <TIM_OC1_SetConfig+0xd8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d003      	beq.n	800769e <TIM_OC1_SetConfig+0x8e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a14      	ldr	r2, [pc, #80]	@ (80076ec <TIM_OC1_SetConfig+0xdc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d111      	bne.n	80076c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	4313      	orrs	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	621a      	str	r2, [r3, #32]
}
 80076dc:	bf00      	nop
 80076de:	371c      	adds	r7, #28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	40010000 	.word	0x40010000
 80076ec:	40010400 	.word	0x40010400

080076f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	f023 0210 	bic.w	r2, r3, #16
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800771e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	021b      	lsls	r3, r3, #8
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f023 0320 	bic.w	r3, r3, #32
 800773a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a22      	ldr	r2, [pc, #136]	@ (80077d4 <TIM_OC2_SetConfig+0xe4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d003      	beq.n	8007758 <TIM_OC2_SetConfig+0x68>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a21      	ldr	r2, [pc, #132]	@ (80077d8 <TIM_OC2_SetConfig+0xe8>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d10d      	bne.n	8007774 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800775e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	011b      	lsls	r3, r3, #4
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007772:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a17      	ldr	r2, [pc, #92]	@ (80077d4 <TIM_OC2_SetConfig+0xe4>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d003      	beq.n	8007784 <TIM_OC2_SetConfig+0x94>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a16      	ldr	r2, [pc, #88]	@ (80077d8 <TIM_OC2_SetConfig+0xe8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d113      	bne.n	80077ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800778a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	4313      	orrs	r3, r2
 800779e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	621a      	str	r2, [r3, #32]
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	40010000 	.word	0x40010000
 80077d8:	40010400 	.word	0x40010400

080077dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800780a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0303 	bic.w	r3, r3, #3
 8007812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a21      	ldr	r2, [pc, #132]	@ (80078bc <TIM_OC3_SetConfig+0xe0>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d003      	beq.n	8007842 <TIM_OC3_SetConfig+0x66>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a20      	ldr	r2, [pc, #128]	@ (80078c0 <TIM_OC3_SetConfig+0xe4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d10d      	bne.n	800785e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	021b      	lsls	r3, r3, #8
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	4313      	orrs	r3, r2
 8007854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800785c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a16      	ldr	r2, [pc, #88]	@ (80078bc <TIM_OC3_SetConfig+0xe0>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d003      	beq.n	800786e <TIM_OC3_SetConfig+0x92>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a15      	ldr	r2, [pc, #84]	@ (80078c0 <TIM_OC3_SetConfig+0xe4>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d113      	bne.n	8007896 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800787c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4313      	orrs	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	011b      	lsls	r3, r3, #4
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	621a      	str	r2, [r3, #32]
}
 80078b0:	bf00      	nop
 80078b2:	371c      	adds	r7, #28
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	40010000 	.word	0x40010000
 80078c0:	40010400 	.word	0x40010400

080078c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
 80078d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	021b      	lsls	r3, r3, #8
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4313      	orrs	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800790e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	031b      	lsls	r3, r3, #12
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	4313      	orrs	r3, r2
 800791a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a12      	ldr	r2, [pc, #72]	@ (8007968 <TIM_OC4_SetConfig+0xa4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d003      	beq.n	800792c <TIM_OC4_SetConfig+0x68>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a11      	ldr	r2, [pc, #68]	@ (800796c <TIM_OC4_SetConfig+0xa8>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d109      	bne.n	8007940 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	019b      	lsls	r3, r3, #6
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	4313      	orrs	r3, r2
 800793e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	621a      	str	r2, [r3, #32]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40010000 	.word	0x40010000
 800796c:	40010400 	.word	0x40010400

08007970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f023 0201 	bic.w	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800799a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f023 030a 	bic.w	r3, r3, #10
 80079ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	621a      	str	r2, [r3, #32]
}
 80079c2:	bf00      	nop
 80079c4:	371c      	adds	r7, #28
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b087      	sub	sp, #28
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f023 0210 	bic.w	r2, r3, #16
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	031b      	lsls	r3, r3, #12
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007a0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	621a      	str	r2, [r3, #32]
}
 8007a22:	bf00      	nop
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a2e:	b480      	push	{r7}
 8007a30:	b085      	sub	sp, #20
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	f043 0307 	orr.w	r3, r3, #7
 8007a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	609a      	str	r2, [r3, #8]
}
 8007a58:	bf00      	nop
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	021a      	lsls	r2, r3, #8
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	431a      	orrs	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	609a      	str	r2, [r3, #8]
}
 8007a98:	bf00      	nop
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d101      	bne.n	8007abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e05a      	b.n	8007b72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a21      	ldr	r2, [pc, #132]	@ (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d022      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b08:	d01d      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d018      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a1b      	ldr	r2, [pc, #108]	@ (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a1a      	ldr	r2, [pc, #104]	@ (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d00e      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a18      	ldr	r2, [pc, #96]	@ (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d009      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a17      	ldr	r2, [pc, #92]	@ (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d004      	beq.n	8007b46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a15      	ldr	r2, [pc, #84]	@ (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d10c      	bne.n	8007b60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40000400 	.word	0x40000400
 8007b88:	40000800 	.word	0x40000800
 8007b8c:	40000c00 	.word	0x40000c00
 8007b90:	40010400 	.word	0x40010400
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40001800 	.word	0x40001800

08007b9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	f107 001c 	add.w	r0, r7, #28
 8007baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d123      	bne.n	8007bfe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007bca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007bde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d105      	bne.n	8007bf2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fae8 	bl	80091c8 <USB_CoreReset>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]
 8007bfc:	e01b      	b.n	8007c36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 fadc 	bl	80091c8 <USB_CoreReset>
 8007c10:	4603      	mov	r3, r0
 8007c12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c28:	e005      	b.n	8007c36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c36:	7fbb      	ldrb	r3, [r7, #30]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d10b      	bne.n	8007c54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f043 0206 	orr.w	r2, r3, #6
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f043 0220 	orr.w	r2, r3, #32
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c60:	b004      	add	sp, #16
 8007c62:	4770      	bx	lr

08007c64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d165      	bne.n	8007d44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4a41      	ldr	r2, [pc, #260]	@ (8007d80 <USB_SetTurnaroundTime+0x11c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d906      	bls.n	8007c8e <USB_SetTurnaroundTime+0x2a>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4a40      	ldr	r2, [pc, #256]	@ (8007d84 <USB_SetTurnaroundTime+0x120>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d202      	bcs.n	8007c8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c88:	230f      	movs	r3, #15
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	e062      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	4a3c      	ldr	r2, [pc, #240]	@ (8007d84 <USB_SetTurnaroundTime+0x120>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d306      	bcc.n	8007ca4 <USB_SetTurnaroundTime+0x40>
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	4a3b      	ldr	r2, [pc, #236]	@ (8007d88 <USB_SetTurnaroundTime+0x124>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d202      	bcs.n	8007ca4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c9e:	230e      	movs	r3, #14
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	e057      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4a38      	ldr	r2, [pc, #224]	@ (8007d88 <USB_SetTurnaroundTime+0x124>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d306      	bcc.n	8007cba <USB_SetTurnaroundTime+0x56>
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4a37      	ldr	r2, [pc, #220]	@ (8007d8c <USB_SetTurnaroundTime+0x128>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d202      	bcs.n	8007cba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007cb4:	230d      	movs	r3, #13
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	e04c      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	4a33      	ldr	r2, [pc, #204]	@ (8007d8c <USB_SetTurnaroundTime+0x128>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d306      	bcc.n	8007cd0 <USB_SetTurnaroundTime+0x6c>
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	4a32      	ldr	r2, [pc, #200]	@ (8007d90 <USB_SetTurnaroundTime+0x12c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d802      	bhi.n	8007cd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007cca:	230c      	movs	r3, #12
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e041      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4a2f      	ldr	r2, [pc, #188]	@ (8007d90 <USB_SetTurnaroundTime+0x12c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d906      	bls.n	8007ce6 <USB_SetTurnaroundTime+0x82>
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4a2e      	ldr	r2, [pc, #184]	@ (8007d94 <USB_SetTurnaroundTime+0x130>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d802      	bhi.n	8007ce6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007ce0:	230b      	movs	r3, #11
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	e036      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8007d94 <USB_SetTurnaroundTime+0x130>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d906      	bls.n	8007cfc <USB_SetTurnaroundTime+0x98>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	4a29      	ldr	r2, [pc, #164]	@ (8007d98 <USB_SetTurnaroundTime+0x134>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d802      	bhi.n	8007cfc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007cf6:	230a      	movs	r3, #10
 8007cf8:	617b      	str	r3, [r7, #20]
 8007cfa:	e02b      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4a26      	ldr	r2, [pc, #152]	@ (8007d98 <USB_SetTurnaroundTime+0x134>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d906      	bls.n	8007d12 <USB_SetTurnaroundTime+0xae>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4a25      	ldr	r2, [pc, #148]	@ (8007d9c <USB_SetTurnaroundTime+0x138>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d202      	bcs.n	8007d12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007d0c:	2309      	movs	r3, #9
 8007d0e:	617b      	str	r3, [r7, #20]
 8007d10:	e020      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	4a21      	ldr	r2, [pc, #132]	@ (8007d9c <USB_SetTurnaroundTime+0x138>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d306      	bcc.n	8007d28 <USB_SetTurnaroundTime+0xc4>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4a20      	ldr	r2, [pc, #128]	@ (8007da0 <USB_SetTurnaroundTime+0x13c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d802      	bhi.n	8007d28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007d22:	2308      	movs	r3, #8
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	e015      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8007da0 <USB_SetTurnaroundTime+0x13c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d906      	bls.n	8007d3e <USB_SetTurnaroundTime+0xda>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	4a1c      	ldr	r2, [pc, #112]	@ (8007da4 <USB_SetTurnaroundTime+0x140>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d202      	bcs.n	8007d3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007d38:	2307      	movs	r3, #7
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e00a      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007d3e:	2306      	movs	r3, #6
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	e007      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d102      	bne.n	8007d50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007d4a:	2309      	movs	r3, #9
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e001      	b.n	8007d54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007d50:	2309      	movs	r3, #9
 8007d52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	029b      	lsls	r3, r3, #10
 8007d68:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	371c      	adds	r7, #28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	00d8acbf 	.word	0x00d8acbf
 8007d84:	00e4e1c0 	.word	0x00e4e1c0
 8007d88:	00f42400 	.word	0x00f42400
 8007d8c:	01067380 	.word	0x01067380
 8007d90:	011a499f 	.word	0x011a499f
 8007d94:	01312cff 	.word	0x01312cff
 8007d98:	014ca43f 	.word	0x014ca43f
 8007d9c:	016e3600 	.word	0x016e3600
 8007da0:	01a6ab1f 	.word	0x01a6ab1f
 8007da4:	01e84800 	.word	0x01e84800

08007da8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	f043 0201 	orr.w	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f023 0201 	bic.w	r2, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d115      	bne.n	8007e3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e1a:	200a      	movs	r0, #10
 8007e1c:	f7f9 ff3c 	bl	8001c98 <HAL_Delay>
      ms += 10U;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	330a      	adds	r3, #10
 8007e24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 f93f 	bl	80090aa <USB_GetMode>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d01e      	beq.n	8007e70 <USB_SetCurrentMode+0x84>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e36:	d9f0      	bls.n	8007e1a <USB_SetCurrentMode+0x2e>
 8007e38:	e01a      	b.n	8007e70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e3a:	78fb      	ldrb	r3, [r7, #3]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d115      	bne.n	8007e6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e4c:	200a      	movs	r0, #10
 8007e4e:	f7f9 ff23 	bl	8001c98 <HAL_Delay>
      ms += 10U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	330a      	adds	r3, #10
 8007e56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 f926 	bl	80090aa <USB_GetMode>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <USB_SetCurrentMode+0x84>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e68:	d9f0      	bls.n	8007e4c <USB_SetCurrentMode+0x60>
 8007e6a:	e001      	b.n	8007e70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e005      	b.n	8007e7c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2bc8      	cmp	r3, #200	@ 0xc8
 8007e74:	d101      	bne.n	8007e7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e000      	b.n	8007e7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e84:	b084      	sub	sp, #16
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	e009      	b.n	8007eb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	3340      	adds	r3, #64	@ 0x40
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	2200      	movs	r2, #0
 8007eb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	613b      	str	r3, [r7, #16]
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	2b0e      	cmp	r3, #14
 8007ebc:	d9f2      	bls.n	8007ea4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ebe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d11c      	bne.n	8007f00 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ed4:	f043 0302 	orr.w	r3, r3, #2
 8007ed8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ede:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	639a      	str	r2, [r3, #56]	@ 0x38
 8007efe:	e00b      	b.n	8007f18 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f04:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f10:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f1e:	461a      	mov	r2, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d10d      	bne.n	8007f48 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d104      	bne.n	8007f3e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f34:	2100      	movs	r1, #0
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f968 	bl	800820c <USB_SetDevSpeed>
 8007f3c:	e008      	b.n	8007f50 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f3e:	2101      	movs	r1, #1
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f963 	bl	800820c <USB_SetDevSpeed>
 8007f46:	e003      	b.n	8007f50 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f48:	2103      	movs	r1, #3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f95e 	bl	800820c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f50:	2110      	movs	r1, #16
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f8fa 	bl	800814c <USB_FlushTxFifo>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f924 	bl	80081b0 <USB_FlushRxFifo>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f78:	461a      	mov	r2, r3
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f84:	461a      	mov	r2, r3
 8007f86:	2300      	movs	r3, #0
 8007f88:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f90:	461a      	mov	r2, r3
 8007f92:	2300      	movs	r3, #0
 8007f94:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f96:	2300      	movs	r3, #0
 8007f98:	613b      	str	r3, [r7, #16]
 8007f9a:	e043      	b.n	8008024 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fb2:	d118      	bne.n	8007fe6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007fcc:	6013      	str	r3, [r2, #0]
 8007fce:	e013      	b.n	8007ff8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	e008      	b.n	8007ff8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008004:	461a      	mov	r2, r3
 8008006:	2300      	movs	r3, #0
 8008008:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008016:	461a      	mov	r2, r3
 8008018:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800801c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	3301      	adds	r3, #1
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008028:	461a      	mov	r2, r3
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	4293      	cmp	r3, r2
 800802e:	d3b5      	bcc.n	8007f9c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]
 8008034:	e043      	b.n	80080be <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008048:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800804c:	d118      	bne.n	8008080 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008060:	461a      	mov	r2, r3
 8008062:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	e013      	b.n	8008092 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008076:	461a      	mov	r2, r3
 8008078:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	e008      	b.n	8008092 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808c:	461a      	mov	r2, r3
 800808e:	2300      	movs	r3, #0
 8008090:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809e:	461a      	mov	r2, r3
 80080a0:	2300      	movs	r3, #0
 80080a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	015a      	lsls	r2, r3, #5
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	4413      	add	r3, r2
 80080ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b0:	461a      	mov	r2, r3
 80080b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80080b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	3301      	adds	r3, #1
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80080c2:	461a      	mov	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d3b5      	bcc.n	8008036 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80080ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d105      	bne.n	8008100 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	f043 0210 	orr.w	r2, r3, #16
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	699a      	ldr	r2, [r3, #24]
 8008104:	4b10      	ldr	r3, [pc, #64]	@ (8008148 <USB_DevInit+0x2c4>)
 8008106:	4313      	orrs	r3, r2
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800810c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f043 0208 	orr.w	r2, r3, #8
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008120:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008124:	2b01      	cmp	r3, #1
 8008126:	d107      	bne.n	8008138 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008130:	f043 0304 	orr.w	r3, r3, #4
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008138:	7dfb      	ldrb	r3, [r7, #23]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008144:	b004      	add	sp, #16
 8008146:	4770      	bx	lr
 8008148:	803c3800 	.word	0x803c3800

0800814c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008166:	d901      	bls.n	800816c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e01b      	b.n	80081a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	daf2      	bge.n	800815a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	019b      	lsls	r3, r3, #6
 800817c:	f043 0220 	orr.w	r2, r3, #32
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008190:	d901      	bls.n	8008196 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e006      	b.n	80081a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b20      	cmp	r3, #32
 80081a0:	d0f0      	beq.n	8008184 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3301      	adds	r3, #1
 80081c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081c8:	d901      	bls.n	80081ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e018      	b.n	8008200 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	daf2      	bge.n	80081bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2210      	movs	r2, #16
 80081de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3301      	adds	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081ec:	d901      	bls.n	80081f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e006      	b.n	8008200 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0310 	and.w	r3, r3, #16
 80081fa:	2b10      	cmp	r3, #16
 80081fc:	d0f0      	beq.n	80081e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800822c:	4313      	orrs	r3, r2
 800822e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800823e:	b480      	push	{r7}
 8008240:	b087      	sub	sp, #28
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f003 0306 	and.w	r3, r3, #6
 8008256:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800825e:	2300      	movs	r3, #0
 8008260:	75fb      	strb	r3, [r7, #23]
 8008262:	e00a      	b.n	800827a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d002      	beq.n	8008270 <USB_GetDevSpeed+0x32>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b06      	cmp	r3, #6
 800826e:	d102      	bne.n	8008276 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008270:	2302      	movs	r3, #2
 8008272:	75fb      	strb	r3, [r7, #23]
 8008274:	e001      	b.n	800827a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008276:	230f      	movs	r3, #15
 8008278:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800827a:	7dfb      	ldrb	r3, [r7, #23]
}
 800827c:	4618      	mov	r0, r3
 800827e:	371c      	adds	r7, #28
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d13a      	bne.n	800831a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082aa:	69da      	ldr	r2, [r3, #28]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	f003 030f 	and.w	r3, r3, #15
 80082b4:	2101      	movs	r1, #1
 80082b6:	fa01 f303 	lsl.w	r3, r1, r3
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	68f9      	ldr	r1, [r7, #12]
 80082be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082c2:	4313      	orrs	r3, r2
 80082c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d155      	bne.n	8008388 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	791b      	ldrb	r3, [r3, #4]
 80082f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80082f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	059b      	lsls	r3, r3, #22
 80082fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008300:	4313      	orrs	r3, r2
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800830e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	e036      	b.n	8008388 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	2101      	movs	r1, #1
 800832c:	fa01 f303 	lsl.w	r3, r1, r3
 8008330:	041b      	lsls	r3, r3, #16
 8008332:	68f9      	ldr	r1, [r7, #12]
 8008334:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008338:	4313      	orrs	r3, r2
 800833a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d11a      	bne.n	8008388 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	791b      	ldrb	r3, [r3, #4]
 800836c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800836e:	430b      	orrs	r3, r1
 8008370:	4313      	orrs	r3, r2
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	0151      	lsls	r1, r2, #5
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	440a      	add	r2, r1
 800837a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800837e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008382:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008386:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
	...

08008398 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	785b      	ldrb	r3, [r3, #1]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d161      	bne.n	8008478 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083ca:	d11f      	bne.n	800840c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	0151      	lsls	r1, r2, #5
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	440a      	add	r2, r1
 80083e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80083ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	015a      	lsls	r2, r3, #5
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4413      	add	r3, r2
 80083f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	0151      	lsls	r1, r2, #5
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	440a      	add	r2, r1
 8008402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008406:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800840a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 030f 	and.w	r3, r3, #15
 800841c:	2101      	movs	r1, #1
 800841e:	fa01 f303 	lsl.w	r3, r1, r3
 8008422:	b29b      	uxth	r3, r3
 8008424:	43db      	mvns	r3, r3
 8008426:	68f9      	ldr	r1, [r7, #12]
 8008428:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800842c:	4013      	ands	r3, r2
 800842e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	2101      	movs	r1, #1
 8008442:	fa01 f303 	lsl.w	r3, r1, r3
 8008446:	b29b      	uxth	r3, r3
 8008448:	43db      	mvns	r3, r3
 800844a:	68f9      	ldr	r1, [r7, #12]
 800844c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008450:	4013      	ands	r3, r2
 8008452:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	015a      	lsls	r2, r3, #5
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4413      	add	r3, r2
 800845c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	0159      	lsls	r1, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	440b      	add	r3, r1
 800846a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800846e:	4619      	mov	r1, r3
 8008470:	4b35      	ldr	r3, [pc, #212]	@ (8008548 <USB_DeactivateEndpoint+0x1b0>)
 8008472:	4013      	ands	r3, r2
 8008474:	600b      	str	r3, [r1, #0]
 8008476:	e060      	b.n	800853a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800848a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800848e:	d11f      	bne.n	80084d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	0151      	lsls	r1, r2, #5
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	440a      	add	r2, r1
 80084a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	0151      	lsls	r1, r2, #5
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	440a      	add	r2, r1
 80084c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	f003 030f 	and.w	r3, r3, #15
 80084e0:	2101      	movs	r1, #1
 80084e2:	fa01 f303 	lsl.w	r3, r1, r3
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	43db      	mvns	r3, r3
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084f0:	4013      	ands	r3, r2
 80084f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084fa:	69da      	ldr	r2, [r3, #28]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	f003 030f 	and.w	r3, r3, #15
 8008504:	2101      	movs	r1, #1
 8008506:	fa01 f303 	lsl.w	r3, r1, r3
 800850a:	041b      	lsls	r3, r3, #16
 800850c:	43db      	mvns	r3, r3
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008514:	4013      	ands	r3, r2
 8008516:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	0159      	lsls	r1, r3, #5
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	440b      	add	r3, r1
 800852e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008532:	4619      	mov	r1, r3
 8008534:	4b05      	ldr	r3, [pc, #20]	@ (800854c <USB_DeactivateEndpoint+0x1b4>)
 8008536:	4013      	ands	r3, r2
 8008538:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	ec337800 	.word	0xec337800
 800854c:	eff37800 	.word	0xeff37800

08008550 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08a      	sub	sp, #40	@ 0x28
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	2b01      	cmp	r3, #1
 800856e:	f040 817f 	bne.w	8008870 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d132      	bne.n	80085e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	0151      	lsls	r1, r2, #5
 800858c:	69fa      	ldr	r2, [r7, #28]
 800858e:	440a      	add	r2, r1
 8008590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008594:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008598:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800859c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	0151      	lsls	r1, r2, #5
 80085b0:	69fa      	ldr	r2, [r7, #28]
 80085b2:	440a      	add	r2, r1
 80085b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	0151      	lsls	r1, r2, #5
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	440a      	add	r2, r1
 80085d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085d8:	0cdb      	lsrs	r3, r3, #19
 80085da:	04db      	lsls	r3, r3, #19
 80085dc:	6113      	str	r3, [r2, #16]
 80085de:	e097      	b.n	8008710 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	0151      	lsls	r1, r2, #5
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	440a      	add	r2, r1
 80085f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085fa:	0cdb      	lsrs	r3, r3, #19
 80085fc:	04db      	lsls	r3, r3, #19
 80085fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	0151      	lsls	r1, r2, #5
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	440a      	add	r2, r1
 8008616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800861a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800861e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008622:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d11a      	bne.n	8008660 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	691a      	ldr	r2, [r3, #16]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	429a      	cmp	r2, r3
 8008634:	d903      	bls.n	800863e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	69fa      	ldr	r2, [r7, #28]
 8008652:	440a      	add	r2, r1
 8008654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008658:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800865c:	6113      	str	r3, [r2, #16]
 800865e:	e044      	b.n	80086ea <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	691a      	ldr	r2, [r3, #16]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	4413      	add	r3, r2
 800866a:	1e5a      	subs	r2, r3, #1
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	fbb2 f3f3 	udiv	r3, r2, r3
 8008674:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	4413      	add	r3, r2
 800867e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008682:	691a      	ldr	r2, [r3, #16]
 8008684:	8afb      	ldrh	r3, [r7, #22]
 8008686:	04d9      	lsls	r1, r3, #19
 8008688:	4ba4      	ldr	r3, [pc, #656]	@ (800891c <USB_EPStartXfer+0x3cc>)
 800868a:	400b      	ands	r3, r1
 800868c:	69b9      	ldr	r1, [r7, #24]
 800868e:	0148      	lsls	r0, r1, #5
 8008690:	69f9      	ldr	r1, [r7, #28]
 8008692:	4401      	add	r1, r0
 8008694:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008698:	4313      	orrs	r3, r2
 800869a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	791b      	ldrb	r3, [r3, #4]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d122      	bne.n	80086ea <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	0151      	lsls	r1, r2, #5
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	440a      	add	r2, r1
 80086ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086be:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80086c2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086d0:	691a      	ldr	r2, [r3, #16]
 80086d2:	8afb      	ldrh	r3, [r7, #22]
 80086d4:	075b      	lsls	r3, r3, #29
 80086d6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80086da:	69b9      	ldr	r1, [r7, #24]
 80086dc:	0148      	lsls	r0, r1, #5
 80086de:	69f9      	ldr	r1, [r7, #28]
 80086e0:	4401      	add	r1, r0
 80086e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80086e6:	4313      	orrs	r3, r2
 80086e8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f6:	691a      	ldr	r2, [r3, #16]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008700:	69b9      	ldr	r1, [r7, #24]
 8008702:	0148      	lsls	r0, r1, #5
 8008704:	69f9      	ldr	r1, [r7, #28]
 8008706:	4401      	add	r1, r0
 8008708:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800870c:	4313      	orrs	r3, r2
 800870e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d14b      	bne.n	80087ae <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d009      	beq.n	8008732 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	4413      	add	r3, r2
 8008726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800872a:	461a      	mov	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	791b      	ldrb	r3, [r3, #4]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d128      	bne.n	800878c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008746:	2b00      	cmp	r3, #0
 8008748:	d110      	bne.n	800876c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	0151      	lsls	r1, r2, #5
 800875c:	69fa      	ldr	r2, [r7, #28]
 800875e:	440a      	add	r2, r1
 8008760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008764:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	e00f      	b.n	800878c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	015a      	lsls	r2, r3, #5
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	4413      	add	r3, r2
 8008774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	0151      	lsls	r1, r2, #5
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	440a      	add	r2, r1
 8008782:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800878a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	0151      	lsls	r1, r2, #5
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	440a      	add	r2, r1
 80087a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087a6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	e166      	b.n	8008a7c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	0151      	lsls	r1, r2, #5
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	440a      	add	r2, r1
 80087c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80087cc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	791b      	ldrb	r3, [r3, #4]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d015      	beq.n	8008802 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f000 814e 	beq.w	8008a7c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	2101      	movs	r1, #1
 80087f2:	fa01 f303 	lsl.w	r3, r1, r3
 80087f6:	69f9      	ldr	r1, [r7, #28]
 80087f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087fc:	4313      	orrs	r3, r2
 80087fe:	634b      	str	r3, [r1, #52]	@ 0x34
 8008800:	e13c      	b.n	8008a7c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800880e:	2b00      	cmp	r3, #0
 8008810:	d110      	bne.n	8008834 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	0151      	lsls	r1, r2, #5
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	440a      	add	r2, r1
 8008828:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800882c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	e00f      	b.n	8008854 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	4413      	add	r3, r2
 800883c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	69fa      	ldr	r2, [r7, #28]
 8008848:	440a      	add	r2, r1
 800884a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800884e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008852:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	68d9      	ldr	r1, [r3, #12]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	781a      	ldrb	r2, [r3, #0]
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	b298      	uxth	r0, r3
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	4603      	mov	r3, r0
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f9b9 	bl	8008be0 <USB_WritePacket>
 800886e:	e105      	b.n	8008a7c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	440a      	add	r2, r1
 8008886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800888a:	0cdb      	lsrs	r3, r3, #19
 800888c:	04db      	lsls	r3, r3, #19
 800888e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	69fa      	ldr	r2, [r7, #28]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80088ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80088b2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d132      	bne.n	8008920 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088e8:	69b9      	ldr	r1, [r7, #24]
 80088ea:	0148      	lsls	r0, r1, #5
 80088ec:	69f9      	ldr	r1, [r7, #28]
 80088ee:	4401      	add	r1, r0
 80088f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80088f4:	4313      	orrs	r3, r2
 80088f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	0151      	lsls	r1, r2, #5
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	440a      	add	r2, r1
 800890e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008912:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008916:	6113      	str	r3, [r2, #16]
 8008918:	e062      	b.n	80089e0 <USB_EPStartXfer+0x490>
 800891a:	bf00      	nop
 800891c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d123      	bne.n	8008970 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800893e:	69b9      	ldr	r1, [r7, #24]
 8008940:	0148      	lsls	r0, r1, #5
 8008942:	69f9      	ldr	r1, [r7, #28]
 8008944:	4401      	add	r1, r0
 8008946:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800894a:	4313      	orrs	r3, r2
 800894c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008968:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800896c:	6113      	str	r3, [r2, #16]
 800896e:	e037      	b.n	80089e0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	4413      	add	r3, r2
 800897a:	1e5a      	subs	r2, r3, #1
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	fbb2 f3f3 	udiv	r3, r2, r3
 8008984:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	8afa      	ldrh	r2, [r7, #22]
 800898c:	fb03 f202 	mul.w	r2, r3, r2
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a0:	691a      	ldr	r2, [r3, #16]
 80089a2:	8afb      	ldrh	r3, [r7, #22]
 80089a4:	04d9      	lsls	r1, r3, #19
 80089a6:	4b38      	ldr	r3, [pc, #224]	@ (8008a88 <USB_EPStartXfer+0x538>)
 80089a8:	400b      	ands	r3, r1
 80089aa:	69b9      	ldr	r1, [r7, #24]
 80089ac:	0148      	lsls	r0, r1, #5
 80089ae:	69f9      	ldr	r1, [r7, #28]
 80089b0:	4401      	add	r1, r0
 80089b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089b6:	4313      	orrs	r3, r2
 80089b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c6:	691a      	ldr	r2, [r3, #16]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089d0:	69b9      	ldr	r1, [r7, #24]
 80089d2:	0148      	lsls	r0, r1, #5
 80089d4:	69f9      	ldr	r1, [r7, #28]
 80089d6:	4401      	add	r1, r0
 80089d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80089dc:	4313      	orrs	r3, r2
 80089de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80089e0:	79fb      	ldrb	r3, [r7, #7]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d10d      	bne.n	8008a02 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d009      	beq.n	8008a02 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	68d9      	ldr	r1, [r3, #12]
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089fe:	460a      	mov	r2, r1
 8008a00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	791b      	ldrb	r3, [r3, #4]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d128      	bne.n	8008a5c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d110      	bne.n	8008a3c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	0151      	lsls	r1, r2, #5
 8008a2c:	69fa      	ldr	r2, [r7, #28]
 8008a2e:	440a      	add	r2, r1
 8008a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a38:	6013      	str	r3, [r2, #0]
 8008a3a:	e00f      	b.n	8008a5c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a3c:	69bb      	ldr	r3, [r7, #24]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	0151      	lsls	r1, r2, #5
 8008a4e:	69fa      	ldr	r2, [r7, #28]
 8008a50:	440a      	add	r2, r1
 8008a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	0151      	lsls	r1, r2, #5
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	440a      	add	r2, r1
 8008a72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008a7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3720      	adds	r7, #32
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	1ff80000 	.word	0x1ff80000

08008a8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d14a      	bne.n	8008b40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008abe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ac2:	f040 8086 	bne.w	8008bd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	7812      	ldrb	r2, [r2, #0]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ae4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ae8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	7812      	ldrb	r2, [r2, #0]
 8008afe:	0151      	lsls	r1, r2, #5
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	440a      	add	r2, r1
 8008b04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3301      	adds	r3, #1
 8008b12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d902      	bls.n	8008b24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	75fb      	strb	r3, [r7, #23]
          break;
 8008b22:	e056      	b.n	8008bd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b3c:	d0e7      	beq.n	8008b0e <USB_EPStopXfer+0x82>
 8008b3e:	e048      	b.n	8008bd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b58:	d13b      	bne.n	8008bd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	015a      	lsls	r2, r3, #5
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	4413      	add	r3, r2
 8008b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	7812      	ldrb	r2, [r2, #0]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	7812      	ldrb	r2, [r2, #0]
 8008b92:	0151      	lsls	r1, r2, #5
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	440a      	add	r2, r1
 8008b98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ba0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d902      	bls.n	8008bb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8008bb6:	e00c      	b.n	8008bd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bd0:	d0e7      	beq.n	8008ba2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	371c      	adds	r7, #28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b089      	sub	sp, #36	@ 0x24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4611      	mov	r1, r2
 8008bec:	461a      	mov	r2, r3
 8008bee:	460b      	mov	r3, r1
 8008bf0:	71fb      	strb	r3, [r7, #7]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008bfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d123      	bne.n	8008c4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008c06:	88bb      	ldrh	r3, [r7, #4]
 8008c08:	3303      	adds	r3, #3
 8008c0a:	089b      	lsrs	r3, r3, #2
 8008c0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61bb      	str	r3, [r7, #24]
 8008c12:	e018      	b.n	8008c46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008c14:	79fb      	ldrb	r3, [r7, #7]
 8008c16:	031a      	lsls	r2, r3, #12
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c20:	461a      	mov	r2, r3
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	3301      	adds	r3, #1
 8008c32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	3301      	adds	r3, #1
 8008c38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	3301      	adds	r3, #1
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d3e2      	bcc.n	8008c14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3724      	adds	r7, #36	@ 0x24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b08b      	sub	sp, #44	@ 0x2c
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	4613      	mov	r3, r2
 8008c68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	089b      	lsrs	r3, r3, #2
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c7a:	88fb      	ldrh	r3, [r7, #6]
 8008c7c:	f003 0303 	and.w	r3, r3, #3
 8008c80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c82:	2300      	movs	r3, #0
 8008c84:	623b      	str	r3, [r7, #32]
 8008c86:	e014      	b.n	8008cb2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c92:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c96:	3301      	adds	r3, #1
 8008c98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca8:	3301      	adds	r3, #1
 8008caa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	623b      	str	r3, [r7, #32]
 8008cb2:	6a3a      	ldr	r2, [r7, #32]
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d3e6      	bcc.n	8008c88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008cba:	8bfb      	ldrh	r3, [r7, #30]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d01e      	beq.n	8008cfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f107 0310 	add.w	r3, r7, #16
 8008cd0:	6812      	ldr	r2, [r2, #0]
 8008cd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	701a      	strb	r2, [r3, #0]
      i++;
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	623b      	str	r3, [r7, #32]
      pDest++;
 8008cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cee:	3301      	adds	r3, #1
 8008cf0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008cf2:	8bfb      	ldrh	r3, [r7, #30]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008cf8:	8bfb      	ldrh	r3, [r7, #30]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1ea      	bne.n	8008cd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	372c      	adds	r7, #44	@ 0x2c
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	785b      	ldrb	r3, [r3, #1]
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d12c      	bne.n	8008d82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	db12      	blt.n	8008d60 <USB_EPSetStall+0x54>
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00f      	beq.n	8008d60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	0151      	lsls	r1, r2, #5
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	440a      	add	r2, r1
 8008d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008d5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	0151      	lsls	r1, r2, #5
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	440a      	add	r2, r1
 8008d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	e02b      	b.n	8008dda <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	db12      	blt.n	8008dba <USB_EPSetStall+0xae>
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00f      	beq.n	8008dba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	0151      	lsls	r1, r2, #5
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	440a      	add	r2, r1
 8008db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008db4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008db8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	0151      	lsls	r1, r2, #5
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	440a      	add	r2, r1
 8008dd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008dd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	785b      	ldrb	r3, [r3, #1]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d128      	bne.n	8008e56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	440a      	add	r2, r1
 8008e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	791b      	ldrb	r3, [r3, #4]
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d003      	beq.n	8008e34 <USB_EPClearStall+0x4c>
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	791b      	ldrb	r3, [r3, #4]
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d138      	bne.n	8008ea6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	0151      	lsls	r1, r2, #5
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	440a      	add	r2, r1
 8008e4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	e027      	b.n	8008ea6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	0151      	lsls	r1, r2, #5
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008e74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	791b      	ldrb	r3, [r3, #4]
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d003      	beq.n	8008e86 <USB_EPClearStall+0x9e>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	791b      	ldrb	r3, [r3, #4]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d10f      	bne.n	8008ea6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	0151      	lsls	r1, r2, #5
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	440a      	add	r2, r1
 8008e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ea4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ed2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008ed6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008ee8:	68f9      	ldr	r1, [r7, #12]
 8008eea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f2e:	f023 0302 	bic.w	r3, r3, #2
 8008f32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f70:	f043 0302 	orr.w	r3, r3, #2
 8008f74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	4013      	ands	r3, r2
 8008f9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b085      	sub	sp, #20
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	0c1b      	lsrs	r3, r3, #16
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	4013      	ands	r3, r2
 8009000:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	b29b      	uxth	r3, r3
}
 8009006:	4618      	mov	r0, r3
 8009008:	3714      	adds	r7, #20
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	460b      	mov	r3, r1
 800901c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009022:	78fb      	ldrb	r3, [r7, #3]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	4013      	ands	r3, r2
 800903e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009040:	68bb      	ldr	r3, [r7, #8]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800904e:	b480      	push	{r7}
 8009050:	b087      	sub	sp, #28
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800906e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009070:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009072:	78fb      	ldrb	r3, [r7, #3]
 8009074:	f003 030f 	and.w	r3, r3, #15
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	fa22 f303 	lsr.w	r3, r2, r3
 800907e:	01db      	lsls	r3, r3, #7
 8009080:	b2db      	uxtb	r3, r3
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	4313      	orrs	r3, r2
 8009086:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	4013      	ands	r3, r2
 800909a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800909c:	68bb      	ldr	r3, [r7, #8]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	f003 0301 	and.w	r3, r3, #1
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80090e4:	f023 0307 	bic.w	r3, r3, #7
 80090e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80090fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	460b      	mov	r3, r1
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	333c      	adds	r3, #60	@ 0x3c
 8009122:	3304      	adds	r3, #4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	4a26      	ldr	r2, [pc, #152]	@ (80091c4 <USB_EP0_OutStart+0xb8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d90a      	bls.n	8009146 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800913c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009140:	d101      	bne.n	8009146 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	e037      	b.n	80091b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800914c:	461a      	mov	r2, r3
 800914e:	2300      	movs	r3, #0
 8009150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009160:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009174:	f043 0318 	orr.w	r3, r3, #24
 8009178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009188:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800918c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d10f      	bne.n	80091b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800919a:	461a      	mov	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80091b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	371c      	adds	r7, #28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	4f54300a 	.word	0x4f54300a

080091c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3301      	adds	r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091e0:	d901      	bls.n	80091e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e022      	b.n	800922c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	daf2      	bge.n	80091d4 <USB_CoreReset+0xc>

  count = 10U;
 80091ee:	230a      	movs	r3, #10
 80091f0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80091f2:	e002      	b.n	80091fa <USB_CoreReset+0x32>
  {
    count--;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1f9      	bne.n	80091f4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	f043 0201 	orr.w	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	3301      	adds	r3, #1
 8009210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009218:	d901      	bls.n	800921e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e006      	b.n	800922c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b01      	cmp	r3, #1
 8009228:	d0f0      	beq.n	800920c <USB_CoreReset+0x44>

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009244:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009248:	f002 fc56 	bl	800baf8 <USBD_static_malloc>
 800924c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	32b0      	adds	r2, #176	@ 0xb0
 800925e:	2100      	movs	r1, #0
 8009260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009264:	2302      	movs	r3, #2
 8009266:	e0d4      	b.n	8009412 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009268:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800926c:	2100      	movs	r1, #0
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f002 fca8 	bl	800bbc4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	32b0      	adds	r2, #176	@ 0xb0
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	32b0      	adds	r2, #176	@ 0xb0
 800928e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	7c1b      	ldrb	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d138      	bne.n	8009312 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80092a0:	4b5e      	ldr	r3, [pc, #376]	@ (800941c <USBD_CDC_Init+0x1e4>)
 80092a2:	7819      	ldrb	r1, [r3, #0]
 80092a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092a8:	2202      	movs	r2, #2
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f002 fb01 	bl	800b8b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80092b0:	4b5a      	ldr	r3, [pc, #360]	@ (800941c <USBD_CDC_Init+0x1e4>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	f003 020f 	and.w	r2, r3, #15
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	4613      	mov	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	440b      	add	r3, r1
 80092c4:	3323      	adds	r3, #35	@ 0x23
 80092c6:	2201      	movs	r2, #1
 80092c8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80092ca:	4b55      	ldr	r3, [pc, #340]	@ (8009420 <USBD_CDC_Init+0x1e8>)
 80092cc:	7819      	ldrb	r1, [r3, #0]
 80092ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092d2:	2202      	movs	r2, #2
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f002 faec 	bl	800b8b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80092da:	4b51      	ldr	r3, [pc, #324]	@ (8009420 <USBD_CDC_Init+0x1e8>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	f003 020f 	and.w	r2, r3, #15
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80092f2:	2201      	movs	r2, #1
 80092f4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80092f6:	4b4b      	ldr	r3, [pc, #300]	@ (8009424 <USBD_CDC_Init+0x1ec>)
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	f003 020f 	and.w	r2, r3, #15
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	4613      	mov	r3, r2
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	440b      	add	r3, r1
 800930a:	331c      	adds	r3, #28
 800930c:	2210      	movs	r2, #16
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	e035      	b.n	800937e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009312:	4b42      	ldr	r3, [pc, #264]	@ (800941c <USBD_CDC_Init+0x1e4>)
 8009314:	7819      	ldrb	r1, [r3, #0]
 8009316:	2340      	movs	r3, #64	@ 0x40
 8009318:	2202      	movs	r2, #2
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f002 fac9 	bl	800b8b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009320:	4b3e      	ldr	r3, [pc, #248]	@ (800941c <USBD_CDC_Init+0x1e4>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	f003 020f 	and.w	r2, r3, #15
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	440b      	add	r3, r1
 8009334:	3323      	adds	r3, #35	@ 0x23
 8009336:	2201      	movs	r2, #1
 8009338:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800933a:	4b39      	ldr	r3, [pc, #228]	@ (8009420 <USBD_CDC_Init+0x1e8>)
 800933c:	7819      	ldrb	r1, [r3, #0]
 800933e:	2340      	movs	r3, #64	@ 0x40
 8009340:	2202      	movs	r2, #2
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f002 fab5 	bl	800b8b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009348:	4b35      	ldr	r3, [pc, #212]	@ (8009420 <USBD_CDC_Init+0x1e8>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009360:	2201      	movs	r2, #1
 8009362:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009364:	4b2f      	ldr	r3, [pc, #188]	@ (8009424 <USBD_CDC_Init+0x1ec>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 020f 	and.w	r2, r3, #15
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	331c      	adds	r3, #28
 800937a:	2210      	movs	r2, #16
 800937c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800937e:	4b29      	ldr	r3, [pc, #164]	@ (8009424 <USBD_CDC_Init+0x1ec>)
 8009380:	7819      	ldrb	r1, [r3, #0]
 8009382:	2308      	movs	r3, #8
 8009384:	2203      	movs	r2, #3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f002 fa93 	bl	800b8b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800938c:	4b25      	ldr	r3, [pc, #148]	@ (8009424 <USBD_CDC_Init+0x1ec>)
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	f003 020f 	and.w	r2, r3, #15
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	4613      	mov	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	440b      	add	r3, r1
 80093a0:	3323      	adds	r3, #35	@ 0x23
 80093a2:	2201      	movs	r2, #1
 80093a4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	33b0      	adds	r3, #176	@ 0xb0
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80093dc:	2302      	movs	r3, #2
 80093de:	e018      	b.n	8009412 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	7c1b      	ldrb	r3, [r3, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009420 <USBD_CDC_Init+0x1e8>)
 80093ea:	7819      	ldrb	r1, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f002 fb4a 	bl	800ba90 <USBD_LL_PrepareReceive>
 80093fc:	e008      	b.n	8009410 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093fe:	4b08      	ldr	r3, [pc, #32]	@ (8009420 <USBD_CDC_Init+0x1e8>)
 8009400:	7819      	ldrb	r1, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009408:	2340      	movs	r3, #64	@ 0x40
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f002 fb40 	bl	800ba90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20000097 	.word	0x20000097
 8009420:	20000098 	.word	0x20000098
 8009424:	20000099 	.word	0x20000099

08009428 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009434:	4b3a      	ldr	r3, [pc, #232]	@ (8009520 <USBD_CDC_DeInit+0xf8>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f002 fa5f 	bl	800b8fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009440:	4b37      	ldr	r3, [pc, #220]	@ (8009520 <USBD_CDC_DeInit+0xf8>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	f003 020f 	and.w	r2, r3, #15
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	440b      	add	r3, r1
 8009454:	3323      	adds	r3, #35	@ 0x23
 8009456:	2200      	movs	r2, #0
 8009458:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800945a:	4b32      	ldr	r3, [pc, #200]	@ (8009524 <USBD_CDC_DeInit+0xfc>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f002 fa4c 	bl	800b8fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009466:	4b2f      	ldr	r3, [pc, #188]	@ (8009524 <USBD_CDC_DeInit+0xfc>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	f003 020f 	and.w	r2, r3, #15
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800947e:	2200      	movs	r2, #0
 8009480:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009482:	4b29      	ldr	r3, [pc, #164]	@ (8009528 <USBD_CDC_DeInit+0x100>)
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f002 fa38 	bl	800b8fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800948e:	4b26      	ldr	r3, [pc, #152]	@ (8009528 <USBD_CDC_DeInit+0x100>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	f003 020f 	and.w	r2, r3, #15
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	4613      	mov	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	440b      	add	r3, r1
 80094a2:	3323      	adds	r3, #35	@ 0x23
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80094a8:	4b1f      	ldr	r3, [pc, #124]	@ (8009528 <USBD_CDC_DeInit+0x100>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f003 020f 	and.w	r2, r3, #15
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	331c      	adds	r3, #28
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	32b0      	adds	r2, #176	@ 0xb0
 80094cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d01f      	beq.n	8009514 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	33b0      	adds	r3, #176	@ 0xb0
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32b0      	adds	r2, #176	@ 0xb0
 80094f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f002 fb0c 	bl	800bb14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	32b0      	adds	r2, #176	@ 0xb0
 8009506:	2100      	movs	r1, #0
 8009508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	20000097 	.word	0x20000097
 8009524:	20000098 	.word	0x20000098
 8009528:	20000099 	.word	0x20000099

0800952c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	32b0      	adds	r2, #176	@ 0xb0
 8009540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009544:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d101      	bne.n	800955c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009558:	2303      	movs	r3, #3
 800955a:	e0bf      	b.n	80096dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009564:	2b00      	cmp	r3, #0
 8009566:	d050      	beq.n	800960a <USBD_CDC_Setup+0xde>
 8009568:	2b20      	cmp	r3, #32
 800956a:	f040 80af 	bne.w	80096cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	88db      	ldrh	r3, [r3, #6]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d03a      	beq.n	80095ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	b25b      	sxtb	r3, r3
 800957c:	2b00      	cmp	r3, #0
 800957e:	da1b      	bge.n	80095b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	33b0      	adds	r3, #176	@ 0xb0
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009596:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	88d2      	ldrh	r2, [r2, #6]
 800959c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	88db      	ldrh	r3, [r3, #6]
 80095a2:	2b07      	cmp	r3, #7
 80095a4:	bf28      	it	cs
 80095a6:	2307      	movcs	r3, #7
 80095a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	89fa      	ldrh	r2, [r7, #14]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f001 fd69 	bl	800b088 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80095b6:	e090      	b.n	80096da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	785a      	ldrb	r2, [r3, #1]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	88db      	ldrh	r3, [r3, #6]
 80095c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80095c8:	d803      	bhi.n	80095d2 <USBD_CDC_Setup+0xa6>
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	88db      	ldrh	r3, [r3, #6]
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	e000      	b.n	80095d4 <USBD_CDC_Setup+0xa8>
 80095d2:	2240      	movs	r2, #64	@ 0x40
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80095da:	6939      	ldr	r1, [r7, #16]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80095e2:	461a      	mov	r2, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f001 fd7e 	bl	800b0e6 <USBD_CtlPrepareRx>
      break;
 80095ea:	e076      	b.n	80096da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	33b0      	adds	r3, #176	@ 0xb0
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	7850      	ldrb	r0, [r2, #1]
 8009602:	2200      	movs	r2, #0
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	4798      	blx	r3
      break;
 8009608:	e067      	b.n	80096da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	785b      	ldrb	r3, [r3, #1]
 800960e:	2b0b      	cmp	r3, #11
 8009610:	d851      	bhi.n	80096b6 <USBD_CDC_Setup+0x18a>
 8009612:	a201      	add	r2, pc, #4	@ (adr r2, 8009618 <USBD_CDC_Setup+0xec>)
 8009614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009618:	08009649 	.word	0x08009649
 800961c:	080096c5 	.word	0x080096c5
 8009620:	080096b7 	.word	0x080096b7
 8009624:	080096b7 	.word	0x080096b7
 8009628:	080096b7 	.word	0x080096b7
 800962c:	080096b7 	.word	0x080096b7
 8009630:	080096b7 	.word	0x080096b7
 8009634:	080096b7 	.word	0x080096b7
 8009638:	080096b7 	.word	0x080096b7
 800963c:	080096b7 	.word	0x080096b7
 8009640:	08009673 	.word	0x08009673
 8009644:	0800969d 	.word	0x0800969d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800964e:	b2db      	uxtb	r3, r3
 8009650:	2b03      	cmp	r3, #3
 8009652:	d107      	bne.n	8009664 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009654:	f107 030a 	add.w	r3, r7, #10
 8009658:	2202      	movs	r2, #2
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 fd13 	bl	800b088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009662:	e032      	b.n	80096ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 fc91 	bl	800af8e <USBD_CtlError>
            ret = USBD_FAIL;
 800966c:	2303      	movs	r3, #3
 800966e:	75fb      	strb	r3, [r7, #23]
          break;
 8009670:	e02b      	b.n	80096ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b03      	cmp	r3, #3
 800967c:	d107      	bne.n	800968e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800967e:	f107 030d 	add.w	r3, r7, #13
 8009682:	2201      	movs	r2, #1
 8009684:	4619      	mov	r1, r3
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f001 fcfe 	bl	800b088 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800968c:	e01d      	b.n	80096ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800968e:	6839      	ldr	r1, [r7, #0]
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f001 fc7c 	bl	800af8e <USBD_CtlError>
            ret = USBD_FAIL;
 8009696:	2303      	movs	r3, #3
 8009698:	75fb      	strb	r3, [r7, #23]
          break;
 800969a:	e016      	b.n	80096ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d00f      	beq.n	80096c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f001 fc6f 	bl	800af8e <USBD_CtlError>
            ret = USBD_FAIL;
 80096b0:	2303      	movs	r3, #3
 80096b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096b4:	e008      	b.n	80096c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80096b6:	6839      	ldr	r1, [r7, #0]
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f001 fc68 	bl	800af8e <USBD_CtlError>
          ret = USBD_FAIL;
 80096be:	2303      	movs	r3, #3
 80096c0:	75fb      	strb	r3, [r7, #23]
          break;
 80096c2:	e002      	b.n	80096ca <USBD_CDC_Setup+0x19e>
          break;
 80096c4:	bf00      	nop
 80096c6:	e008      	b.n	80096da <USBD_CDC_Setup+0x1ae>
          break;
 80096c8:	bf00      	nop
      }
      break;
 80096ca:	e006      	b.n	80096da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f001 fc5d 	bl	800af8e <USBD_CtlError>
      ret = USBD_FAIL;
 80096d4:	2303      	movs	r3, #3
 80096d6:	75fb      	strb	r3, [r7, #23]
      break;
 80096d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80096da:	7dfb      	ldrb	r3, [r7, #23]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	32b0      	adds	r2, #176	@ 0xb0
 8009702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d101      	bne.n	800970e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800970a:	2303      	movs	r3, #3
 800970c:	e065      	b.n	80097da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	32b0      	adds	r2, #176	@ 0xb0
 8009718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	f003 020f 	and.w	r2, r3, #15
 8009724:	6879      	ldr	r1, [r7, #4]
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	440b      	add	r3, r1
 8009730:	3314      	adds	r3, #20
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d02f      	beq.n	8009798 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	f003 020f 	and.w	r2, r3, #15
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	440b      	add	r3, r1
 800974a:	3314      	adds	r3, #20
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	78fb      	ldrb	r3, [r7, #3]
 8009750:	f003 010f 	and.w	r1, r3, #15
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	460b      	mov	r3, r1
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	440b      	add	r3, r1
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4403      	add	r3, r0
 8009760:	331c      	adds	r3, #28
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	fbb2 f1f3 	udiv	r1, r2, r3
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800976e:	2b00      	cmp	r3, #0
 8009770:	d112      	bne.n	8009798 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009772:	78fb      	ldrb	r3, [r7, #3]
 8009774:	f003 020f 	and.w	r2, r3, #15
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	4613      	mov	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	440b      	add	r3, r1
 8009784:	3314      	adds	r3, #20
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800978a:	78f9      	ldrb	r1, [r7, #3]
 800978c:	2300      	movs	r3, #0
 800978e:	2200      	movs	r2, #0
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f002 f95c 	bl	800ba4e <USBD_LL_Transmit>
 8009796:	e01f      	b.n	80097d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2200      	movs	r2, #0
 800979c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	33b0      	adds	r3, #176	@ 0xb0
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d010      	beq.n	80097d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	33b0      	adds	r3, #176	@ 0xb0
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80097d4:	78fa      	ldrb	r2, [r7, #3]
 80097d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	460b      	mov	r3, r1
 80097ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	32b0      	adds	r2, #176	@ 0xb0
 80097f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	32b0      	adds	r2, #176	@ 0xb0
 8009808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009810:	2303      	movs	r3, #3
 8009812:	e01a      	b.n	800984a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f002 f95a 	bl	800bad2 <USBD_LL_GetRxDataSize>
 800981e:	4602      	mov	r2, r0
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	33b0      	adds	r3, #176	@ 0xb0
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009844:	4611      	mov	r1, r2
 8009846:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	32b0      	adds	r2, #176	@ 0xb0
 8009864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009868:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009870:	2303      	movs	r3, #3
 8009872:	e024      	b.n	80098be <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	33b0      	adds	r3, #176	@ 0xb0
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d019      	beq.n	80098bc <USBD_CDC_EP0_RxReady+0x6a>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800988e:	2bff      	cmp	r3, #255	@ 0xff
 8009890:	d014      	beq.n	80098bc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	33b0      	adds	r3, #176	@ 0xb0
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80098aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80098b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	22ff      	movs	r2, #255	@ 0xff
 80098b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80098d0:	2182      	movs	r1, #130	@ 0x82
 80098d2:	4818      	ldr	r0, [pc, #96]	@ (8009934 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098d4:	f000 fd22 	bl	800a31c <USBD_GetEpDesc>
 80098d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80098da:	2101      	movs	r1, #1
 80098dc:	4815      	ldr	r0, [pc, #84]	@ (8009934 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098de:	f000 fd1d 	bl	800a31c <USBD_GetEpDesc>
 80098e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80098e4:	2181      	movs	r1, #129	@ 0x81
 80098e6:	4813      	ldr	r0, [pc, #76]	@ (8009934 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80098e8:	f000 fd18 	bl	800a31c <USBD_GetEpDesc>
 80098ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2210      	movs	r2, #16
 80098f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d006      	beq.n	800990e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	2200      	movs	r2, #0
 8009904:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009908:	711a      	strb	r2, [r3, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d006      	beq.n	8009922 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800991c:	711a      	strb	r2, [r3, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2243      	movs	r2, #67	@ 0x43
 8009926:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009928:	4b02      	ldr	r3, [pc, #8]	@ (8009934 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20000054 	.word	0x20000054

08009938 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009940:	2182      	movs	r1, #130	@ 0x82
 8009942:	4818      	ldr	r0, [pc, #96]	@ (80099a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009944:	f000 fcea 	bl	800a31c <USBD_GetEpDesc>
 8009948:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800994a:	2101      	movs	r1, #1
 800994c:	4815      	ldr	r0, [pc, #84]	@ (80099a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800994e:	f000 fce5 	bl	800a31c <USBD_GetEpDesc>
 8009952:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009954:	2181      	movs	r1, #129	@ 0x81
 8009956:	4813      	ldr	r0, [pc, #76]	@ (80099a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009958:	f000 fce0 	bl	800a31c <USBD_GetEpDesc>
 800995c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2210      	movs	r2, #16
 8009968:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d006      	beq.n	800997e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	2200      	movs	r2, #0
 8009974:	711a      	strb	r2, [r3, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f042 0202 	orr.w	r2, r2, #2
 800997c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d006      	beq.n	8009992 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	711a      	strb	r2, [r3, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f042 0202 	orr.w	r2, r2, #2
 8009990:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2243      	movs	r2, #67	@ 0x43
 8009996:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009998:	4b02      	ldr	r3, [pc, #8]	@ (80099a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800999a:	4618      	mov	r0, r3
 800999c:	3718      	adds	r7, #24
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20000054 	.word	0x20000054

080099a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099b0:	2182      	movs	r1, #130	@ 0x82
 80099b2:	4818      	ldr	r0, [pc, #96]	@ (8009a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099b4:	f000 fcb2 	bl	800a31c <USBD_GetEpDesc>
 80099b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099ba:	2101      	movs	r1, #1
 80099bc:	4815      	ldr	r0, [pc, #84]	@ (8009a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099be:	f000 fcad 	bl	800a31c <USBD_GetEpDesc>
 80099c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099c4:	2181      	movs	r1, #129	@ 0x81
 80099c6:	4813      	ldr	r0, [pc, #76]	@ (8009a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80099c8:	f000 fca8 	bl	800a31c <USBD_GetEpDesc>
 80099cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	2210      	movs	r2, #16
 80099d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d006      	beq.n	80099ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099e8:	711a      	strb	r2, [r3, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d006      	beq.n	8009a02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099fc:	711a      	strb	r2, [r3, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2243      	movs	r2, #67	@ 0x43
 8009a06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a08:	4b02      	ldr	r3, [pc, #8]	@ (8009a14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20000054 	.word	0x20000054

08009a18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	220a      	movs	r2, #10
 8009a24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009a26:	4b03      	ldr	r3, [pc, #12]	@ (8009a34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	20000010 	.word	0x20000010

08009a38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e009      	b.n	8009a60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	33b0      	adds	r3, #176	@ 0xb0
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	32b0      	adds	r2, #176	@ 0xb0
 8009a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e008      	b.n	8009aa4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	371c      	adds	r7, #28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	32b0      	adds	r2, #176	@ 0xb0
 8009ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d101      	bne.n	8009ad4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e004      	b.n	8009ade <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
	...

08009aec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	32b0      	adds	r2, #176	@ 0xb0
 8009afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	32b0      	adds	r2, #176	@ 0xb0
 8009b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e018      	b.n	8009b4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	7c1b      	ldrb	r3, [r3, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10a      	bne.n	8009b38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b22:	4b0c      	ldr	r3, [pc, #48]	@ (8009b54 <USBD_CDC_ReceivePacket+0x68>)
 8009b24:	7819      	ldrb	r1, [r3, #0]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 ffad 	bl	800ba90 <USBD_LL_PrepareReceive>
 8009b36:	e008      	b.n	8009b4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b38:	4b06      	ldr	r3, [pc, #24]	@ (8009b54 <USBD_CDC_ReceivePacket+0x68>)
 8009b3a:	7819      	ldrb	r1, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b42:	2340      	movs	r3, #64	@ 0x40
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f001 ffa3 	bl	800ba90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3710      	adds	r7, #16
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	20000098 	.word	0x20000098

08009b58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	4613      	mov	r3, r2
 8009b64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d101      	bne.n	8009b70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e01f      	b.n	8009bb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	79fa      	ldrb	r2, [r7, #7]
 8009ba2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f001 fe1d 	bl	800b7e4 <USBD_LL_Init>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3718      	adds	r7, #24
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e025      	b.n	8009c1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	32ae      	adds	r2, #174	@ 0xae
 8009be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00f      	beq.n	8009c0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	32ae      	adds	r2, #174	@ 0xae
 8009bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfc:	f107 020e 	add.w	r2, r7, #14
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
 8009c04:	4602      	mov	r2, r0
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 fe25 	bl	800b87c <USBD_LL_Start>
 8009c32:	4603      	mov	r3, r0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	370c      	adds	r7, #12
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d009      	beq.n	8009c80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	78fa      	ldrb	r2, [r7, #3]
 8009c76:	4611      	mov	r1, r2
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	4798      	blx	r3
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	460b      	mov	r3, r1
 8009c94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	78fa      	ldrb	r2, [r7, #3]
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 f922 	bl	800af1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009cf2:	f003 031f 	and.w	r3, r3, #31
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d01a      	beq.n	8009d30 <USBD_LL_SetupStage+0x72>
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d822      	bhi.n	8009d44 <USBD_LL_SetupStage+0x86>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <USBD_LL_SetupStage+0x4a>
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d00a      	beq.n	8009d1c <USBD_LL_SetupStage+0x5e>
 8009d06:	e01d      	b.n	8009d44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fb77 	bl	800a404 <USBD_StdDevReq>
 8009d16:	4603      	mov	r3, r0
 8009d18:	73fb      	strb	r3, [r7, #15]
      break;
 8009d1a:	e020      	b.n	8009d5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fbdf 	bl	800a4e8 <USBD_StdItfReq>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009d2e:	e016      	b.n	8009d5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fc41 	bl	800a5c0 <USBD_StdEPReq>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]
      break;
 8009d42:	e00c      	b.n	8009d5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009d4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 fdf2 	bl	800b93c <USBD_LL_StallEP>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d5c:	bf00      	nop
  }

  return ret;
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	460b      	mov	r3, r1
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d177      	bne.n	8009e70 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009d86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	f040 80a1 	bne.w	8009ed6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	8992      	ldrh	r2, [r2, #12]
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d91c      	bls.n	8009dda <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	8992      	ldrh	r2, [r2, #12]
 8009da8:	1a9a      	subs	r2, r3, r2
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	8992      	ldrh	r2, [r2, #12]
 8009db6:	441a      	add	r2, r3
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6919      	ldr	r1, [r3, #16]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	899b      	ldrh	r3, [r3, #12]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	bf38      	it	cc
 8009dce:	4613      	movcc	r3, r2
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f001 f9a8 	bl	800b128 <USBD_CtlContinueRx>
 8009dd8:	e07d      	b.n	8009ed6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009de0:	f003 031f 	and.w	r3, r3, #31
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d014      	beq.n	8009e12 <USBD_LL_DataOutStage+0xaa>
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d81d      	bhi.n	8009e28 <USBD_LL_DataOutStage+0xc0>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <USBD_LL_DataOutStage+0x8e>
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d003      	beq.n	8009dfc <USBD_LL_DataOutStage+0x94>
 8009df4:	e018      	b.n	8009e28 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	75bb      	strb	r3, [r7, #22]
            break;
 8009dfa:	e018      	b.n	8009e2e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	4619      	mov	r1, r3
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 fa6e 	bl	800a2e8 <USBD_CoreFindIF>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	75bb      	strb	r3, [r7, #22]
            break;
 8009e10:	e00d      	b.n	8009e2e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fa70 	bl	800a302 <USBD_CoreFindEP>
 8009e22:	4603      	mov	r3, r0
 8009e24:	75bb      	strb	r3, [r7, #22]
            break;
 8009e26:	e002      	b.n	8009e2e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	75bb      	strb	r3, [r7, #22]
            break;
 8009e2c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009e2e:	7dbb      	ldrb	r3, [r7, #22]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d119      	bne.n	8009e68 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d113      	bne.n	8009e68 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009e40:	7dba      	ldrb	r2, [r7, #22]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	32ae      	adds	r2, #174	@ 0xae
 8009e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8009e50:	7dba      	ldrb	r2, [r7, #22]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009e58:	7dba      	ldrb	r2, [r7, #22]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	32ae      	adds	r2, #174	@ 0xae
 8009e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f001 f96e 	bl	800b14a <USBD_CtlSendStatus>
 8009e6e:	e032      	b.n	8009ed6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009e70:	7afb      	ldrb	r3, [r7, #11]
 8009e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	4619      	mov	r1, r3
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 fa41 	bl	800a302 <USBD_CoreFindEP>
 8009e80:	4603      	mov	r3, r0
 8009e82:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e84:	7dbb      	ldrb	r3, [r7, #22]
 8009e86:	2bff      	cmp	r3, #255	@ 0xff
 8009e88:	d025      	beq.n	8009ed6 <USBD_LL_DataOutStage+0x16e>
 8009e8a:	7dbb      	ldrb	r3, [r7, #22]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d122      	bne.n	8009ed6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d117      	bne.n	8009ecc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009e9c:	7dba      	ldrb	r2, [r7, #22]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	32ae      	adds	r2, #174	@ 0xae
 8009ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00f      	beq.n	8009ecc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8009eac:	7dba      	ldrb	r2, [r7, #22]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009eb4:	7dba      	ldrb	r2, [r7, #22]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	32ae      	adds	r2, #174	@ 0xae
 8009eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	7afa      	ldrb	r2, [r7, #11]
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	4798      	blx	r3
 8009ec8:	4603      	mov	r3, r0
 8009eca:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8009ed2:	7dfb      	ldrb	r3, [r7, #23]
 8009ed4:	e000      	b.n	8009ed8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	607a      	str	r2, [r7, #4]
 8009eec:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009eee:	7afb      	ldrb	r3, [r7, #11]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d178      	bne.n	8009fe6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3314      	adds	r3, #20
 8009ef8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d163      	bne.n	8009fcc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	8992      	ldrh	r2, [r2, #12]
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d91c      	bls.n	8009f4a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	8992      	ldrh	r2, [r2, #12]
 8009f18:	1a9a      	subs	r2, r3, r2
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	8992      	ldrh	r2, [r2, #12]
 8009f26:	441a      	add	r2, r3
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	6919      	ldr	r1, [r3, #16]
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	461a      	mov	r2, r3
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f001 f8c4 	bl	800b0c4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2100      	movs	r1, #0
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f001 fda4 	bl	800ba90 <USBD_LL_PrepareReceive>
 8009f48:	e040      	b.n	8009fcc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	899b      	ldrh	r3, [r3, #12]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d11c      	bne.n	8009f92 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d316      	bcc.n	8009f92 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d20f      	bcs.n	8009f92 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f72:	2200      	movs	r2, #0
 8009f74:	2100      	movs	r1, #0
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f001 f8a4 	bl	800b0c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f84:	2300      	movs	r3, #0
 8009f86:	2200      	movs	r2, #0
 8009f88:	2100      	movs	r1, #0
 8009f8a:	68f8      	ldr	r0, [r7, #12]
 8009f8c:	f001 fd80 	bl	800ba90 <USBD_LL_PrepareReceive>
 8009f90:	e01c      	b.n	8009fcc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d10f      	bne.n	8009fbe <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d009      	beq.n	8009fbe <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fbe:	2180      	movs	r1, #128	@ 0x80
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f001 fcbb 	bl	800b93c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f001 f8d2 	bl	800b170 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d03a      	beq.n	800a04c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff fe30 	bl	8009c3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009fe4:	e032      	b.n	800a04c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	4619      	mov	r1, r3
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f986 	bl	800a302 <USBD_CoreFindEP>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	2bff      	cmp	r3, #255	@ 0xff
 8009ffe:	d025      	beq.n	800a04c <USBD_LL_DataInStage+0x16c>
 800a000:	7dfb      	ldrb	r3, [r7, #23]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d122      	bne.n	800a04c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d11c      	bne.n	800a04c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a012:	7dfa      	ldrb	r2, [r7, #23]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	32ae      	adds	r2, #174	@ 0xae
 800a018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d014      	beq.n	800a04c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a022:	7dfa      	ldrb	r2, [r7, #23]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a02a:	7dfa      	ldrb	r2, [r7, #23]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	32ae      	adds	r2, #174	@ 0xae
 800a030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	7afa      	ldrb	r2, [r7, #11]
 800a038:	4611      	mov	r1, r2
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	4798      	blx	r3
 800a03e:	4603      	mov	r3, r0
 800a040:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a042:	7dbb      	ldrb	r3, [r7, #22]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a048:	7dbb      	ldrb	r3, [r7, #22]
 800a04a:	e000      	b.n	800a04e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d014      	beq.n	800a0bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00e      	beq.n	800a0bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	6852      	ldr	r2, [r2, #4]
 800a0aa:	b2d2      	uxtb	r2, r2
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	4798      	blx	r3
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0bc:	2340      	movs	r3, #64	@ 0x40
 800a0be:	2200      	movs	r2, #0
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 fbf5 	bl	800b8b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2240      	movs	r2, #64	@ 0x40
 800a0d4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a0d8:	2340      	movs	r3, #64	@ 0x40
 800a0da:	2200      	movs	r2, #0
 800a0dc:	2180      	movs	r1, #128	@ 0x80
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 fbe7 	bl	800b8b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2240      	movs	r2, #64	@ 0x40
 800a0f0:	841a      	strh	r2, [r3, #32]

  return ret;
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d006      	beq.n	800a13e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a136:	b2da      	uxtb	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2204      	movs	r2, #4
 800a142:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b04      	cmp	r3, #4
 800a166:	d106      	bne.n	800a176 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b03      	cmp	r3, #3
 800a196:	d110      	bne.n	800a1ba <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00b      	beq.n	800a1ba <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	32ae      	adds	r2, #174	@ 0xae
 800a1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e01c      	b.n	800a220 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d115      	bne.n	800a21e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	32ae      	adds	r2, #174	@ 0xae
 800a1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00b      	beq.n	800a21e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	32ae      	adds	r2, #174	@ 0xae
 800a210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	78fa      	ldrb	r2, [r7, #3]
 800a218:	4611      	mov	r1, r2
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	32ae      	adds	r2, #174	@ 0xae
 800a23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a246:	2303      	movs	r3, #3
 800a248:	e01c      	b.n	800a284 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b03      	cmp	r3, #3
 800a254:	d115      	bne.n	800a282 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	32ae      	adds	r2, #174	@ 0xae
 800a260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00b      	beq.n	800a282 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	32ae      	adds	r2, #174	@ 0xae
 800a274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27a:	78fa      	ldrb	r2, [r7, #3]
 800a27c:	4611      	mov	r1, r2
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00e      	beq.n	800a2de <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	6852      	ldr	r2, [r2, #4]
 800a2cc:	b2d2      	uxtb	r2, r2
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	4798      	blx	r3
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d001      	beq.n	800a2de <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a2f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a30e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a310:	4618      	mov	r0, r3
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a330:	2300      	movs	r3, #0
 800a332:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	885b      	ldrh	r3, [r3, #2]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	7812      	ldrb	r2, [r2, #0]
 800a33e:	4293      	cmp	r3, r2
 800a340:	d91f      	bls.n	800a382 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a348:	e013      	b.n	800a372 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a34a:	f107 030a 	add.w	r3, r7, #10
 800a34e:	4619      	mov	r1, r3
 800a350:	6978      	ldr	r0, [r7, #20]
 800a352:	f000 f81b 	bl	800a38c <USBD_GetNextDesc>
 800a356:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	785b      	ldrb	r3, [r3, #1]
 800a35c:	2b05      	cmp	r3, #5
 800a35e:	d108      	bne.n	800a372 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	789b      	ldrb	r3, [r3, #2]
 800a368:	78fa      	ldrb	r2, [r7, #3]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d008      	beq.n	800a380 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	885b      	ldrh	r3, [r3, #2]
 800a376:	b29a      	uxth	r2, r3
 800a378:	897b      	ldrh	r3, [r7, #10]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d8e5      	bhi.n	800a34a <USBD_GetEpDesc+0x2e>
 800a37e:	e000      	b.n	800a382 <USBD_GetEpDesc+0x66>
          break;
 800a380:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a382:	693b      	ldr	r3, [r7, #16]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	7812      	ldrb	r2, [r2, #0]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a3e2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a3e6:	021b      	lsls	r3, r3, #8
 800a3e8:	b21a      	sxth	r2, r3
 800a3ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	b21b      	sxth	r3, r3
 800a3f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a3f4:	89fb      	ldrh	r3, [r7, #14]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
	...

0800a404 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a41a:	2b40      	cmp	r3, #64	@ 0x40
 800a41c:	d005      	beq.n	800a42a <USBD_StdDevReq+0x26>
 800a41e:	2b40      	cmp	r3, #64	@ 0x40
 800a420:	d857      	bhi.n	800a4d2 <USBD_StdDevReq+0xce>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00f      	beq.n	800a446 <USBD_StdDevReq+0x42>
 800a426:	2b20      	cmp	r3, #32
 800a428:	d153      	bne.n	800a4d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	32ae      	adds	r2, #174	@ 0xae
 800a434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	4798      	blx	r3
 800a440:	4603      	mov	r3, r0
 800a442:	73fb      	strb	r3, [r7, #15]
      break;
 800a444:	e04a      	b.n	800a4dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	2b09      	cmp	r3, #9
 800a44c:	d83b      	bhi.n	800a4c6 <USBD_StdDevReq+0xc2>
 800a44e:	a201      	add	r2, pc, #4	@ (adr r2, 800a454 <USBD_StdDevReq+0x50>)
 800a450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a454:	0800a4a9 	.word	0x0800a4a9
 800a458:	0800a4bd 	.word	0x0800a4bd
 800a45c:	0800a4c7 	.word	0x0800a4c7
 800a460:	0800a4b3 	.word	0x0800a4b3
 800a464:	0800a4c7 	.word	0x0800a4c7
 800a468:	0800a487 	.word	0x0800a487
 800a46c:	0800a47d 	.word	0x0800a47d
 800a470:	0800a4c7 	.word	0x0800a4c7
 800a474:	0800a49f 	.word	0x0800a49f
 800a478:	0800a491 	.word	0x0800a491
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fa3e 	bl	800a900 <USBD_GetDescriptor>
          break;
 800a484:	e024      	b.n	800a4d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fba3 	bl	800abd4 <USBD_SetAddress>
          break;
 800a48e:	e01f      	b.n	800a4d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fbe2 	bl	800ac5c <USBD_SetConfig>
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]
          break;
 800a49c:	e018      	b.n	800a4d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a49e:	6839      	ldr	r1, [r7, #0]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fc85 	bl	800adb0 <USBD_GetConfig>
          break;
 800a4a6:	e013      	b.n	800a4d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fcb6 	bl	800ae1c <USBD_GetStatus>
          break;
 800a4b0:	e00e      	b.n	800a4d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fce5 	bl	800ae84 <USBD_SetFeature>
          break;
 800a4ba:	e009      	b.n	800a4d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 fd09 	bl	800aed6 <USBD_ClrFeature>
          break;
 800a4c4:	e004      	b.n	800a4d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a4c6:	6839      	ldr	r1, [r7, #0]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fd60 	bl	800af8e <USBD_CtlError>
          break;
 800a4ce:	bf00      	nop
      }
      break;
 800a4d0:	e004      	b.n	800a4dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a4d2:	6839      	ldr	r1, [r7, #0]
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fd5a 	bl	800af8e <USBD_CtlError>
      break;
 800a4da:	bf00      	nop
  }

  return ret;
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop

0800a4e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4fe:	2b40      	cmp	r3, #64	@ 0x40
 800a500:	d005      	beq.n	800a50e <USBD_StdItfReq+0x26>
 800a502:	2b40      	cmp	r3, #64	@ 0x40
 800a504:	d852      	bhi.n	800a5ac <USBD_StdItfReq+0xc4>
 800a506:	2b00      	cmp	r3, #0
 800a508:	d001      	beq.n	800a50e <USBD_StdItfReq+0x26>
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	d14e      	bne.n	800a5ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a514:	b2db      	uxtb	r3, r3
 800a516:	3b01      	subs	r3, #1
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d840      	bhi.n	800a59e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	889b      	ldrh	r3, [r3, #4]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b01      	cmp	r3, #1
 800a524:	d836      	bhi.n	800a594 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	889b      	ldrh	r3, [r3, #4]
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff feda 	bl	800a2e8 <USBD_CoreFindIF>
 800a534:	4603      	mov	r3, r0
 800a536:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	2bff      	cmp	r3, #255	@ 0xff
 800a53c:	d01d      	beq.n	800a57a <USBD_StdItfReq+0x92>
 800a53e:	7bbb      	ldrb	r3, [r7, #14]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d11a      	bne.n	800a57a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a544:	7bba      	ldrb	r2, [r7, #14]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	32ae      	adds	r2, #174	@ 0xae
 800a54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00f      	beq.n	800a574 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a554:	7bba      	ldrb	r2, [r7, #14]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a55c:	7bba      	ldrb	r2, [r7, #14]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	32ae      	adds	r2, #174	@ 0xae
 800a562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	4798      	blx	r3
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a572:	e004      	b.n	800a57e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a574:	2303      	movs	r3, #3
 800a576:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a578:	e001      	b.n	800a57e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a57a:	2303      	movs	r3, #3
 800a57c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	88db      	ldrh	r3, [r3, #6]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d110      	bne.n	800a5a8 <USBD_StdItfReq+0xc0>
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10d      	bne.n	800a5a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fddc 	bl	800b14a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a592:	e009      	b.n	800a5a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fcf9 	bl	800af8e <USBD_CtlError>
          break;
 800a59c:	e004      	b.n	800a5a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fcf4 	bl	800af8e <USBD_CtlError>
          break;
 800a5a6:	e000      	b.n	800a5aa <USBD_StdItfReq+0xc2>
          break;
 800a5a8:	bf00      	nop
      }
      break;
 800a5aa:	e004      	b.n	800a5b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fced 	bl	800af8e <USBD_CtlError>
      break;
 800a5b4:	bf00      	nop
  }

  return ret;
 800a5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	889b      	ldrh	r3, [r3, #4]
 800a5d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5dc:	2b40      	cmp	r3, #64	@ 0x40
 800a5de:	d007      	beq.n	800a5f0 <USBD_StdEPReq+0x30>
 800a5e0:	2b40      	cmp	r3, #64	@ 0x40
 800a5e2:	f200 8181 	bhi.w	800a8e8 <USBD_StdEPReq+0x328>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d02a      	beq.n	800a640 <USBD_StdEPReq+0x80>
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	f040 817c 	bne.w	800a8e8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff fe84 	bl	800a302 <USBD_CoreFindEP>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5fe:	7b7b      	ldrb	r3, [r7, #13]
 800a600:	2bff      	cmp	r3, #255	@ 0xff
 800a602:	f000 8176 	beq.w	800a8f2 <USBD_StdEPReq+0x332>
 800a606:	7b7b      	ldrb	r3, [r7, #13]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f040 8172 	bne.w	800a8f2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800a60e:	7b7a      	ldrb	r2, [r7, #13]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a616:	7b7a      	ldrb	r2, [r7, #13]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	32ae      	adds	r2, #174	@ 0xae
 800a61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 8165 	beq.w	800a8f2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a628:	7b7a      	ldrb	r2, [r7, #13]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	32ae      	adds	r2, #174	@ 0xae
 800a62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	4798      	blx	r3
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a63e:	e158      	b.n	800a8f2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	785b      	ldrb	r3, [r3, #1]
 800a644:	2b03      	cmp	r3, #3
 800a646:	d008      	beq.n	800a65a <USBD_StdEPReq+0x9a>
 800a648:	2b03      	cmp	r3, #3
 800a64a:	f300 8147 	bgt.w	800a8dc <USBD_StdEPReq+0x31c>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f000 809b 	beq.w	800a78a <USBD_StdEPReq+0x1ca>
 800a654:	2b01      	cmp	r3, #1
 800a656:	d03c      	beq.n	800a6d2 <USBD_StdEPReq+0x112>
 800a658:	e140      	b.n	800a8dc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a660:	b2db      	uxtb	r3, r3
 800a662:	2b02      	cmp	r3, #2
 800a664:	d002      	beq.n	800a66c <USBD_StdEPReq+0xac>
 800a666:	2b03      	cmp	r3, #3
 800a668:	d016      	beq.n	800a698 <USBD_StdEPReq+0xd8>
 800a66a:	e02c      	b.n	800a6c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00d      	beq.n	800a68e <USBD_StdEPReq+0xce>
 800a672:	7bbb      	ldrb	r3, [r7, #14]
 800a674:	2b80      	cmp	r3, #128	@ 0x80
 800a676:	d00a      	beq.n	800a68e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a678:	7bbb      	ldrb	r3, [r7, #14]
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 f95d 	bl	800b93c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a682:	2180      	movs	r1, #128	@ 0x80
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 f959 	bl	800b93c <USBD_LL_StallEP>
 800a68a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a68c:	e020      	b.n	800a6d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a68e:	6839      	ldr	r1, [r7, #0]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fc7c 	bl	800af8e <USBD_CtlError>
              break;
 800a696:	e01b      	b.n	800a6d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	885b      	ldrh	r3, [r3, #2]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10e      	bne.n	800a6be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00b      	beq.n	800a6be <USBD_StdEPReq+0xfe>
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	2b80      	cmp	r3, #128	@ 0x80
 800a6aa:	d008      	beq.n	800a6be <USBD_StdEPReq+0xfe>
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	88db      	ldrh	r3, [r3, #6]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d104      	bne.n	800a6be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 f93f 	bl	800b93c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fd43 	bl	800b14a <USBD_CtlSendStatus>

              break;
 800a6c4:	e004      	b.n	800a6d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a6c6:	6839      	ldr	r1, [r7, #0]
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 fc60 	bl	800af8e <USBD_CtlError>
              break;
 800a6ce:	bf00      	nop
          }
          break;
 800a6d0:	e109      	b.n	800a8e6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d002      	beq.n	800a6e4 <USBD_StdEPReq+0x124>
 800a6de:	2b03      	cmp	r3, #3
 800a6e0:	d016      	beq.n	800a710 <USBD_StdEPReq+0x150>
 800a6e2:	e04b      	b.n	800a77c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00d      	beq.n	800a706 <USBD_StdEPReq+0x146>
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	2b80      	cmp	r3, #128	@ 0x80
 800a6ee:	d00a      	beq.n	800a706 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 f921 	bl	800b93c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6fa:	2180      	movs	r1, #128	@ 0x80
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f001 f91d 	bl	800b93c <USBD_LL_StallEP>
 800a702:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a704:	e040      	b.n	800a788 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fc40 	bl	800af8e <USBD_CtlError>
              break;
 800a70e:	e03b      	b.n	800a788 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	885b      	ldrh	r3, [r3, #2]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d136      	bne.n	800a786 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d004      	beq.n	800a72c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a722:	7bbb      	ldrb	r3, [r7, #14]
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f001 f927 	bl	800b97a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 fd0c 	bl	800b14a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7ff fde3 	bl	800a302 <USBD_CoreFindEP>
 800a73c:	4603      	mov	r3, r0
 800a73e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a740:	7b7b      	ldrb	r3, [r7, #13]
 800a742:	2bff      	cmp	r3, #255	@ 0xff
 800a744:	d01f      	beq.n	800a786 <USBD_StdEPReq+0x1c6>
 800a746:	7b7b      	ldrb	r3, [r7, #13]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d11c      	bne.n	800a786 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a74c:	7b7a      	ldrb	r2, [r7, #13]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a754:	7b7a      	ldrb	r2, [r7, #13]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	32ae      	adds	r2, #174	@ 0xae
 800a75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d010      	beq.n	800a786 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a764:	7b7a      	ldrb	r2, [r7, #13]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	32ae      	adds	r2, #174	@ 0xae
 800a76a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	4798      	blx	r3
 800a776:	4603      	mov	r3, r0
 800a778:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a77a:	e004      	b.n	800a786 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fc05 	bl	800af8e <USBD_CtlError>
              break;
 800a784:	e000      	b.n	800a788 <USBD_StdEPReq+0x1c8>
              break;
 800a786:	bf00      	nop
          }
          break;
 800a788:	e0ad      	b.n	800a8e6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b02      	cmp	r3, #2
 800a794:	d002      	beq.n	800a79c <USBD_StdEPReq+0x1dc>
 800a796:	2b03      	cmp	r3, #3
 800a798:	d033      	beq.n	800a802 <USBD_StdEPReq+0x242>
 800a79a:	e099      	b.n	800a8d0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d007      	beq.n	800a7b2 <USBD_StdEPReq+0x1f2>
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	2b80      	cmp	r3, #128	@ 0x80
 800a7a6:	d004      	beq.n	800a7b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fbef 	bl	800af8e <USBD_CtlError>
                break;
 800a7b0:	e093      	b.n	800a8da <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	da0b      	bge.n	800a7d2 <USBD_StdEPReq+0x212>
 800a7ba:	7bbb      	ldrb	r3, [r7, #14]
 800a7bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	3310      	adds	r3, #16
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	e00b      	b.n	800a7ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7d2:	7bbb      	ldrb	r3, [r7, #14]
 800a7d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7d8:	4613      	mov	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4413      	add	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	330e      	adds	r3, #14
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fc44 	bl	800b088 <USBD_CtlSendData>
              break;
 800a800:	e06b      	b.n	800a8da <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a806:	2b00      	cmp	r3, #0
 800a808:	da11      	bge.n	800a82e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	f003 020f 	and.w	r2, r3, #15
 800a810:	6879      	ldr	r1, [r7, #4]
 800a812:	4613      	mov	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	3323      	adds	r3, #35	@ 0x23
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d117      	bne.n	800a854 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fbb1 	bl	800af8e <USBD_CtlError>
                  break;
 800a82c:	e055      	b.n	800a8da <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	f003 020f 	and.w	r2, r3, #15
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	440b      	add	r3, r1
 800a840:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d104      	bne.n	800a854 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fb9e 	bl	800af8e <USBD_CtlError>
                  break;
 800a852:	e042      	b.n	800a8da <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	da0b      	bge.n	800a874 <USBD_StdEPReq+0x2b4>
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a862:	4613      	mov	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	3310      	adds	r3, #16
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	4413      	add	r3, r2
 800a870:	3304      	adds	r3, #4
 800a872:	e00b      	b.n	800a88c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	3304      	adds	r3, #4
 800a88c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d002      	beq.n	800a89a <USBD_StdEPReq+0x2da>
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	2b80      	cmp	r3, #128	@ 0x80
 800a898:	d103      	bne.n	800a8a2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	2200      	movs	r2, #0
 800a89e:	739a      	strb	r2, [r3, #14]
 800a8a0:	e00e      	b.n	800a8c0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f001 f886 	bl	800b9b8 <USBD_LL_IsStallEP>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d003      	beq.n	800a8ba <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	739a      	strb	r2, [r3, #14]
 800a8b8:	e002      	b.n	800a8c0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	330e      	adds	r3, #14
 800a8c4:	2202      	movs	r2, #2
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fbdd 	bl	800b088 <USBD_CtlSendData>
              break;
 800a8ce:	e004      	b.n	800a8da <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 fb5b 	bl	800af8e <USBD_CtlError>
              break;
 800a8d8:	bf00      	nop
          }
          break;
 800a8da:	e004      	b.n	800a8e6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 fb55 	bl	800af8e <USBD_CtlError>
          break;
 800a8e4:	bf00      	nop
      }
      break;
 800a8e6:	e005      	b.n	800a8f4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fb4f 	bl	800af8e <USBD_CtlError>
      break;
 800a8f0:	e000      	b.n	800a8f4 <USBD_StdEPReq+0x334>
      break;
 800a8f2:	bf00      	nop
  }

  return ret;
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	885b      	ldrh	r3, [r3, #2]
 800a91a:	0a1b      	lsrs	r3, r3, #8
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	3b01      	subs	r3, #1
 800a920:	2b06      	cmp	r3, #6
 800a922:	f200 8128 	bhi.w	800ab76 <USBD_GetDescriptor+0x276>
 800a926:	a201      	add	r2, pc, #4	@ (adr r2, 800a92c <USBD_GetDescriptor+0x2c>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a949 	.word	0x0800a949
 800a930:	0800a961 	.word	0x0800a961
 800a934:	0800a9a1 	.word	0x0800a9a1
 800a938:	0800ab77 	.word	0x0800ab77
 800a93c:	0800ab77 	.word	0x0800ab77
 800a940:	0800ab17 	.word	0x0800ab17
 800a944:	0800ab43 	.word	0x0800ab43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	7c12      	ldrb	r2, [r2, #16]
 800a954:	f107 0108 	add.w	r1, r7, #8
 800a958:	4610      	mov	r0, r2
 800a95a:	4798      	blx	r3
 800a95c:	60f8      	str	r0, [r7, #12]
      break;
 800a95e:	e112      	b.n	800ab86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	7c1b      	ldrb	r3, [r3, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10d      	bne.n	800a984 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a970:	f107 0208 	add.w	r2, r7, #8
 800a974:	4610      	mov	r0, r2
 800a976:	4798      	blx	r3
 800a978:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3301      	adds	r3, #1
 800a97e:	2202      	movs	r2, #2
 800a980:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a982:	e100      	b.n	800ab86 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98c:	f107 0208 	add.w	r2, r7, #8
 800a990:	4610      	mov	r0, r2
 800a992:	4798      	blx	r3
 800a994:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	3301      	adds	r3, #1
 800a99a:	2202      	movs	r2, #2
 800a99c:	701a      	strb	r2, [r3, #0]
      break;
 800a99e:	e0f2      	b.n	800ab86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	885b      	ldrh	r3, [r3, #2]
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b05      	cmp	r3, #5
 800a9a8:	f200 80ac 	bhi.w	800ab04 <USBD_GetDescriptor+0x204>
 800a9ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b4 <USBD_GetDescriptor+0xb4>)
 800a9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b2:	bf00      	nop
 800a9b4:	0800a9cd 	.word	0x0800a9cd
 800a9b8:	0800aa01 	.word	0x0800aa01
 800a9bc:	0800aa35 	.word	0x0800aa35
 800a9c0:	0800aa69 	.word	0x0800aa69
 800a9c4:	0800aa9d 	.word	0x0800aa9d
 800a9c8:	0800aad1 	.word	0x0800aad1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00b      	beq.n	800a9f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	7c12      	ldrb	r2, [r2, #16]
 800a9e4:	f107 0108 	add.w	r1, r7, #8
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4798      	blx	r3
 800a9ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9ee:	e091      	b.n	800ab14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 facb 	bl	800af8e <USBD_CtlError>
            err++;
 800a9f8:	7afb      	ldrb	r3, [r7, #11]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a9fe:	e089      	b.n	800ab14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00b      	beq.n	800aa24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	7c12      	ldrb	r2, [r2, #16]
 800aa18:	f107 0108 	add.w	r1, r7, #8
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	4798      	blx	r3
 800aa20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa22:	e077      	b.n	800ab14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fab1 	bl	800af8e <USBD_CtlError>
            err++;
 800aa2c:	7afb      	ldrb	r3, [r7, #11]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	72fb      	strb	r3, [r7, #11]
          break;
 800aa32:	e06f      	b.n	800ab14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	7c12      	ldrb	r2, [r2, #16]
 800aa4c:	f107 0108 	add.w	r1, r7, #8
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
 800aa54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa56:	e05d      	b.n	800ab14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fa97 	bl	800af8e <USBD_CtlError>
            err++;
 800aa60:	7afb      	ldrb	r3, [r7, #11]
 800aa62:	3301      	adds	r3, #1
 800aa64:	72fb      	strb	r3, [r7, #11]
          break;
 800aa66:	e055      	b.n	800ab14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	7c12      	ldrb	r2, [r2, #16]
 800aa80:	f107 0108 	add.w	r1, r7, #8
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa8a:	e043      	b.n	800ab14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fa7d 	bl	800af8e <USBD_CtlError>
            err++;
 800aa94:	7afb      	ldrb	r3, [r7, #11]
 800aa96:	3301      	adds	r3, #1
 800aa98:	72fb      	strb	r3, [r7, #11]
          break;
 800aa9a:	e03b      	b.n	800ab14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	7c12      	ldrb	r2, [r2, #16]
 800aab4:	f107 0108 	add.w	r1, r7, #8
 800aab8:	4610      	mov	r0, r2
 800aaba:	4798      	blx	r3
 800aabc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aabe:	e029      	b.n	800ab14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fa63 	bl	800af8e <USBD_CtlError>
            err++;
 800aac8:	7afb      	ldrb	r3, [r7, #11]
 800aaca:	3301      	adds	r3, #1
 800aacc:	72fb      	strb	r3, [r7, #11]
          break;
 800aace:	e021      	b.n	800ab14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	7c12      	ldrb	r2, [r2, #16]
 800aae8:	f107 0108 	add.w	r1, r7, #8
 800aaec:	4610      	mov	r0, r2
 800aaee:	4798      	blx	r3
 800aaf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaf2:	e00f      	b.n	800ab14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fa49 	bl	800af8e <USBD_CtlError>
            err++;
 800aafc:	7afb      	ldrb	r3, [r7, #11]
 800aafe:	3301      	adds	r3, #1
 800ab00:	72fb      	strb	r3, [r7, #11]
          break;
 800ab02:	e007      	b.n	800ab14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fa41 	bl	800af8e <USBD_CtlError>
          err++;
 800ab0c:	7afb      	ldrb	r3, [r7, #11]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ab12:	bf00      	nop
      }
      break;
 800ab14:	e037      	b.n	800ab86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7c1b      	ldrb	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d109      	bne.n	800ab32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab26:	f107 0208 	add.w	r2, r7, #8
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	4798      	blx	r3
 800ab2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab30:	e029      	b.n	800ab86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fa2a 	bl	800af8e <USBD_CtlError>
        err++;
 800ab3a:	7afb      	ldrb	r3, [r7, #11]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ab40:	e021      	b.n	800ab86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	7c1b      	ldrb	r3, [r3, #16]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10d      	bne.n	800ab66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab52:	f107 0208 	add.w	r2, r7, #8
 800ab56:	4610      	mov	r0, r2
 800ab58:	4798      	blx	r3
 800ab5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	2207      	movs	r2, #7
 800ab62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab64:	e00f      	b.n	800ab86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 fa10 	bl	800af8e <USBD_CtlError>
        err++;
 800ab6e:	7afb      	ldrb	r3, [r7, #11]
 800ab70:	3301      	adds	r3, #1
 800ab72:	72fb      	strb	r3, [r7, #11]
      break;
 800ab74:	e007      	b.n	800ab86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 fa08 	bl	800af8e <USBD_CtlError>
      err++;
 800ab7e:	7afb      	ldrb	r3, [r7, #11]
 800ab80:	3301      	adds	r3, #1
 800ab82:	72fb      	strb	r3, [r7, #11]
      break;
 800ab84:	bf00      	nop
  }

  if (err != 0U)
 800ab86:	7afb      	ldrb	r3, [r7, #11]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d11e      	bne.n	800abca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	88db      	ldrh	r3, [r3, #6]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d016      	beq.n	800abc2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ab94:	893b      	ldrh	r3, [r7, #8]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00e      	beq.n	800abb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	88da      	ldrh	r2, [r3, #6]
 800ab9e:	893b      	ldrh	r3, [r7, #8]
 800aba0:	4293      	cmp	r3, r2
 800aba2:	bf28      	it	cs
 800aba4:	4613      	movcs	r3, r2
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800abaa:	893b      	ldrh	r3, [r7, #8]
 800abac:	461a      	mov	r2, r3
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fa69 	bl	800b088 <USBD_CtlSendData>
 800abb6:	e009      	b.n	800abcc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f9e7 	bl	800af8e <USBD_CtlError>
 800abc0:	e004      	b.n	800abcc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fac1 	bl	800b14a <USBD_CtlSendStatus>
 800abc8:	e000      	b.n	800abcc <USBD_GetDescriptor+0x2cc>
    return;
 800abca:	bf00      	nop
  }
}
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop

0800abd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	889b      	ldrh	r3, [r3, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d131      	bne.n	800ac4a <USBD_SetAddress+0x76>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	88db      	ldrh	r3, [r3, #6]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d12d      	bne.n	800ac4a <USBD_SetAddress+0x76>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	2b7f      	cmp	r3, #127	@ 0x7f
 800abf4:	d829      	bhi.n	800ac4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	885b      	ldrh	r3, [r3, #2]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b03      	cmp	r3, #3
 800ac0c:	d104      	bne.n	800ac18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f9bc 	bl	800af8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac16:	e01d      	b.n	800ac54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	7bfa      	ldrb	r2, [r7, #15]
 800ac1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac20:	7bfb      	ldrb	r3, [r7, #15]
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fef3 	bl	800ba10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa8d 	bl	800b14a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d004      	beq.n	800ac40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2202      	movs	r2, #2
 800ac3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac3e:	e009      	b.n	800ac54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac48:	e004      	b.n	800ac54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac4a:	6839      	ldr	r1, [r7, #0]
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f99e 	bl	800af8e <USBD_CtlError>
  }
}
 800ac52:	bf00      	nop
 800ac54:	bf00      	nop
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	885b      	ldrh	r3, [r3, #2]
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	4b4e      	ldr	r3, [pc, #312]	@ (800adac <USBD_SetConfig+0x150>)
 800ac72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac74:	4b4d      	ldr	r3, [pc, #308]	@ (800adac <USBD_SetConfig+0x150>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d905      	bls.n	800ac88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f985 	bl	800af8e <USBD_CtlError>
    return USBD_FAIL;
 800ac84:	2303      	movs	r3, #3
 800ac86:	e08c      	b.n	800ada2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d002      	beq.n	800ac9a <USBD_SetConfig+0x3e>
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d029      	beq.n	800acec <USBD_SetConfig+0x90>
 800ac98:	e075      	b.n	800ad86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac9a:	4b44      	ldr	r3, [pc, #272]	@ (800adac <USBD_SetConfig+0x150>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d020      	beq.n	800ace4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aca2:	4b42      	ldr	r3, [pc, #264]	@ (800adac <USBD_SetConfig+0x150>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800acac:	4b3f      	ldr	r3, [pc, #252]	@ (800adac <USBD_SetConfig+0x150>)
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7fe ffcd 	bl	8009c52 <USBD_SetClassConfig>
 800acb8:	4603      	mov	r3, r0
 800acba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d008      	beq.n	800acd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f962 	bl	800af8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2202      	movs	r2, #2
 800acce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acd2:	e065      	b.n	800ada0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 fa38 	bl	800b14a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2203      	movs	r2, #3
 800acde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ace2:	e05d      	b.n	800ada0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fa30 	bl	800b14a <USBD_CtlSendStatus>
      break;
 800acea:	e059      	b.n	800ada0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800acec:	4b2f      	ldr	r3, [pc, #188]	@ (800adac <USBD_SetConfig+0x150>)
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d112      	bne.n	800ad1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800acfc:	4b2b      	ldr	r3, [pc, #172]	@ (800adac <USBD_SetConfig+0x150>)
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	461a      	mov	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad06:	4b29      	ldr	r3, [pc, #164]	@ (800adac <USBD_SetConfig+0x150>)
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7fe ffbc 	bl	8009c8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fa19 	bl	800b14a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad18:	e042      	b.n	800ada0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ad1a:	4b24      	ldr	r3, [pc, #144]	@ (800adac <USBD_SetConfig+0x150>)
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d02a      	beq.n	800ad7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f7fe ffaa 	bl	8009c8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad36:	4b1d      	ldr	r3, [pc, #116]	@ (800adac <USBD_SetConfig+0x150>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad40:	4b1a      	ldr	r3, [pc, #104]	@ (800adac <USBD_SetConfig+0x150>)
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7fe ff83 	bl	8009c52 <USBD_SetClassConfig>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00f      	beq.n	800ad76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f918 	bl	800af8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7fe ff8f 	bl	8009c8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2202      	movs	r2, #2
 800ad70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad74:	e014      	b.n	800ada0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f9e7 	bl	800b14a <USBD_CtlSendStatus>
      break;
 800ad7c:	e010      	b.n	800ada0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f9e3 	bl	800b14a <USBD_CtlSendStatus>
      break;
 800ad84:	e00c      	b.n	800ada0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f900 	bl	800af8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad8e:	4b07      	ldr	r3, [pc, #28]	@ (800adac <USBD_SetConfig+0x150>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	4619      	mov	r1, r3
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7fe ff78 	bl	8009c8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad9e:	bf00      	nop
  }

  return ret;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20000a48 	.word	0x20000a48

0800adb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	88db      	ldrh	r3, [r3, #6]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d004      	beq.n	800adcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f8e2 	bl	800af8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800adca:	e023      	b.n	800ae14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800add2:	b2db      	uxtb	r3, r3
 800add4:	2b02      	cmp	r3, #2
 800add6:	dc02      	bgt.n	800adde <USBD_GetConfig+0x2e>
 800add8:	2b00      	cmp	r3, #0
 800adda:	dc03      	bgt.n	800ade4 <USBD_GetConfig+0x34>
 800addc:	e015      	b.n	800ae0a <USBD_GetConfig+0x5a>
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d00b      	beq.n	800adfa <USBD_GetConfig+0x4a>
 800ade2:	e012      	b.n	800ae0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3308      	adds	r3, #8
 800adee:	2201      	movs	r2, #1
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f948 	bl	800b088 <USBD_CtlSendData>
        break;
 800adf8:	e00c      	b.n	800ae14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3304      	adds	r3, #4
 800adfe:	2201      	movs	r2, #1
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f940 	bl	800b088 <USBD_CtlSendData>
        break;
 800ae08:	e004      	b.n	800ae14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f8be 	bl	800af8e <USBD_CtlError>
        break;
 800ae12:	bf00      	nop
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d81e      	bhi.n	800ae72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	88db      	ldrh	r3, [r3, #6]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d004      	beq.n	800ae46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae3c:	6839      	ldr	r1, [r7, #0]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f8a5 	bl	800af8e <USBD_CtlError>
        break;
 800ae44:	e01a      	b.n	800ae7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d005      	beq.n	800ae62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	f043 0202 	orr.w	r2, r3, #2
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	330c      	adds	r3, #12
 800ae66:	2202      	movs	r2, #2
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f90c 	bl	800b088 <USBD_CtlSendData>
      break;
 800ae70:	e004      	b.n	800ae7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f88a 	bl	800af8e <USBD_CtlError>
      break;
 800ae7a:	bf00      	nop
  }
}
 800ae7c:	bf00      	nop
 800ae7e:	3708      	adds	r7, #8
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	885b      	ldrh	r3, [r3, #2]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d107      	bne.n	800aea6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f953 	bl	800b14a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aea4:	e013      	b.n	800aece <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	885b      	ldrh	r3, [r3, #2]
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	d10b      	bne.n	800aec6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	889b      	ldrh	r3, [r3, #4]
 800aeb2:	0a1b      	lsrs	r3, r3, #8
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f943 	bl	800b14a <USBD_CtlSendStatus>
}
 800aec4:	e003      	b.n	800aece <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f860 	bl	800af8e <USBD_CtlError>
}
 800aece:	bf00      	nop
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	3b01      	subs	r3, #1
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d80b      	bhi.n	800af06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	885b      	ldrh	r3, [r3, #2]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d10c      	bne.n	800af10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f923 	bl	800b14a <USBD_CtlSendStatus>
      }
      break;
 800af04:	e004      	b.n	800af10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 f840 	bl	800af8e <USBD_CtlError>
      break;
 800af0e:	e000      	b.n	800af12 <USBD_ClrFeature+0x3c>
      break;
 800af10:	bf00      	nop
  }
}
 800af12:	bf00      	nop
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	781a      	ldrb	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	3301      	adds	r3, #1
 800af34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	781a      	ldrb	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	3301      	adds	r3, #1
 800af42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f7ff fa3d 	bl	800a3c4 <SWAPBYTE>
 800af4a:	4603      	mov	r3, r0
 800af4c:	461a      	mov	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3301      	adds	r3, #1
 800af56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	3301      	adds	r3, #1
 800af5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af5e:	68f8      	ldr	r0, [r7, #12]
 800af60:	f7ff fa30 	bl	800a3c4 <SWAPBYTE>
 800af64:	4603      	mov	r3, r0
 800af66:	461a      	mov	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	3301      	adds	r3, #1
 800af70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	3301      	adds	r3, #1
 800af76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f7ff fa23 	bl	800a3c4 <SWAPBYTE>
 800af7e:	4603      	mov	r3, r0
 800af80:	461a      	mov	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	80da      	strh	r2, [r3, #6]
}
 800af86:	bf00      	nop
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b082      	sub	sp, #8
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af98:	2180      	movs	r1, #128	@ 0x80
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fcce 	bl	800b93c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800afa0:	2100      	movs	r1, #0
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 fcca 	bl	800b93c <USBD_LL_StallEP>
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b086      	sub	sp, #24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d042      	beq.n	800b04c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800afca:	6938      	ldr	r0, [r7, #16]
 800afcc:	f000 f842 	bl	800b054 <USBD_GetLen>
 800afd0:	4603      	mov	r3, r0
 800afd2:	3301      	adds	r3, #1
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afda:	d808      	bhi.n	800afee <USBD_GetString+0x3e>
 800afdc:	6938      	ldr	r0, [r7, #16]
 800afde:	f000 f839 	bl	800b054 <USBD_GetLen>
 800afe2:	4603      	mov	r3, r0
 800afe4:	3301      	adds	r3, #1
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	005b      	lsls	r3, r3, #1
 800afea:	b29a      	uxth	r2, r3
 800afec:	e001      	b.n	800aff2 <USBD_GetString+0x42>
 800afee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	4413      	add	r3, r2
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	7812      	ldrb	r2, [r2, #0]
 800b000:	701a      	strb	r2, [r3, #0]
  idx++;
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	3301      	adds	r3, #1
 800b006:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b008:	7dfb      	ldrb	r3, [r7, #23]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	4413      	add	r3, r2
 800b00e:	2203      	movs	r2, #3
 800b010:	701a      	strb	r2, [r3, #0]
  idx++;
 800b012:	7dfb      	ldrb	r3, [r7, #23]
 800b014:	3301      	adds	r3, #1
 800b016:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b018:	e013      	b.n	800b042 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	4413      	add	r3, r2
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	7812      	ldrb	r2, [r2, #0]
 800b024:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	3301      	adds	r3, #1
 800b02a:	613b      	str	r3, [r7, #16]
    idx++;
 800b02c:	7dfb      	ldrb	r3, [r7, #23]
 800b02e:	3301      	adds	r3, #1
 800b030:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b032:	7dfb      	ldrb	r3, [r7, #23]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	4413      	add	r3, r2
 800b038:	2200      	movs	r2, #0
 800b03a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	3301      	adds	r3, #1
 800b040:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d1e7      	bne.n	800b01a <USBD_GetString+0x6a>
 800b04a:	e000      	b.n	800b04e <USBD_GetString+0x9e>
    return;
 800b04c:	bf00      	nop
  }
}
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b05c:	2300      	movs	r3, #0
 800b05e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b064:	e005      	b.n	800b072 <USBD_GetLen+0x1e>
  {
    len++;
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	3301      	adds	r3, #1
 800b06a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	3301      	adds	r3, #1
 800b070:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1f5      	bne.n	800b066 <USBD_GetLen+0x12>
  }

  return len;
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2202      	movs	r2, #2
 800b098:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 fcca 	bl	800ba4e <USBD_LL_Transmit>

  return USBD_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 fcb9 	bl	800ba4e <USBD_LL_Transmit>

  return USBD_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	60f8      	str	r0, [r7, #12]
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2203      	movs	r2, #3
 800b0f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	2100      	movs	r1, #0
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fcb9 	bl	800ba90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	2100      	movs	r1, #0
 800b13a:	68f8      	ldr	r0, [r7, #12]
 800b13c:	f000 fca8 	bl	800ba90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2204      	movs	r2, #4
 800b156:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b15a:	2300      	movs	r3, #0
 800b15c:	2200      	movs	r2, #0
 800b15e:	2100      	movs	r1, #0
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fc74 	bl	800ba4e <USBD_LL_Transmit>

  return USBD_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2205      	movs	r2, #5
 800b17c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b180:	2300      	movs	r3, #0
 800b182:	2200      	movs	r2, #0
 800b184:	2100      	movs	r1, #0
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fc82 	bl	800ba90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b19c:	2200      	movs	r2, #0
 800b19e:	4912      	ldr	r1, [pc, #72]	@ (800b1e8 <MX_USB_DEVICE_Init+0x50>)
 800b1a0:	4812      	ldr	r0, [pc, #72]	@ (800b1ec <MX_USB_DEVICE_Init+0x54>)
 800b1a2:	f7fe fcd9 	bl	8009b58 <USBD_Init>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1ac:	f7f5 ff1e 	bl	8000fec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1b0:	490f      	ldr	r1, [pc, #60]	@ (800b1f0 <MX_USB_DEVICE_Init+0x58>)
 800b1b2:	480e      	ldr	r0, [pc, #56]	@ (800b1ec <MX_USB_DEVICE_Init+0x54>)
 800b1b4:	f7fe fd00 	bl	8009bb8 <USBD_RegisterClass>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1be:	f7f5 ff15 	bl	8000fec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1c2:	490c      	ldr	r1, [pc, #48]	@ (800b1f4 <MX_USB_DEVICE_Init+0x5c>)
 800b1c4:	4809      	ldr	r0, [pc, #36]	@ (800b1ec <MX_USB_DEVICE_Init+0x54>)
 800b1c6:	f7fe fc37 	bl	8009a38 <USBD_CDC_RegisterInterface>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b1d0:	f7f5 ff0c 	bl	8000fec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1d4:	4805      	ldr	r0, [pc, #20]	@ (800b1ec <MX_USB_DEVICE_Init+0x54>)
 800b1d6:	f7fe fd25 	bl	8009c24 <USBD_Start>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b1e0:	f7f5 ff04 	bl	8000fec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b1e4:	bf00      	nop
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	200000b0 	.word	0x200000b0
 800b1ec:	20000a4c 	.word	0x20000a4c
 800b1f0:	2000001c 	.word	0x2000001c
 800b1f4:	2000009c 	.word	0x2000009c

0800b1f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4905      	ldr	r1, [pc, #20]	@ (800b214 <CDC_Init_FS+0x1c>)
 800b200:	4805      	ldr	r0, [pc, #20]	@ (800b218 <CDC_Init_FS+0x20>)
 800b202:	f7fe fc33 	bl	8009a6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b206:	4905      	ldr	r1, [pc, #20]	@ (800b21c <CDC_Init_FS+0x24>)
 800b208:	4803      	ldr	r0, [pc, #12]	@ (800b218 <CDC_Init_FS+0x20>)
 800b20a:	f7fe fc51 	bl	8009ab0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b20e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b210:	4618      	mov	r0, r3
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20001528 	.word	0x20001528
 800b218:	20000a4c 	.word	0x20000a4c
 800b21c:	20000d28 	.word	0x20000d28

0800b220 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b220:	b480      	push	{r7}
 800b222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b224:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b226:	4618      	mov	r0, r3
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	4603      	mov	r3, r0
 800b238:	6039      	str	r1, [r7, #0]
 800b23a:	71fb      	strb	r3, [r7, #7]
 800b23c:	4613      	mov	r3, r2
 800b23e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	2b23      	cmp	r3, #35	@ 0x23
 800b244:	d84a      	bhi.n	800b2dc <CDC_Control_FS+0xac>
 800b246:	a201      	add	r2, pc, #4	@ (adr r2, 800b24c <CDC_Control_FS+0x1c>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b2dd 	.word	0x0800b2dd
 800b250:	0800b2dd 	.word	0x0800b2dd
 800b254:	0800b2dd 	.word	0x0800b2dd
 800b258:	0800b2dd 	.word	0x0800b2dd
 800b25c:	0800b2dd 	.word	0x0800b2dd
 800b260:	0800b2dd 	.word	0x0800b2dd
 800b264:	0800b2dd 	.word	0x0800b2dd
 800b268:	0800b2dd 	.word	0x0800b2dd
 800b26c:	0800b2dd 	.word	0x0800b2dd
 800b270:	0800b2dd 	.word	0x0800b2dd
 800b274:	0800b2dd 	.word	0x0800b2dd
 800b278:	0800b2dd 	.word	0x0800b2dd
 800b27c:	0800b2dd 	.word	0x0800b2dd
 800b280:	0800b2dd 	.word	0x0800b2dd
 800b284:	0800b2dd 	.word	0x0800b2dd
 800b288:	0800b2dd 	.word	0x0800b2dd
 800b28c:	0800b2dd 	.word	0x0800b2dd
 800b290:	0800b2dd 	.word	0x0800b2dd
 800b294:	0800b2dd 	.word	0x0800b2dd
 800b298:	0800b2dd 	.word	0x0800b2dd
 800b29c:	0800b2dd 	.word	0x0800b2dd
 800b2a0:	0800b2dd 	.word	0x0800b2dd
 800b2a4:	0800b2dd 	.word	0x0800b2dd
 800b2a8:	0800b2dd 	.word	0x0800b2dd
 800b2ac:	0800b2dd 	.word	0x0800b2dd
 800b2b0:	0800b2dd 	.word	0x0800b2dd
 800b2b4:	0800b2dd 	.word	0x0800b2dd
 800b2b8:	0800b2dd 	.word	0x0800b2dd
 800b2bc:	0800b2dd 	.word	0x0800b2dd
 800b2c0:	0800b2dd 	.word	0x0800b2dd
 800b2c4:	0800b2dd 	.word	0x0800b2dd
 800b2c8:	0800b2dd 	.word	0x0800b2dd
 800b2cc:	0800b2dd 	.word	0x0800b2dd
 800b2d0:	0800b2dd 	.word	0x0800b2dd
 800b2d4:	0800b2dd 	.word	0x0800b2dd
 800b2d8:	0800b2dd 	.word	0x0800b2dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2dc:	bf00      	nop
  }

  return (USBD_OK);
 800b2de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2f6:	6879      	ldr	r1, [r7, #4]
 800b2f8:	4805      	ldr	r0, [pc, #20]	@ (800b310 <CDC_Receive_FS+0x24>)
 800b2fa:	f7fe fbd9 	bl	8009ab0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2fe:	4804      	ldr	r0, [pc, #16]	@ (800b310 <CDC_Receive_FS+0x24>)
 800b300:	f7fe fbf4 	bl	8009aec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b304:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b306:	4618      	mov	r0, r3
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20000a4c 	.word	0x20000a4c

0800b314 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b314:	b480      	push	{r7}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	4613      	mov	r3, r2
 800b320:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b326:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	371c      	adds	r7, #28
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr
	...

0800b338 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	6039      	str	r1, [r7, #0]
 800b342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2212      	movs	r2, #18
 800b348:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b34a:	4b03      	ldr	r3, [pc, #12]	@ (800b358 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	200000cc 	.word	0x200000cc

0800b35c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	6039      	str	r1, [r7, #0]
 800b366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	2204      	movs	r2, #4
 800b36c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b36e:	4b03      	ldr	r3, [pc, #12]	@ (800b37c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	200000e0 	.word	0x200000e0

0800b380 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	6039      	str	r1, [r7, #0]
 800b38a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d105      	bne.n	800b39e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	4907      	ldr	r1, [pc, #28]	@ (800b3b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b396:	4808      	ldr	r0, [pc, #32]	@ (800b3b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b398:	f7ff fe0a 	bl	800afb0 <USBD_GetString>
 800b39c:	e004      	b.n	800b3a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	4904      	ldr	r1, [pc, #16]	@ (800b3b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3a2:	4805      	ldr	r0, [pc, #20]	@ (800b3b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3a4:	f7ff fe04 	bl	800afb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3a8:	4b02      	ldr	r3, [pc, #8]	@ (800b3b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20001d28 	.word	0x20001d28
 800b3b8:	0800c500 	.word	0x0800c500

0800b3bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	6039      	str	r1, [r7, #0]
 800b3c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	4904      	ldr	r1, [pc, #16]	@ (800b3dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3cc:	4804      	ldr	r0, [pc, #16]	@ (800b3e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3ce:	f7ff fdef 	bl	800afb0 <USBD_GetString>
  return USBD_StrDesc;
 800b3d2:	4b02      	ldr	r3, [pc, #8]	@ (800b3dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20001d28 	.word	0x20001d28
 800b3e0:	0800c518 	.word	0x0800c518

0800b3e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	6039      	str	r1, [r7, #0]
 800b3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	221a      	movs	r2, #26
 800b3f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3f6:	f000 f843 	bl	800b480 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b3fa:	4b02      	ldr	r3, [pc, #8]	@ (800b404 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	200000e4 	.word	0x200000e4

0800b408 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	6039      	str	r1, [r7, #0]
 800b412:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b414:	79fb      	ldrb	r3, [r7, #7]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d105      	bne.n	800b426 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	4907      	ldr	r1, [pc, #28]	@ (800b43c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b41e:	4808      	ldr	r0, [pc, #32]	@ (800b440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b420:	f7ff fdc6 	bl	800afb0 <USBD_GetString>
 800b424:	e004      	b.n	800b430 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	4904      	ldr	r1, [pc, #16]	@ (800b43c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b42a:	4805      	ldr	r0, [pc, #20]	@ (800b440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b42c:	f7ff fdc0 	bl	800afb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b430:	4b02      	ldr	r3, [pc, #8]	@ (800b43c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20001d28 	.word	0x20001d28
 800b440:	0800c52c 	.word	0x0800c52c

0800b444 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	6039      	str	r1, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d105      	bne.n	800b462 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	4907      	ldr	r1, [pc, #28]	@ (800b478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b45a:	4808      	ldr	r0, [pc, #32]	@ (800b47c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b45c:	f7ff fda8 	bl	800afb0 <USBD_GetString>
 800b460:	e004      	b.n	800b46c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	4904      	ldr	r1, [pc, #16]	@ (800b478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b466:	4805      	ldr	r0, [pc, #20]	@ (800b47c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b468:	f7ff fda2 	bl	800afb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b46c:	4b02      	ldr	r3, [pc, #8]	@ (800b478 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20001d28 	.word	0x20001d28
 800b47c:	0800c538 	.word	0x0800c538

0800b480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b486:	4b0f      	ldr	r3, [pc, #60]	@ (800b4c4 <Get_SerialNum+0x44>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b48c:	4b0e      	ldr	r3, [pc, #56]	@ (800b4c8 <Get_SerialNum+0x48>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b492:	4b0e      	ldr	r3, [pc, #56]	@ (800b4cc <Get_SerialNum+0x4c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4413      	add	r3, r2
 800b49e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d009      	beq.n	800b4ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4a6:	2208      	movs	r2, #8
 800b4a8:	4909      	ldr	r1, [pc, #36]	@ (800b4d0 <Get_SerialNum+0x50>)
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f000 f814 	bl	800b4d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4b0:	2204      	movs	r2, #4
 800b4b2:	4908      	ldr	r1, [pc, #32]	@ (800b4d4 <Get_SerialNum+0x54>)
 800b4b4:	68b8      	ldr	r0, [r7, #8]
 800b4b6:	f000 f80f 	bl	800b4d8 <IntToUnicode>
  }
}
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	1fff7a10 	.word	0x1fff7a10
 800b4c8:	1fff7a14 	.word	0x1fff7a14
 800b4cc:	1fff7a18 	.word	0x1fff7a18
 800b4d0:	200000e6 	.word	0x200000e6
 800b4d4:	200000f6 	.word	0x200000f6

0800b4d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	75fb      	strb	r3, [r7, #23]
 800b4ee:	e027      	b.n	800b540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	0f1b      	lsrs	r3, r3, #28
 800b4f4:	2b09      	cmp	r3, #9
 800b4f6:	d80b      	bhi.n	800b510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	0f1b      	lsrs	r3, r3, #28
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	7dfb      	ldrb	r3, [r7, #23]
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	4619      	mov	r1, r3
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	440b      	add	r3, r1
 800b508:	3230      	adds	r2, #48	@ 0x30
 800b50a:	b2d2      	uxtb	r2, r2
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	e00a      	b.n	800b526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	0f1b      	lsrs	r3, r3, #28
 800b514:	b2da      	uxtb	r2, r3
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	005b      	lsls	r3, r3, #1
 800b51a:	4619      	mov	r1, r3
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	440b      	add	r3, r1
 800b520:	3237      	adds	r2, #55	@ 0x37
 800b522:	b2d2      	uxtb	r2, r2
 800b524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b52c:	7dfb      	ldrb	r3, [r7, #23]
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	3301      	adds	r3, #1
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	4413      	add	r3, r2
 800b536:	2200      	movs	r2, #0
 800b538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
 800b53c:	3301      	adds	r3, #1
 800b53e:	75fb      	strb	r3, [r7, #23]
 800b540:	7dfa      	ldrb	r2, [r7, #23]
 800b542:	79fb      	ldrb	r3, [r7, #7]
 800b544:	429a      	cmp	r2, r3
 800b546:	d3d3      	bcc.n	800b4f0 <IntToUnicode+0x18>
  }
}
 800b548:	bf00      	nop
 800b54a:	bf00      	nop
 800b54c:	371c      	adds	r7, #28
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	@ 0x28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b560:	f107 0314 	add.w	r3, r7, #20
 800b564:	2200      	movs	r2, #0
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	605a      	str	r2, [r3, #4]
 800b56a:	609a      	str	r2, [r3, #8]
 800b56c:	60da      	str	r2, [r3, #12]
 800b56e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b578:	d13a      	bne.n	800b5f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b57a:	2300      	movs	r3, #0
 800b57c:	613b      	str	r3, [r7, #16]
 800b57e:	4b1e      	ldr	r3, [pc, #120]	@ (800b5f8 <HAL_PCD_MspInit+0xa0>)
 800b580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b582:	4a1d      	ldr	r2, [pc, #116]	@ (800b5f8 <HAL_PCD_MspInit+0xa0>)
 800b584:	f043 0301 	orr.w	r3, r3, #1
 800b588:	6313      	str	r3, [r2, #48]	@ 0x30
 800b58a:	4b1b      	ldr	r3, [pc, #108]	@ (800b5f8 <HAL_PCD_MspInit+0xa0>)
 800b58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	613b      	str	r3, [r7, #16]
 800b594:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b596:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b59a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b59c:	2302      	movs	r3, #2
 800b59e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b5a8:	230a      	movs	r3, #10
 800b5aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5ac:	f107 0314 	add.w	r3, r7, #20
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	4812      	ldr	r0, [pc, #72]	@ (800b5fc <HAL_PCD_MspInit+0xa4>)
 800b5b4:	f7f7 fc2c 	bl	8002e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b5b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b5f8 <HAL_PCD_MspInit+0xa0>)
 800b5ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5bc:	4a0e      	ldr	r2, [pc, #56]	@ (800b5f8 <HAL_PCD_MspInit+0xa0>)
 800b5be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5c2:	6353      	str	r3, [r2, #52]	@ 0x34
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	60fb      	str	r3, [r7, #12]
 800b5c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f8 <HAL_PCD_MspInit+0xa0>)
 800b5ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5cc:	4a0a      	ldr	r2, [pc, #40]	@ (800b5f8 <HAL_PCD_MspInit+0xa0>)
 800b5ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b5d2:	6453      	str	r3, [r2, #68]	@ 0x44
 800b5d4:	4b08      	ldr	r3, [pc, #32]	@ (800b5f8 <HAL_PCD_MspInit+0xa0>)
 800b5d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5dc:	60fb      	str	r3, [r7, #12]
 800b5de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	2043      	movs	r0, #67	@ 0x43
 800b5e6:	f7f7 f86c 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b5ea:	2043      	movs	r0, #67	@ 0x43
 800b5ec:	f7f7 f885 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b5f0:	bf00      	nop
 800b5f2:	3728      	adds	r7, #40	@ 0x28
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	40023800 	.word	0x40023800
 800b5fc:	40020000 	.word	0x40020000

0800b600 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b614:	4619      	mov	r1, r3
 800b616:	4610      	mov	r0, r2
 800b618:	f7fe fb51 	bl	8009cbe <USBD_LL_SetupStage>
}
 800b61c:	bf00      	nop
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	460b      	mov	r3, r1
 800b62e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b636:	78fa      	ldrb	r2, [r7, #3]
 800b638:	6879      	ldr	r1, [r7, #4]
 800b63a:	4613      	mov	r3, r2
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	4413      	add	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	440b      	add	r3, r1
 800b644:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	78fb      	ldrb	r3, [r7, #3]
 800b64c:	4619      	mov	r1, r3
 800b64e:	f7fe fb8b 	bl	8009d68 <USBD_LL_DataOutStage>
}
 800b652:	bf00      	nop
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	460b      	mov	r3, r1
 800b664:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b66c:	78fa      	ldrb	r2, [r7, #3]
 800b66e:	6879      	ldr	r1, [r7, #4]
 800b670:	4613      	mov	r3, r2
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	4413      	add	r3, r2
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	440b      	add	r3, r1
 800b67a:	3320      	adds	r3, #32
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	78fb      	ldrb	r3, [r7, #3]
 800b680:	4619      	mov	r1, r3
 800b682:	f7fe fc2d 	bl	8009ee0 <USBD_LL_DataInStage>
}
 800b686:	bf00      	nop
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b082      	sub	sp, #8
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fe fd71 	bl	800a184 <USBD_LL_SOF>
}
 800b6a2:	bf00      	nop
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b084      	sub	sp, #16
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	79db      	ldrb	r3, [r3, #7]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	73fb      	strb	r3, [r7, #15]
 800b6c2:	e008      	b.n	800b6d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	79db      	ldrb	r3, [r3, #7]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d102      	bne.n	800b6d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	73fb      	strb	r3, [r7, #15]
 800b6d0:	e001      	b.n	800b6d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b6d2:	f7f5 fc8b 	bl	8000fec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b6dc:	7bfa      	ldrb	r2, [r7, #15]
 800b6de:	4611      	mov	r1, r2
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7fe fd0b 	bl	800a0fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fe fcb2 	bl	800a056 <USBD_LL_Reset>
}
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe fd06 	bl	800a11c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	6812      	ldr	r2, [r2, #0]
 800b71e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b722:	f043 0301 	orr.w	r3, r3, #1
 800b726:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	7adb      	ldrb	r3, [r3, #11]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d005      	beq.n	800b73c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b730:	4b04      	ldr	r3, [pc, #16]	@ (800b744 <HAL_PCD_SuspendCallback+0x48>)
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	4a03      	ldr	r2, [pc, #12]	@ (800b744 <HAL_PCD_SuspendCallback+0x48>)
 800b736:	f043 0306 	orr.w	r3, r3, #6
 800b73a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b73c:	bf00      	nop
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	e000ed00 	.word	0xe000ed00

0800b748 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe fcfc 	bl	800a154 <USBD_LL_Resume>
}
 800b75c:	bf00      	nop
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	460b      	mov	r3, r1
 800b76e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b776:	78fa      	ldrb	r2, [r7, #3]
 800b778:	4611      	mov	r1, r2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fe fd54 	bl	800a228 <USBD_LL_IsoOUTIncomplete>
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	460b      	mov	r3, r1
 800b792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b79a:	78fa      	ldrb	r2, [r7, #3]
 800b79c:	4611      	mov	r1, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fd10 	bl	800a1c4 <USBD_LL_IsoINIncomplete>
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe fd66 	bl	800a28c <USBD_LL_DevConnected>
}
 800b7c0:	bf00      	nop
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fd63 	bl	800a2a2 <USBD_LL_DevDisconnected>
}
 800b7dc:	bf00      	nop
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d13c      	bne.n	800b86e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b7f4:	4a20      	ldr	r2, [pc, #128]	@ (800b878 <USBD_LL_Init+0x94>)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a1e      	ldr	r2, [pc, #120]	@ (800b878 <USBD_LL_Init+0x94>)
 800b800:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b804:	4b1c      	ldr	r3, [pc, #112]	@ (800b878 <USBD_LL_Init+0x94>)
 800b806:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b80a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b80c:	4b1a      	ldr	r3, [pc, #104]	@ (800b878 <USBD_LL_Init+0x94>)
 800b80e:	2204      	movs	r2, #4
 800b810:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b812:	4b19      	ldr	r3, [pc, #100]	@ (800b878 <USBD_LL_Init+0x94>)
 800b814:	2202      	movs	r2, #2
 800b816:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b818:	4b17      	ldr	r3, [pc, #92]	@ (800b878 <USBD_LL_Init+0x94>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b81e:	4b16      	ldr	r3, [pc, #88]	@ (800b878 <USBD_LL_Init+0x94>)
 800b820:	2202      	movs	r2, #2
 800b822:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b824:	4b14      	ldr	r3, [pc, #80]	@ (800b878 <USBD_LL_Init+0x94>)
 800b826:	2200      	movs	r2, #0
 800b828:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b82a:	4b13      	ldr	r3, [pc, #76]	@ (800b878 <USBD_LL_Init+0x94>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b830:	4b11      	ldr	r3, [pc, #68]	@ (800b878 <USBD_LL_Init+0x94>)
 800b832:	2200      	movs	r2, #0
 800b834:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b836:	4b10      	ldr	r3, [pc, #64]	@ (800b878 <USBD_LL_Init+0x94>)
 800b838:	2200      	movs	r2, #0
 800b83a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b83c:	4b0e      	ldr	r3, [pc, #56]	@ (800b878 <USBD_LL_Init+0x94>)
 800b83e:	2200      	movs	r2, #0
 800b840:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b842:	480d      	ldr	r0, [pc, #52]	@ (800b878 <USBD_LL_Init+0x94>)
 800b844:	f7f9 fb8e 	bl	8004f64 <HAL_PCD_Init>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b84e:	f7f5 fbcd 	bl	8000fec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b852:	2180      	movs	r1, #128	@ 0x80
 800b854:	4808      	ldr	r0, [pc, #32]	@ (800b878 <USBD_LL_Init+0x94>)
 800b856:	f7fa fdba 	bl	80063ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b85a:	2240      	movs	r2, #64	@ 0x40
 800b85c:	2100      	movs	r1, #0
 800b85e:	4806      	ldr	r0, [pc, #24]	@ (800b878 <USBD_LL_Init+0x94>)
 800b860:	f7fa fd6e 	bl	8006340 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b864:	2280      	movs	r2, #128	@ 0x80
 800b866:	2101      	movs	r1, #1
 800b868:	4803      	ldr	r0, [pc, #12]	@ (800b878 <USBD_LL_Init+0x94>)
 800b86a:	f7fa fd69 	bl	8006340 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	20001f28 	.word	0x20001f28

0800b87c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b884:	2300      	movs	r3, #0
 800b886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b888:	2300      	movs	r3, #0
 800b88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b892:	4618      	mov	r0, r3
 800b894:	f7f9 fc75 	bl	8005182 <HAL_PCD_Start>
 800b898:	4603      	mov	r3, r0
 800b89a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 f942 	bl	800bb28 <USBD_Get_USB_Status>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	4608      	mov	r0, r1
 800b8bc:	4611      	mov	r1, r2
 800b8be:	461a      	mov	r2, r3
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	70fb      	strb	r3, [r7, #3]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	70bb      	strb	r3, [r7, #2]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b8da:	78bb      	ldrb	r3, [r7, #2]
 800b8dc:	883a      	ldrh	r2, [r7, #0]
 800b8de:	78f9      	ldrb	r1, [r7, #3]
 800b8e0:	f7fa f949 	bl	8005b76 <HAL_PCD_EP_Open>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 f91c 	bl	800bb28 <USBD_Get_USB_Status>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	460b      	mov	r3, r1
 800b908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b90a:	2300      	movs	r3, #0
 800b90c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b90e:	2300      	movs	r3, #0
 800b910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b918:	78fa      	ldrb	r2, [r7, #3]
 800b91a:	4611      	mov	r1, r2
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fa f994 	bl	8005c4a <HAL_PCD_EP_Close>
 800b922:	4603      	mov	r3, r0
 800b924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b926:	7bfb      	ldrb	r3, [r7, #15]
 800b928:	4618      	mov	r0, r3
 800b92a:	f000 f8fd 	bl	800bb28 <USBD_Get_USB_Status>
 800b92e:	4603      	mov	r3, r0
 800b930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b932:	7bbb      	ldrb	r3, [r7, #14]
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	460b      	mov	r3, r1
 800b946:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b948:	2300      	movs	r3, #0
 800b94a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b956:	78fa      	ldrb	r2, [r7, #3]
 800b958:	4611      	mov	r1, r2
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7fa fa4c 	bl	8005df8 <HAL_PCD_EP_SetStall>
 800b960:	4603      	mov	r3, r0
 800b962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b964:	7bfb      	ldrb	r3, [r7, #15]
 800b966:	4618      	mov	r0, r3
 800b968:	f000 f8de 	bl	800bb28 <USBD_Get_USB_Status>
 800b96c:	4603      	mov	r3, r0
 800b96e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b970:	7bbb      	ldrb	r3, [r7, #14]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b084      	sub	sp, #16
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b994:	78fa      	ldrb	r2, [r7, #3]
 800b996:	4611      	mov	r1, r2
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fa fa90 	bl	8005ebe <HAL_PCD_EP_ClrStall>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 f8bf 	bl	800bb28 <USBD_Get_USB_Status>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b085      	sub	sp, #20
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b9cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	da0b      	bge.n	800b9ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b9d4:	78fb      	ldrb	r3, [r7, #3]
 800b9d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9da:	68f9      	ldr	r1, [r7, #12]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	00db      	lsls	r3, r3, #3
 800b9e0:	4413      	add	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	440b      	add	r3, r1
 800b9e6:	3316      	adds	r3, #22
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	e00b      	b.n	800ba04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9f2:	68f9      	ldr	r1, [r7, #12]
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	00db      	lsls	r3, r3, #3
 800b9f8:	4413      	add	r3, r2
 800b9fa:	009b      	lsls	r3, r3, #2
 800b9fc:	440b      	add	r3, r1
 800b9fe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ba02:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba2a:	78fa      	ldrb	r2, [r7, #3]
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fa f87d 	bl	8005b2e <HAL_PCD_SetAddress>
 800ba34:	4603      	mov	r3, r0
 800ba36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f000 f874 	bl	800bb28 <USBD_Get_USB_Status>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b086      	sub	sp, #24
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	60f8      	str	r0, [r7, #12]
 800ba56:	607a      	str	r2, [r7, #4]
 800ba58:	603b      	str	r3, [r7, #0]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ba6c:	7af9      	ldrb	r1, [r7, #11]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	f7fa f987 	bl	8005d84 <HAL_PCD_EP_Transmit>
 800ba76:	4603      	mov	r3, r0
 800ba78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f853 	bl	800bb28 <USBD_Get_USB_Status>
 800ba82:	4603      	mov	r3, r0
 800ba84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba86:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3718      	adds	r7, #24
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	607a      	str	r2, [r7, #4]
 800ba9a:	603b      	str	r3, [r7, #0]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baa4:	2300      	movs	r3, #0
 800baa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800baae:	7af9      	ldrb	r1, [r7, #11]
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	f7fa f913 	bl	8005cde <HAL_PCD_EP_Receive>
 800bab8:	4603      	mov	r3, r0
 800baba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800babc:	7dfb      	ldrb	r3, [r7, #23]
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 f832 	bl	800bb28 <USBD_Get_USB_Status>
 800bac4:	4603      	mov	r3, r0
 800bac6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bac8:	7dbb      	ldrb	r3, [r7, #22]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	460b      	mov	r3, r1
 800badc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bae4:	78fa      	ldrb	r2, [r7, #3]
 800bae6:	4611      	mov	r1, r2
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fa f933 	bl	8005d54 <HAL_PCD_EP_GetRxCount>
 800baee:	4603      	mov	r3, r0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb00:	4b03      	ldr	r3, [pc, #12]	@ (800bb10 <USBD_static_malloc+0x18>)
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	2000240c 	.word	0x2000240c

0800bb14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]

}
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb32:	2300      	movs	r3, #0
 800bb34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb36:	79fb      	ldrb	r3, [r7, #7]
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d817      	bhi.n	800bb6c <USBD_Get_USB_Status+0x44>
 800bb3c:	a201      	add	r2, pc, #4	@ (adr r2, 800bb44 <USBD_Get_USB_Status+0x1c>)
 800bb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb42:	bf00      	nop
 800bb44:	0800bb55 	.word	0x0800bb55
 800bb48:	0800bb5b 	.word	0x0800bb5b
 800bb4c:	0800bb61 	.word	0x0800bb61
 800bb50:	0800bb67 	.word	0x0800bb67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	73fb      	strb	r3, [r7, #15]
    break;
 800bb58:	e00b      	b.n	800bb72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb5e:	e008      	b.n	800bb72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb60:	2301      	movs	r3, #1
 800bb62:	73fb      	strb	r3, [r7, #15]
    break;
 800bb64:	e005      	b.n	800bb72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb66:	2303      	movs	r3, #3
 800bb68:	73fb      	strb	r3, [r7, #15]
    break;
 800bb6a:	e002      	b.n	800bb72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb6c:	2303      	movs	r3, #3
 800bb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb70:	bf00      	nop
  }
  return usb_status;
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <siprintf>:
 800bb80:	b40e      	push	{r1, r2, r3}
 800bb82:	b510      	push	{r4, lr}
 800bb84:	b09d      	sub	sp, #116	@ 0x74
 800bb86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bb88:	9002      	str	r0, [sp, #8]
 800bb8a:	9006      	str	r0, [sp, #24]
 800bb8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bb90:	480a      	ldr	r0, [pc, #40]	@ (800bbbc <siprintf+0x3c>)
 800bb92:	9107      	str	r1, [sp, #28]
 800bb94:	9104      	str	r1, [sp, #16]
 800bb96:	490a      	ldr	r1, [pc, #40]	@ (800bbc0 <siprintf+0x40>)
 800bb98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb9c:	9105      	str	r1, [sp, #20]
 800bb9e:	2400      	movs	r4, #0
 800bba0:	a902      	add	r1, sp, #8
 800bba2:	6800      	ldr	r0, [r0, #0]
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800bba8:	f000 f9a2 	bl	800bef0 <_svfiprintf_r>
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	701c      	strb	r4, [r3, #0]
 800bbb0:	b01d      	add	sp, #116	@ 0x74
 800bbb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbb6:	b003      	add	sp, #12
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	20000100 	.word	0x20000100
 800bbc0:	ffff0208 	.word	0xffff0208

0800bbc4 <memset>:
 800bbc4:	4402      	add	r2, r0
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d100      	bne.n	800bbce <memset+0xa>
 800bbcc:	4770      	bx	lr
 800bbce:	f803 1b01 	strb.w	r1, [r3], #1
 800bbd2:	e7f9      	b.n	800bbc8 <memset+0x4>

0800bbd4 <__errno>:
 800bbd4:	4b01      	ldr	r3, [pc, #4]	@ (800bbdc <__errno+0x8>)
 800bbd6:	6818      	ldr	r0, [r3, #0]
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	20000100 	.word	0x20000100

0800bbe0 <__libc_init_array>:
 800bbe0:	b570      	push	{r4, r5, r6, lr}
 800bbe2:	4d0d      	ldr	r5, [pc, #52]	@ (800bc18 <__libc_init_array+0x38>)
 800bbe4:	4c0d      	ldr	r4, [pc, #52]	@ (800bc1c <__libc_init_array+0x3c>)
 800bbe6:	1b64      	subs	r4, r4, r5
 800bbe8:	10a4      	asrs	r4, r4, #2
 800bbea:	2600      	movs	r6, #0
 800bbec:	42a6      	cmp	r6, r4
 800bbee:	d109      	bne.n	800bc04 <__libc_init_array+0x24>
 800bbf0:	4d0b      	ldr	r5, [pc, #44]	@ (800bc20 <__libc_init_array+0x40>)
 800bbf2:	4c0c      	ldr	r4, [pc, #48]	@ (800bc24 <__libc_init_array+0x44>)
 800bbf4:	f000 fc64 	bl	800c4c0 <_init>
 800bbf8:	1b64      	subs	r4, r4, r5
 800bbfa:	10a4      	asrs	r4, r4, #2
 800bbfc:	2600      	movs	r6, #0
 800bbfe:	42a6      	cmp	r6, r4
 800bc00:	d105      	bne.n	800bc0e <__libc_init_array+0x2e>
 800bc02:	bd70      	pop	{r4, r5, r6, pc}
 800bc04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc08:	4798      	blx	r3
 800bc0a:	3601      	adds	r6, #1
 800bc0c:	e7ee      	b.n	800bbec <__libc_init_array+0xc>
 800bc0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc12:	4798      	blx	r3
 800bc14:	3601      	adds	r6, #1
 800bc16:	e7f2      	b.n	800bbfe <__libc_init_array+0x1e>
 800bc18:	0800d30c 	.word	0x0800d30c
 800bc1c:	0800d30c 	.word	0x0800d30c
 800bc20:	0800d30c 	.word	0x0800d30c
 800bc24:	0800d310 	.word	0x0800d310

0800bc28 <__retarget_lock_acquire_recursive>:
 800bc28:	4770      	bx	lr

0800bc2a <__retarget_lock_release_recursive>:
 800bc2a:	4770      	bx	lr

0800bc2c <memcpy>:
 800bc2c:	440a      	add	r2, r1
 800bc2e:	4291      	cmp	r1, r2
 800bc30:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc34:	d100      	bne.n	800bc38 <memcpy+0xc>
 800bc36:	4770      	bx	lr
 800bc38:	b510      	push	{r4, lr}
 800bc3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc42:	4291      	cmp	r1, r2
 800bc44:	d1f9      	bne.n	800bc3a <memcpy+0xe>
 800bc46:	bd10      	pop	{r4, pc}

0800bc48 <_free_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	2900      	cmp	r1, #0
 800bc4e:	d041      	beq.n	800bcd4 <_free_r+0x8c>
 800bc50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc54:	1f0c      	subs	r4, r1, #4
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	bfb8      	it	lt
 800bc5a:	18e4      	addlt	r4, r4, r3
 800bc5c:	f000 f8e0 	bl	800be20 <__malloc_lock>
 800bc60:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd8 <_free_r+0x90>)
 800bc62:	6813      	ldr	r3, [r2, #0]
 800bc64:	b933      	cbnz	r3, 800bc74 <_free_r+0x2c>
 800bc66:	6063      	str	r3, [r4, #4]
 800bc68:	6014      	str	r4, [r2, #0]
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc70:	f000 b8dc 	b.w	800be2c <__malloc_unlock>
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	d908      	bls.n	800bc8a <_free_r+0x42>
 800bc78:	6820      	ldr	r0, [r4, #0]
 800bc7a:	1821      	adds	r1, r4, r0
 800bc7c:	428b      	cmp	r3, r1
 800bc7e:	bf01      	itttt	eq
 800bc80:	6819      	ldreq	r1, [r3, #0]
 800bc82:	685b      	ldreq	r3, [r3, #4]
 800bc84:	1809      	addeq	r1, r1, r0
 800bc86:	6021      	streq	r1, [r4, #0]
 800bc88:	e7ed      	b.n	800bc66 <_free_r+0x1e>
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	b10b      	cbz	r3, 800bc94 <_free_r+0x4c>
 800bc90:	42a3      	cmp	r3, r4
 800bc92:	d9fa      	bls.n	800bc8a <_free_r+0x42>
 800bc94:	6811      	ldr	r1, [r2, #0]
 800bc96:	1850      	adds	r0, r2, r1
 800bc98:	42a0      	cmp	r0, r4
 800bc9a:	d10b      	bne.n	800bcb4 <_free_r+0x6c>
 800bc9c:	6820      	ldr	r0, [r4, #0]
 800bc9e:	4401      	add	r1, r0
 800bca0:	1850      	adds	r0, r2, r1
 800bca2:	4283      	cmp	r3, r0
 800bca4:	6011      	str	r1, [r2, #0]
 800bca6:	d1e0      	bne.n	800bc6a <_free_r+0x22>
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	6053      	str	r3, [r2, #4]
 800bcae:	4408      	add	r0, r1
 800bcb0:	6010      	str	r0, [r2, #0]
 800bcb2:	e7da      	b.n	800bc6a <_free_r+0x22>
 800bcb4:	d902      	bls.n	800bcbc <_free_r+0x74>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	602b      	str	r3, [r5, #0]
 800bcba:	e7d6      	b.n	800bc6a <_free_r+0x22>
 800bcbc:	6820      	ldr	r0, [r4, #0]
 800bcbe:	1821      	adds	r1, r4, r0
 800bcc0:	428b      	cmp	r3, r1
 800bcc2:	bf04      	itt	eq
 800bcc4:	6819      	ldreq	r1, [r3, #0]
 800bcc6:	685b      	ldreq	r3, [r3, #4]
 800bcc8:	6063      	str	r3, [r4, #4]
 800bcca:	bf04      	itt	eq
 800bccc:	1809      	addeq	r1, r1, r0
 800bcce:	6021      	streq	r1, [r4, #0]
 800bcd0:	6054      	str	r4, [r2, #4]
 800bcd2:	e7ca      	b.n	800bc6a <_free_r+0x22>
 800bcd4:	bd38      	pop	{r3, r4, r5, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20002770 	.word	0x20002770

0800bcdc <sbrk_aligned>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	4e0f      	ldr	r6, [pc, #60]	@ (800bd1c <sbrk_aligned+0x40>)
 800bce0:	460c      	mov	r4, r1
 800bce2:	6831      	ldr	r1, [r6, #0]
 800bce4:	4605      	mov	r5, r0
 800bce6:	b911      	cbnz	r1, 800bcee <sbrk_aligned+0x12>
 800bce8:	f000 fba4 	bl	800c434 <_sbrk_r>
 800bcec:	6030      	str	r0, [r6, #0]
 800bcee:	4621      	mov	r1, r4
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f000 fb9f 	bl	800c434 <_sbrk_r>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	d103      	bne.n	800bd02 <sbrk_aligned+0x26>
 800bcfa:	f04f 34ff 	mov.w	r4, #4294967295
 800bcfe:	4620      	mov	r0, r4
 800bd00:	bd70      	pop	{r4, r5, r6, pc}
 800bd02:	1cc4      	adds	r4, r0, #3
 800bd04:	f024 0403 	bic.w	r4, r4, #3
 800bd08:	42a0      	cmp	r0, r4
 800bd0a:	d0f8      	beq.n	800bcfe <sbrk_aligned+0x22>
 800bd0c:	1a21      	subs	r1, r4, r0
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f000 fb90 	bl	800c434 <_sbrk_r>
 800bd14:	3001      	adds	r0, #1
 800bd16:	d1f2      	bne.n	800bcfe <sbrk_aligned+0x22>
 800bd18:	e7ef      	b.n	800bcfa <sbrk_aligned+0x1e>
 800bd1a:	bf00      	nop
 800bd1c:	2000276c 	.word	0x2000276c

0800bd20 <_malloc_r>:
 800bd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd24:	1ccd      	adds	r5, r1, #3
 800bd26:	f025 0503 	bic.w	r5, r5, #3
 800bd2a:	3508      	adds	r5, #8
 800bd2c:	2d0c      	cmp	r5, #12
 800bd2e:	bf38      	it	cc
 800bd30:	250c      	movcc	r5, #12
 800bd32:	2d00      	cmp	r5, #0
 800bd34:	4606      	mov	r6, r0
 800bd36:	db01      	blt.n	800bd3c <_malloc_r+0x1c>
 800bd38:	42a9      	cmp	r1, r5
 800bd3a:	d904      	bls.n	800bd46 <_malloc_r+0x26>
 800bd3c:	230c      	movs	r3, #12
 800bd3e:	6033      	str	r3, [r6, #0]
 800bd40:	2000      	movs	r0, #0
 800bd42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be1c <_malloc_r+0xfc>
 800bd4a:	f000 f869 	bl	800be20 <__malloc_lock>
 800bd4e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd52:	461c      	mov	r4, r3
 800bd54:	bb44      	cbnz	r4, 800bda8 <_malloc_r+0x88>
 800bd56:	4629      	mov	r1, r5
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f7ff ffbf 	bl	800bcdc <sbrk_aligned>
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	4604      	mov	r4, r0
 800bd62:	d158      	bne.n	800be16 <_malloc_r+0xf6>
 800bd64:	f8d8 4000 	ldr.w	r4, [r8]
 800bd68:	4627      	mov	r7, r4
 800bd6a:	2f00      	cmp	r7, #0
 800bd6c:	d143      	bne.n	800bdf6 <_malloc_r+0xd6>
 800bd6e:	2c00      	cmp	r4, #0
 800bd70:	d04b      	beq.n	800be0a <_malloc_r+0xea>
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	4639      	mov	r1, r7
 800bd76:	4630      	mov	r0, r6
 800bd78:	eb04 0903 	add.w	r9, r4, r3
 800bd7c:	f000 fb5a 	bl	800c434 <_sbrk_r>
 800bd80:	4581      	cmp	r9, r0
 800bd82:	d142      	bne.n	800be0a <_malloc_r+0xea>
 800bd84:	6821      	ldr	r1, [r4, #0]
 800bd86:	1a6d      	subs	r5, r5, r1
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	f7ff ffa6 	bl	800bcdc <sbrk_aligned>
 800bd90:	3001      	adds	r0, #1
 800bd92:	d03a      	beq.n	800be0a <_malloc_r+0xea>
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	442b      	add	r3, r5
 800bd98:	6023      	str	r3, [r4, #0]
 800bd9a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd9e:	685a      	ldr	r2, [r3, #4]
 800bda0:	bb62      	cbnz	r2, 800bdfc <_malloc_r+0xdc>
 800bda2:	f8c8 7000 	str.w	r7, [r8]
 800bda6:	e00f      	b.n	800bdc8 <_malloc_r+0xa8>
 800bda8:	6822      	ldr	r2, [r4, #0]
 800bdaa:	1b52      	subs	r2, r2, r5
 800bdac:	d420      	bmi.n	800bdf0 <_malloc_r+0xd0>
 800bdae:	2a0b      	cmp	r2, #11
 800bdb0:	d917      	bls.n	800bde2 <_malloc_r+0xc2>
 800bdb2:	1961      	adds	r1, r4, r5
 800bdb4:	42a3      	cmp	r3, r4
 800bdb6:	6025      	str	r5, [r4, #0]
 800bdb8:	bf18      	it	ne
 800bdba:	6059      	strne	r1, [r3, #4]
 800bdbc:	6863      	ldr	r3, [r4, #4]
 800bdbe:	bf08      	it	eq
 800bdc0:	f8c8 1000 	streq.w	r1, [r8]
 800bdc4:	5162      	str	r2, [r4, r5]
 800bdc6:	604b      	str	r3, [r1, #4]
 800bdc8:	4630      	mov	r0, r6
 800bdca:	f000 f82f 	bl	800be2c <__malloc_unlock>
 800bdce:	f104 000b 	add.w	r0, r4, #11
 800bdd2:	1d23      	adds	r3, r4, #4
 800bdd4:	f020 0007 	bic.w	r0, r0, #7
 800bdd8:	1ac2      	subs	r2, r0, r3
 800bdda:	bf1c      	itt	ne
 800bddc:	1a1b      	subne	r3, r3, r0
 800bdde:	50a3      	strne	r3, [r4, r2]
 800bde0:	e7af      	b.n	800bd42 <_malloc_r+0x22>
 800bde2:	6862      	ldr	r2, [r4, #4]
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	bf0c      	ite	eq
 800bde8:	f8c8 2000 	streq.w	r2, [r8]
 800bdec:	605a      	strne	r2, [r3, #4]
 800bdee:	e7eb      	b.n	800bdc8 <_malloc_r+0xa8>
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	6864      	ldr	r4, [r4, #4]
 800bdf4:	e7ae      	b.n	800bd54 <_malloc_r+0x34>
 800bdf6:	463c      	mov	r4, r7
 800bdf8:	687f      	ldr	r7, [r7, #4]
 800bdfa:	e7b6      	b.n	800bd6a <_malloc_r+0x4a>
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	42a3      	cmp	r3, r4
 800be02:	d1fb      	bne.n	800bdfc <_malloc_r+0xdc>
 800be04:	2300      	movs	r3, #0
 800be06:	6053      	str	r3, [r2, #4]
 800be08:	e7de      	b.n	800bdc8 <_malloc_r+0xa8>
 800be0a:	230c      	movs	r3, #12
 800be0c:	6033      	str	r3, [r6, #0]
 800be0e:	4630      	mov	r0, r6
 800be10:	f000 f80c 	bl	800be2c <__malloc_unlock>
 800be14:	e794      	b.n	800bd40 <_malloc_r+0x20>
 800be16:	6005      	str	r5, [r0, #0]
 800be18:	e7d6      	b.n	800bdc8 <_malloc_r+0xa8>
 800be1a:	bf00      	nop
 800be1c:	20002770 	.word	0x20002770

0800be20 <__malloc_lock>:
 800be20:	4801      	ldr	r0, [pc, #4]	@ (800be28 <__malloc_lock+0x8>)
 800be22:	f7ff bf01 	b.w	800bc28 <__retarget_lock_acquire_recursive>
 800be26:	bf00      	nop
 800be28:	20002768 	.word	0x20002768

0800be2c <__malloc_unlock>:
 800be2c:	4801      	ldr	r0, [pc, #4]	@ (800be34 <__malloc_unlock+0x8>)
 800be2e:	f7ff befc 	b.w	800bc2a <__retarget_lock_release_recursive>
 800be32:	bf00      	nop
 800be34:	20002768 	.word	0x20002768

0800be38 <__ssputs_r>:
 800be38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be3c:	688e      	ldr	r6, [r1, #8]
 800be3e:	461f      	mov	r7, r3
 800be40:	42be      	cmp	r6, r7
 800be42:	680b      	ldr	r3, [r1, #0]
 800be44:	4682      	mov	sl, r0
 800be46:	460c      	mov	r4, r1
 800be48:	4690      	mov	r8, r2
 800be4a:	d82d      	bhi.n	800bea8 <__ssputs_r+0x70>
 800be4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be54:	d026      	beq.n	800bea4 <__ssputs_r+0x6c>
 800be56:	6965      	ldr	r5, [r4, #20]
 800be58:	6909      	ldr	r1, [r1, #16]
 800be5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be5e:	eba3 0901 	sub.w	r9, r3, r1
 800be62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be66:	1c7b      	adds	r3, r7, #1
 800be68:	444b      	add	r3, r9
 800be6a:	106d      	asrs	r5, r5, #1
 800be6c:	429d      	cmp	r5, r3
 800be6e:	bf38      	it	cc
 800be70:	461d      	movcc	r5, r3
 800be72:	0553      	lsls	r3, r2, #21
 800be74:	d527      	bpl.n	800bec6 <__ssputs_r+0x8e>
 800be76:	4629      	mov	r1, r5
 800be78:	f7ff ff52 	bl	800bd20 <_malloc_r>
 800be7c:	4606      	mov	r6, r0
 800be7e:	b360      	cbz	r0, 800beda <__ssputs_r+0xa2>
 800be80:	6921      	ldr	r1, [r4, #16]
 800be82:	464a      	mov	r2, r9
 800be84:	f7ff fed2 	bl	800bc2c <memcpy>
 800be88:	89a3      	ldrh	r3, [r4, #12]
 800be8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be92:	81a3      	strh	r3, [r4, #12]
 800be94:	6126      	str	r6, [r4, #16]
 800be96:	6165      	str	r5, [r4, #20]
 800be98:	444e      	add	r6, r9
 800be9a:	eba5 0509 	sub.w	r5, r5, r9
 800be9e:	6026      	str	r6, [r4, #0]
 800bea0:	60a5      	str	r5, [r4, #8]
 800bea2:	463e      	mov	r6, r7
 800bea4:	42be      	cmp	r6, r7
 800bea6:	d900      	bls.n	800beaa <__ssputs_r+0x72>
 800bea8:	463e      	mov	r6, r7
 800beaa:	6820      	ldr	r0, [r4, #0]
 800beac:	4632      	mov	r2, r6
 800beae:	4641      	mov	r1, r8
 800beb0:	f000 faa6 	bl	800c400 <memmove>
 800beb4:	68a3      	ldr	r3, [r4, #8]
 800beb6:	1b9b      	subs	r3, r3, r6
 800beb8:	60a3      	str	r3, [r4, #8]
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	4433      	add	r3, r6
 800bebe:	6023      	str	r3, [r4, #0]
 800bec0:	2000      	movs	r0, #0
 800bec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec6:	462a      	mov	r2, r5
 800bec8:	f000 fac4 	bl	800c454 <_realloc_r>
 800becc:	4606      	mov	r6, r0
 800bece:	2800      	cmp	r0, #0
 800bed0:	d1e0      	bne.n	800be94 <__ssputs_r+0x5c>
 800bed2:	6921      	ldr	r1, [r4, #16]
 800bed4:	4650      	mov	r0, sl
 800bed6:	f7ff feb7 	bl	800bc48 <_free_r>
 800beda:	230c      	movs	r3, #12
 800bedc:	f8ca 3000 	str.w	r3, [sl]
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	f04f 30ff 	mov.w	r0, #4294967295
 800beec:	e7e9      	b.n	800bec2 <__ssputs_r+0x8a>
	...

0800bef0 <_svfiprintf_r>:
 800bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef4:	4698      	mov	r8, r3
 800bef6:	898b      	ldrh	r3, [r1, #12]
 800bef8:	061b      	lsls	r3, r3, #24
 800befa:	b09d      	sub	sp, #116	@ 0x74
 800befc:	4607      	mov	r7, r0
 800befe:	460d      	mov	r5, r1
 800bf00:	4614      	mov	r4, r2
 800bf02:	d510      	bpl.n	800bf26 <_svfiprintf_r+0x36>
 800bf04:	690b      	ldr	r3, [r1, #16]
 800bf06:	b973      	cbnz	r3, 800bf26 <_svfiprintf_r+0x36>
 800bf08:	2140      	movs	r1, #64	@ 0x40
 800bf0a:	f7ff ff09 	bl	800bd20 <_malloc_r>
 800bf0e:	6028      	str	r0, [r5, #0]
 800bf10:	6128      	str	r0, [r5, #16]
 800bf12:	b930      	cbnz	r0, 800bf22 <_svfiprintf_r+0x32>
 800bf14:	230c      	movs	r3, #12
 800bf16:	603b      	str	r3, [r7, #0]
 800bf18:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1c:	b01d      	add	sp, #116	@ 0x74
 800bf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf22:	2340      	movs	r3, #64	@ 0x40
 800bf24:	616b      	str	r3, [r5, #20]
 800bf26:	2300      	movs	r3, #0
 800bf28:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf2a:	2320      	movs	r3, #32
 800bf2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf30:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf34:	2330      	movs	r3, #48	@ 0x30
 800bf36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c0d4 <_svfiprintf_r+0x1e4>
 800bf3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf3e:	f04f 0901 	mov.w	r9, #1
 800bf42:	4623      	mov	r3, r4
 800bf44:	469a      	mov	sl, r3
 800bf46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf4a:	b10a      	cbz	r2, 800bf50 <_svfiprintf_r+0x60>
 800bf4c:	2a25      	cmp	r2, #37	@ 0x25
 800bf4e:	d1f9      	bne.n	800bf44 <_svfiprintf_r+0x54>
 800bf50:	ebba 0b04 	subs.w	fp, sl, r4
 800bf54:	d00b      	beq.n	800bf6e <_svfiprintf_r+0x7e>
 800bf56:	465b      	mov	r3, fp
 800bf58:	4622      	mov	r2, r4
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	4638      	mov	r0, r7
 800bf5e:	f7ff ff6b 	bl	800be38 <__ssputs_r>
 800bf62:	3001      	adds	r0, #1
 800bf64:	f000 80a7 	beq.w	800c0b6 <_svfiprintf_r+0x1c6>
 800bf68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf6a:	445a      	add	r2, fp
 800bf6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf6e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	f000 809f 	beq.w	800c0b6 <_svfiprintf_r+0x1c6>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf82:	f10a 0a01 	add.w	sl, sl, #1
 800bf86:	9304      	str	r3, [sp, #16]
 800bf88:	9307      	str	r3, [sp, #28]
 800bf8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf8e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf90:	4654      	mov	r4, sl
 800bf92:	2205      	movs	r2, #5
 800bf94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf98:	484e      	ldr	r0, [pc, #312]	@ (800c0d4 <_svfiprintf_r+0x1e4>)
 800bf9a:	f7f4 f919 	bl	80001d0 <memchr>
 800bf9e:	9a04      	ldr	r2, [sp, #16]
 800bfa0:	b9d8      	cbnz	r0, 800bfda <_svfiprintf_r+0xea>
 800bfa2:	06d0      	lsls	r0, r2, #27
 800bfa4:	bf44      	itt	mi
 800bfa6:	2320      	movmi	r3, #32
 800bfa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfac:	0711      	lsls	r1, r2, #28
 800bfae:	bf44      	itt	mi
 800bfb0:	232b      	movmi	r3, #43	@ 0x2b
 800bfb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfb6:	f89a 3000 	ldrb.w	r3, [sl]
 800bfba:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfbc:	d015      	beq.n	800bfea <_svfiprintf_r+0xfa>
 800bfbe:	9a07      	ldr	r2, [sp, #28]
 800bfc0:	4654      	mov	r4, sl
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	f04f 0c0a 	mov.w	ip, #10
 800bfc8:	4621      	mov	r1, r4
 800bfca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfce:	3b30      	subs	r3, #48	@ 0x30
 800bfd0:	2b09      	cmp	r3, #9
 800bfd2:	d94b      	bls.n	800c06c <_svfiprintf_r+0x17c>
 800bfd4:	b1b0      	cbz	r0, 800c004 <_svfiprintf_r+0x114>
 800bfd6:	9207      	str	r2, [sp, #28]
 800bfd8:	e014      	b.n	800c004 <_svfiprintf_r+0x114>
 800bfda:	eba0 0308 	sub.w	r3, r0, r8
 800bfde:	fa09 f303 	lsl.w	r3, r9, r3
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	9304      	str	r3, [sp, #16]
 800bfe6:	46a2      	mov	sl, r4
 800bfe8:	e7d2      	b.n	800bf90 <_svfiprintf_r+0xa0>
 800bfea:	9b03      	ldr	r3, [sp, #12]
 800bfec:	1d19      	adds	r1, r3, #4
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	9103      	str	r1, [sp, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	bfbb      	ittet	lt
 800bff6:	425b      	neglt	r3, r3
 800bff8:	f042 0202 	orrlt.w	r2, r2, #2
 800bffc:	9307      	strge	r3, [sp, #28]
 800bffe:	9307      	strlt	r3, [sp, #28]
 800c000:	bfb8      	it	lt
 800c002:	9204      	strlt	r2, [sp, #16]
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	2b2e      	cmp	r3, #46	@ 0x2e
 800c008:	d10a      	bne.n	800c020 <_svfiprintf_r+0x130>
 800c00a:	7863      	ldrb	r3, [r4, #1]
 800c00c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c00e:	d132      	bne.n	800c076 <_svfiprintf_r+0x186>
 800c010:	9b03      	ldr	r3, [sp, #12]
 800c012:	1d1a      	adds	r2, r3, #4
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	9203      	str	r2, [sp, #12]
 800c018:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c01c:	3402      	adds	r4, #2
 800c01e:	9305      	str	r3, [sp, #20]
 800c020:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c0e4 <_svfiprintf_r+0x1f4>
 800c024:	7821      	ldrb	r1, [r4, #0]
 800c026:	2203      	movs	r2, #3
 800c028:	4650      	mov	r0, sl
 800c02a:	f7f4 f8d1 	bl	80001d0 <memchr>
 800c02e:	b138      	cbz	r0, 800c040 <_svfiprintf_r+0x150>
 800c030:	9b04      	ldr	r3, [sp, #16]
 800c032:	eba0 000a 	sub.w	r0, r0, sl
 800c036:	2240      	movs	r2, #64	@ 0x40
 800c038:	4082      	lsls	r2, r0
 800c03a:	4313      	orrs	r3, r2
 800c03c:	3401      	adds	r4, #1
 800c03e:	9304      	str	r3, [sp, #16]
 800c040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c044:	4824      	ldr	r0, [pc, #144]	@ (800c0d8 <_svfiprintf_r+0x1e8>)
 800c046:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c04a:	2206      	movs	r2, #6
 800c04c:	f7f4 f8c0 	bl	80001d0 <memchr>
 800c050:	2800      	cmp	r0, #0
 800c052:	d036      	beq.n	800c0c2 <_svfiprintf_r+0x1d2>
 800c054:	4b21      	ldr	r3, [pc, #132]	@ (800c0dc <_svfiprintf_r+0x1ec>)
 800c056:	bb1b      	cbnz	r3, 800c0a0 <_svfiprintf_r+0x1b0>
 800c058:	9b03      	ldr	r3, [sp, #12]
 800c05a:	3307      	adds	r3, #7
 800c05c:	f023 0307 	bic.w	r3, r3, #7
 800c060:	3308      	adds	r3, #8
 800c062:	9303      	str	r3, [sp, #12]
 800c064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c066:	4433      	add	r3, r6
 800c068:	9309      	str	r3, [sp, #36]	@ 0x24
 800c06a:	e76a      	b.n	800bf42 <_svfiprintf_r+0x52>
 800c06c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c070:	460c      	mov	r4, r1
 800c072:	2001      	movs	r0, #1
 800c074:	e7a8      	b.n	800bfc8 <_svfiprintf_r+0xd8>
 800c076:	2300      	movs	r3, #0
 800c078:	3401      	adds	r4, #1
 800c07a:	9305      	str	r3, [sp, #20]
 800c07c:	4619      	mov	r1, r3
 800c07e:	f04f 0c0a 	mov.w	ip, #10
 800c082:	4620      	mov	r0, r4
 800c084:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c088:	3a30      	subs	r2, #48	@ 0x30
 800c08a:	2a09      	cmp	r2, #9
 800c08c:	d903      	bls.n	800c096 <_svfiprintf_r+0x1a6>
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d0c6      	beq.n	800c020 <_svfiprintf_r+0x130>
 800c092:	9105      	str	r1, [sp, #20]
 800c094:	e7c4      	b.n	800c020 <_svfiprintf_r+0x130>
 800c096:	fb0c 2101 	mla	r1, ip, r1, r2
 800c09a:	4604      	mov	r4, r0
 800c09c:	2301      	movs	r3, #1
 800c09e:	e7f0      	b.n	800c082 <_svfiprintf_r+0x192>
 800c0a0:	ab03      	add	r3, sp, #12
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	4b0e      	ldr	r3, [pc, #56]	@ (800c0e0 <_svfiprintf_r+0x1f0>)
 800c0a8:	a904      	add	r1, sp, #16
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	f3af 8000 	nop.w
 800c0b0:	1c42      	adds	r2, r0, #1
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	d1d6      	bne.n	800c064 <_svfiprintf_r+0x174>
 800c0b6:	89ab      	ldrh	r3, [r5, #12]
 800c0b8:	065b      	lsls	r3, r3, #25
 800c0ba:	f53f af2d 	bmi.w	800bf18 <_svfiprintf_r+0x28>
 800c0be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0c0:	e72c      	b.n	800bf1c <_svfiprintf_r+0x2c>
 800c0c2:	ab03      	add	r3, sp, #12
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	462a      	mov	r2, r5
 800c0c8:	4b05      	ldr	r3, [pc, #20]	@ (800c0e0 <_svfiprintf_r+0x1f0>)
 800c0ca:	a904      	add	r1, sp, #16
 800c0cc:	4638      	mov	r0, r7
 800c0ce:	f000 f879 	bl	800c1c4 <_printf_i>
 800c0d2:	e7ed      	b.n	800c0b0 <_svfiprintf_r+0x1c0>
 800c0d4:	0800d2d0 	.word	0x0800d2d0
 800c0d8:	0800d2da 	.word	0x0800d2da
 800c0dc:	00000000 	.word	0x00000000
 800c0e0:	0800be39 	.word	0x0800be39
 800c0e4:	0800d2d6 	.word	0x0800d2d6

0800c0e8 <_printf_common>:
 800c0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ec:	4616      	mov	r6, r2
 800c0ee:	4698      	mov	r8, r3
 800c0f0:	688a      	ldr	r2, [r1, #8]
 800c0f2:	690b      	ldr	r3, [r1, #16]
 800c0f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	bfb8      	it	lt
 800c0fc:	4613      	movlt	r3, r2
 800c0fe:	6033      	str	r3, [r6, #0]
 800c100:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c104:	4607      	mov	r7, r0
 800c106:	460c      	mov	r4, r1
 800c108:	b10a      	cbz	r2, 800c10e <_printf_common+0x26>
 800c10a:	3301      	adds	r3, #1
 800c10c:	6033      	str	r3, [r6, #0]
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	0699      	lsls	r1, r3, #26
 800c112:	bf42      	ittt	mi
 800c114:	6833      	ldrmi	r3, [r6, #0]
 800c116:	3302      	addmi	r3, #2
 800c118:	6033      	strmi	r3, [r6, #0]
 800c11a:	6825      	ldr	r5, [r4, #0]
 800c11c:	f015 0506 	ands.w	r5, r5, #6
 800c120:	d106      	bne.n	800c130 <_printf_common+0x48>
 800c122:	f104 0a19 	add.w	sl, r4, #25
 800c126:	68e3      	ldr	r3, [r4, #12]
 800c128:	6832      	ldr	r2, [r6, #0]
 800c12a:	1a9b      	subs	r3, r3, r2
 800c12c:	42ab      	cmp	r3, r5
 800c12e:	dc26      	bgt.n	800c17e <_printf_common+0x96>
 800c130:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c134:	6822      	ldr	r2, [r4, #0]
 800c136:	3b00      	subs	r3, #0
 800c138:	bf18      	it	ne
 800c13a:	2301      	movne	r3, #1
 800c13c:	0692      	lsls	r2, r2, #26
 800c13e:	d42b      	bmi.n	800c198 <_printf_common+0xb0>
 800c140:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c144:	4641      	mov	r1, r8
 800c146:	4638      	mov	r0, r7
 800c148:	47c8      	blx	r9
 800c14a:	3001      	adds	r0, #1
 800c14c:	d01e      	beq.n	800c18c <_printf_common+0xa4>
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	6922      	ldr	r2, [r4, #16]
 800c152:	f003 0306 	and.w	r3, r3, #6
 800c156:	2b04      	cmp	r3, #4
 800c158:	bf02      	ittt	eq
 800c15a:	68e5      	ldreq	r5, [r4, #12]
 800c15c:	6833      	ldreq	r3, [r6, #0]
 800c15e:	1aed      	subeq	r5, r5, r3
 800c160:	68a3      	ldr	r3, [r4, #8]
 800c162:	bf0c      	ite	eq
 800c164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c168:	2500      	movne	r5, #0
 800c16a:	4293      	cmp	r3, r2
 800c16c:	bfc4      	itt	gt
 800c16e:	1a9b      	subgt	r3, r3, r2
 800c170:	18ed      	addgt	r5, r5, r3
 800c172:	2600      	movs	r6, #0
 800c174:	341a      	adds	r4, #26
 800c176:	42b5      	cmp	r5, r6
 800c178:	d11a      	bne.n	800c1b0 <_printf_common+0xc8>
 800c17a:	2000      	movs	r0, #0
 800c17c:	e008      	b.n	800c190 <_printf_common+0xa8>
 800c17e:	2301      	movs	r3, #1
 800c180:	4652      	mov	r2, sl
 800c182:	4641      	mov	r1, r8
 800c184:	4638      	mov	r0, r7
 800c186:	47c8      	blx	r9
 800c188:	3001      	adds	r0, #1
 800c18a:	d103      	bne.n	800c194 <_printf_common+0xac>
 800c18c:	f04f 30ff 	mov.w	r0, #4294967295
 800c190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c194:	3501      	adds	r5, #1
 800c196:	e7c6      	b.n	800c126 <_printf_common+0x3e>
 800c198:	18e1      	adds	r1, r4, r3
 800c19a:	1c5a      	adds	r2, r3, #1
 800c19c:	2030      	movs	r0, #48	@ 0x30
 800c19e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c1a2:	4422      	add	r2, r4
 800c1a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c1a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c1ac:	3302      	adds	r3, #2
 800c1ae:	e7c7      	b.n	800c140 <_printf_common+0x58>
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	4622      	mov	r2, r4
 800c1b4:	4641      	mov	r1, r8
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	47c8      	blx	r9
 800c1ba:	3001      	adds	r0, #1
 800c1bc:	d0e6      	beq.n	800c18c <_printf_common+0xa4>
 800c1be:	3601      	adds	r6, #1
 800c1c0:	e7d9      	b.n	800c176 <_printf_common+0x8e>
	...

0800c1c4 <_printf_i>:
 800c1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c8:	7e0f      	ldrb	r7, [r1, #24]
 800c1ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1cc:	2f78      	cmp	r7, #120	@ 0x78
 800c1ce:	4691      	mov	r9, r2
 800c1d0:	4680      	mov	r8, r0
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	469a      	mov	sl, r3
 800c1d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c1da:	d807      	bhi.n	800c1ec <_printf_i+0x28>
 800c1dc:	2f62      	cmp	r7, #98	@ 0x62
 800c1de:	d80a      	bhi.n	800c1f6 <_printf_i+0x32>
 800c1e0:	2f00      	cmp	r7, #0
 800c1e2:	f000 80d1 	beq.w	800c388 <_printf_i+0x1c4>
 800c1e6:	2f58      	cmp	r7, #88	@ 0x58
 800c1e8:	f000 80b8 	beq.w	800c35c <_printf_i+0x198>
 800c1ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1f4:	e03a      	b.n	800c26c <_printf_i+0xa8>
 800c1f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1fa:	2b15      	cmp	r3, #21
 800c1fc:	d8f6      	bhi.n	800c1ec <_printf_i+0x28>
 800c1fe:	a101      	add	r1, pc, #4	@ (adr r1, 800c204 <_printf_i+0x40>)
 800c200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c204:	0800c25d 	.word	0x0800c25d
 800c208:	0800c271 	.word	0x0800c271
 800c20c:	0800c1ed 	.word	0x0800c1ed
 800c210:	0800c1ed 	.word	0x0800c1ed
 800c214:	0800c1ed 	.word	0x0800c1ed
 800c218:	0800c1ed 	.word	0x0800c1ed
 800c21c:	0800c271 	.word	0x0800c271
 800c220:	0800c1ed 	.word	0x0800c1ed
 800c224:	0800c1ed 	.word	0x0800c1ed
 800c228:	0800c1ed 	.word	0x0800c1ed
 800c22c:	0800c1ed 	.word	0x0800c1ed
 800c230:	0800c36f 	.word	0x0800c36f
 800c234:	0800c29b 	.word	0x0800c29b
 800c238:	0800c329 	.word	0x0800c329
 800c23c:	0800c1ed 	.word	0x0800c1ed
 800c240:	0800c1ed 	.word	0x0800c1ed
 800c244:	0800c391 	.word	0x0800c391
 800c248:	0800c1ed 	.word	0x0800c1ed
 800c24c:	0800c29b 	.word	0x0800c29b
 800c250:	0800c1ed 	.word	0x0800c1ed
 800c254:	0800c1ed 	.word	0x0800c1ed
 800c258:	0800c331 	.word	0x0800c331
 800c25c:	6833      	ldr	r3, [r6, #0]
 800c25e:	1d1a      	adds	r2, r3, #4
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6032      	str	r2, [r6, #0]
 800c264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c268:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c26c:	2301      	movs	r3, #1
 800c26e:	e09c      	b.n	800c3aa <_printf_i+0x1e6>
 800c270:	6833      	ldr	r3, [r6, #0]
 800c272:	6820      	ldr	r0, [r4, #0]
 800c274:	1d19      	adds	r1, r3, #4
 800c276:	6031      	str	r1, [r6, #0]
 800c278:	0606      	lsls	r6, r0, #24
 800c27a:	d501      	bpl.n	800c280 <_printf_i+0xbc>
 800c27c:	681d      	ldr	r5, [r3, #0]
 800c27e:	e003      	b.n	800c288 <_printf_i+0xc4>
 800c280:	0645      	lsls	r5, r0, #25
 800c282:	d5fb      	bpl.n	800c27c <_printf_i+0xb8>
 800c284:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c288:	2d00      	cmp	r5, #0
 800c28a:	da03      	bge.n	800c294 <_printf_i+0xd0>
 800c28c:	232d      	movs	r3, #45	@ 0x2d
 800c28e:	426d      	negs	r5, r5
 800c290:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c294:	4858      	ldr	r0, [pc, #352]	@ (800c3f8 <_printf_i+0x234>)
 800c296:	230a      	movs	r3, #10
 800c298:	e011      	b.n	800c2be <_printf_i+0xfa>
 800c29a:	6821      	ldr	r1, [r4, #0]
 800c29c:	6833      	ldr	r3, [r6, #0]
 800c29e:	0608      	lsls	r0, r1, #24
 800c2a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c2a4:	d402      	bmi.n	800c2ac <_printf_i+0xe8>
 800c2a6:	0649      	lsls	r1, r1, #25
 800c2a8:	bf48      	it	mi
 800c2aa:	b2ad      	uxthmi	r5, r5
 800c2ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800c2ae:	4852      	ldr	r0, [pc, #328]	@ (800c3f8 <_printf_i+0x234>)
 800c2b0:	6033      	str	r3, [r6, #0]
 800c2b2:	bf14      	ite	ne
 800c2b4:	230a      	movne	r3, #10
 800c2b6:	2308      	moveq	r3, #8
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c2be:	6866      	ldr	r6, [r4, #4]
 800c2c0:	60a6      	str	r6, [r4, #8]
 800c2c2:	2e00      	cmp	r6, #0
 800c2c4:	db05      	blt.n	800c2d2 <_printf_i+0x10e>
 800c2c6:	6821      	ldr	r1, [r4, #0]
 800c2c8:	432e      	orrs	r6, r5
 800c2ca:	f021 0104 	bic.w	r1, r1, #4
 800c2ce:	6021      	str	r1, [r4, #0]
 800c2d0:	d04b      	beq.n	800c36a <_printf_i+0x1a6>
 800c2d2:	4616      	mov	r6, r2
 800c2d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2d8:	fb03 5711 	mls	r7, r3, r1, r5
 800c2dc:	5dc7      	ldrb	r7, [r0, r7]
 800c2de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2e2:	462f      	mov	r7, r5
 800c2e4:	42bb      	cmp	r3, r7
 800c2e6:	460d      	mov	r5, r1
 800c2e8:	d9f4      	bls.n	800c2d4 <_printf_i+0x110>
 800c2ea:	2b08      	cmp	r3, #8
 800c2ec:	d10b      	bne.n	800c306 <_printf_i+0x142>
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	07df      	lsls	r7, r3, #31
 800c2f2:	d508      	bpl.n	800c306 <_printf_i+0x142>
 800c2f4:	6923      	ldr	r3, [r4, #16]
 800c2f6:	6861      	ldr	r1, [r4, #4]
 800c2f8:	4299      	cmp	r1, r3
 800c2fa:	bfde      	ittt	le
 800c2fc:	2330      	movle	r3, #48	@ 0x30
 800c2fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c302:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c306:	1b92      	subs	r2, r2, r6
 800c308:	6122      	str	r2, [r4, #16]
 800c30a:	f8cd a000 	str.w	sl, [sp]
 800c30e:	464b      	mov	r3, r9
 800c310:	aa03      	add	r2, sp, #12
 800c312:	4621      	mov	r1, r4
 800c314:	4640      	mov	r0, r8
 800c316:	f7ff fee7 	bl	800c0e8 <_printf_common>
 800c31a:	3001      	adds	r0, #1
 800c31c:	d14a      	bne.n	800c3b4 <_printf_i+0x1f0>
 800c31e:	f04f 30ff 	mov.w	r0, #4294967295
 800c322:	b004      	add	sp, #16
 800c324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	f043 0320 	orr.w	r3, r3, #32
 800c32e:	6023      	str	r3, [r4, #0]
 800c330:	4832      	ldr	r0, [pc, #200]	@ (800c3fc <_printf_i+0x238>)
 800c332:	2778      	movs	r7, #120	@ 0x78
 800c334:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c338:	6823      	ldr	r3, [r4, #0]
 800c33a:	6831      	ldr	r1, [r6, #0]
 800c33c:	061f      	lsls	r7, r3, #24
 800c33e:	f851 5b04 	ldr.w	r5, [r1], #4
 800c342:	d402      	bmi.n	800c34a <_printf_i+0x186>
 800c344:	065f      	lsls	r7, r3, #25
 800c346:	bf48      	it	mi
 800c348:	b2ad      	uxthmi	r5, r5
 800c34a:	6031      	str	r1, [r6, #0]
 800c34c:	07d9      	lsls	r1, r3, #31
 800c34e:	bf44      	itt	mi
 800c350:	f043 0320 	orrmi.w	r3, r3, #32
 800c354:	6023      	strmi	r3, [r4, #0]
 800c356:	b11d      	cbz	r5, 800c360 <_printf_i+0x19c>
 800c358:	2310      	movs	r3, #16
 800c35a:	e7ad      	b.n	800c2b8 <_printf_i+0xf4>
 800c35c:	4826      	ldr	r0, [pc, #152]	@ (800c3f8 <_printf_i+0x234>)
 800c35e:	e7e9      	b.n	800c334 <_printf_i+0x170>
 800c360:	6823      	ldr	r3, [r4, #0]
 800c362:	f023 0320 	bic.w	r3, r3, #32
 800c366:	6023      	str	r3, [r4, #0]
 800c368:	e7f6      	b.n	800c358 <_printf_i+0x194>
 800c36a:	4616      	mov	r6, r2
 800c36c:	e7bd      	b.n	800c2ea <_printf_i+0x126>
 800c36e:	6833      	ldr	r3, [r6, #0]
 800c370:	6825      	ldr	r5, [r4, #0]
 800c372:	6961      	ldr	r1, [r4, #20]
 800c374:	1d18      	adds	r0, r3, #4
 800c376:	6030      	str	r0, [r6, #0]
 800c378:	062e      	lsls	r6, r5, #24
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	d501      	bpl.n	800c382 <_printf_i+0x1be>
 800c37e:	6019      	str	r1, [r3, #0]
 800c380:	e002      	b.n	800c388 <_printf_i+0x1c4>
 800c382:	0668      	lsls	r0, r5, #25
 800c384:	d5fb      	bpl.n	800c37e <_printf_i+0x1ba>
 800c386:	8019      	strh	r1, [r3, #0]
 800c388:	2300      	movs	r3, #0
 800c38a:	6123      	str	r3, [r4, #16]
 800c38c:	4616      	mov	r6, r2
 800c38e:	e7bc      	b.n	800c30a <_printf_i+0x146>
 800c390:	6833      	ldr	r3, [r6, #0]
 800c392:	1d1a      	adds	r2, r3, #4
 800c394:	6032      	str	r2, [r6, #0]
 800c396:	681e      	ldr	r6, [r3, #0]
 800c398:	6862      	ldr	r2, [r4, #4]
 800c39a:	2100      	movs	r1, #0
 800c39c:	4630      	mov	r0, r6
 800c39e:	f7f3 ff17 	bl	80001d0 <memchr>
 800c3a2:	b108      	cbz	r0, 800c3a8 <_printf_i+0x1e4>
 800c3a4:	1b80      	subs	r0, r0, r6
 800c3a6:	6060      	str	r0, [r4, #4]
 800c3a8:	6863      	ldr	r3, [r4, #4]
 800c3aa:	6123      	str	r3, [r4, #16]
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3b2:	e7aa      	b.n	800c30a <_printf_i+0x146>
 800c3b4:	6923      	ldr	r3, [r4, #16]
 800c3b6:	4632      	mov	r2, r6
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	4640      	mov	r0, r8
 800c3bc:	47d0      	blx	sl
 800c3be:	3001      	adds	r0, #1
 800c3c0:	d0ad      	beq.n	800c31e <_printf_i+0x15a>
 800c3c2:	6823      	ldr	r3, [r4, #0]
 800c3c4:	079b      	lsls	r3, r3, #30
 800c3c6:	d413      	bmi.n	800c3f0 <_printf_i+0x22c>
 800c3c8:	68e0      	ldr	r0, [r4, #12]
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	4298      	cmp	r0, r3
 800c3ce:	bfb8      	it	lt
 800c3d0:	4618      	movlt	r0, r3
 800c3d2:	e7a6      	b.n	800c322 <_printf_i+0x15e>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	4632      	mov	r2, r6
 800c3d8:	4649      	mov	r1, r9
 800c3da:	4640      	mov	r0, r8
 800c3dc:	47d0      	blx	sl
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d09d      	beq.n	800c31e <_printf_i+0x15a>
 800c3e2:	3501      	adds	r5, #1
 800c3e4:	68e3      	ldr	r3, [r4, #12]
 800c3e6:	9903      	ldr	r1, [sp, #12]
 800c3e8:	1a5b      	subs	r3, r3, r1
 800c3ea:	42ab      	cmp	r3, r5
 800c3ec:	dcf2      	bgt.n	800c3d4 <_printf_i+0x210>
 800c3ee:	e7eb      	b.n	800c3c8 <_printf_i+0x204>
 800c3f0:	2500      	movs	r5, #0
 800c3f2:	f104 0619 	add.w	r6, r4, #25
 800c3f6:	e7f5      	b.n	800c3e4 <_printf_i+0x220>
 800c3f8:	0800d2e1 	.word	0x0800d2e1
 800c3fc:	0800d2f2 	.word	0x0800d2f2

0800c400 <memmove>:
 800c400:	4288      	cmp	r0, r1
 800c402:	b510      	push	{r4, lr}
 800c404:	eb01 0402 	add.w	r4, r1, r2
 800c408:	d902      	bls.n	800c410 <memmove+0x10>
 800c40a:	4284      	cmp	r4, r0
 800c40c:	4623      	mov	r3, r4
 800c40e:	d807      	bhi.n	800c420 <memmove+0x20>
 800c410:	1e43      	subs	r3, r0, #1
 800c412:	42a1      	cmp	r1, r4
 800c414:	d008      	beq.n	800c428 <memmove+0x28>
 800c416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c41a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c41e:	e7f8      	b.n	800c412 <memmove+0x12>
 800c420:	4402      	add	r2, r0
 800c422:	4601      	mov	r1, r0
 800c424:	428a      	cmp	r2, r1
 800c426:	d100      	bne.n	800c42a <memmove+0x2a>
 800c428:	bd10      	pop	{r4, pc}
 800c42a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c42e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c432:	e7f7      	b.n	800c424 <memmove+0x24>

0800c434 <_sbrk_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4d06      	ldr	r5, [pc, #24]	@ (800c450 <_sbrk_r+0x1c>)
 800c438:	2300      	movs	r3, #0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4608      	mov	r0, r1
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	f7f5 fb46 	bl	8001ad0 <_sbrk>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d102      	bne.n	800c44e <_sbrk_r+0x1a>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	b103      	cbz	r3, 800c44e <_sbrk_r+0x1a>
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	20002764 	.word	0x20002764

0800c454 <_realloc_r>:
 800c454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c458:	4607      	mov	r7, r0
 800c45a:	4614      	mov	r4, r2
 800c45c:	460d      	mov	r5, r1
 800c45e:	b921      	cbnz	r1, 800c46a <_realloc_r+0x16>
 800c460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c464:	4611      	mov	r1, r2
 800c466:	f7ff bc5b 	b.w	800bd20 <_malloc_r>
 800c46a:	b92a      	cbnz	r2, 800c478 <_realloc_r+0x24>
 800c46c:	f7ff fbec 	bl	800bc48 <_free_r>
 800c470:	4625      	mov	r5, r4
 800c472:	4628      	mov	r0, r5
 800c474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c478:	f000 f81a 	bl	800c4b0 <_malloc_usable_size_r>
 800c47c:	4284      	cmp	r4, r0
 800c47e:	4606      	mov	r6, r0
 800c480:	d802      	bhi.n	800c488 <_realloc_r+0x34>
 800c482:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c486:	d8f4      	bhi.n	800c472 <_realloc_r+0x1e>
 800c488:	4621      	mov	r1, r4
 800c48a:	4638      	mov	r0, r7
 800c48c:	f7ff fc48 	bl	800bd20 <_malloc_r>
 800c490:	4680      	mov	r8, r0
 800c492:	b908      	cbnz	r0, 800c498 <_realloc_r+0x44>
 800c494:	4645      	mov	r5, r8
 800c496:	e7ec      	b.n	800c472 <_realloc_r+0x1e>
 800c498:	42b4      	cmp	r4, r6
 800c49a:	4622      	mov	r2, r4
 800c49c:	4629      	mov	r1, r5
 800c49e:	bf28      	it	cs
 800c4a0:	4632      	movcs	r2, r6
 800c4a2:	f7ff fbc3 	bl	800bc2c <memcpy>
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	4638      	mov	r0, r7
 800c4aa:	f7ff fbcd 	bl	800bc48 <_free_r>
 800c4ae:	e7f1      	b.n	800c494 <_realloc_r+0x40>

0800c4b0 <_malloc_usable_size_r>:
 800c4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4b4:	1f18      	subs	r0, r3, #4
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	bfbc      	itt	lt
 800c4ba:	580b      	ldrlt	r3, [r1, r0]
 800c4bc:	18c0      	addlt	r0, r0, r3
 800c4be:	4770      	bx	lr

0800c4c0 <_init>:
 800c4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c2:	bf00      	nop
 800c4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c6:	bc08      	pop	{r3}
 800c4c8:	469e      	mov	lr, r3
 800c4ca:	4770      	bx	lr

0800c4cc <_fini>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	bf00      	nop
 800c4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4d2:	bc08      	pop	{r3}
 800c4d4:	469e      	mov	lr, r3
 800c4d6:	4770      	bx	lr
